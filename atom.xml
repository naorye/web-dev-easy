<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Web Development is Easy!]]></title>
  <link href="http://webdeveasy.com/atom.xml" rel="self"/>
  <link href="http://webdeveasy.com/"/>
  <updated>2013-03-13T00:44:42+02:00</updated>
  <id>http://webdeveasy.com/</id>
  <author>
    <name><![CDATA[NaorYe]]></name>
    <email><![CDATA[mailto:naorye@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone Cache]]></title>
    <link href="http://webdeveasy.com/backbone-cache/"/>
    <updated>2013-03-12T22:37:00+02:00</updated>
    <id>http://webdeveasy.com/backbone-cache</id>
    <content type="html"><![CDATA[<p>Caching collections and models in Backbone allows to save server calls and return the result faster to the user. This means happier server and happier users. This article will guide you how to implement Backbone caching.</p>

<!-- more -->


<p>In order to support caching in Backbone, first, I&#8217;ve created a Cache class that has the basic cache behavior and knows to cache key-value items. Then, I override the Backbone.Model&#8217;s and Backbone.Collection&#8217;s fetch method so it will search the cache before fetching from the server.</p>

<h2>Cache Class</h2>

<figure class='code'><figcaption><span>Backbone.Cache class</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">Cache</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">store</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">.</span><span class="nx">Cache</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Events</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;set&quot;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">has</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">isHas</span> <span class="o">=</span> <span class="o">!!</span><span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;has&quot;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">isHas</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">isHas</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;get&quot;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;remove&quot;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">);</span>
</span><span class='line'>        <span class="k">delete</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">clear</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">trigger</span><span class="p">(</span><span class="s2">&quot;clear&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="nx">store</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each Cache instance holds an object that stored the data, and its methods manage this object. Cache also extends from Backbone.Events so it would be able to listen to events and trigger some.</p>

<h2>Fetch Cache</h2>

<p>In order to cache fetching results of a model, we need to know the key of the cache item and the cache object instance in which the item stored in. Therefore, each model or collection that needs caching has to define two properties: cacheKey and cacheObject. Defining those properties indicates that this model or collection should be cached on fetch and for later use.
Lets override Backbone.Model&#8217;s fetch. The override of Backbone.Collection&#8217;s fetch is pretty much the same.</p>

<figure class='code'><figcaption><span>Backbone.Model fetch override</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// store the original fetch for use in our fetch-cache method</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">originalFetch</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">fetch</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">fetch</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// If the model should use cache</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cacheKey</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheObject</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">options</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">||</span> <span class="p">{};</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">cacheObject</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheObject</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">cacheKey</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheKey</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">success</span> <span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">success</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Checking whether the cache object already holds the required data</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">cacheObject</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">resp</span> <span class="o">=</span> <span class="nx">cacheObject</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Do the same as the fetch method does when the data received</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">resp</span><span class="p">,</span> <span class="nx">options</span><span class="p">),</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">success</span><span class="p">)</span> <span class="nx">success</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Returns deferred as the original fetch</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">$</span><span class="p">.</span><span class="nx">Deferred</span><span class="p">().</span><span class="nx">resolve</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// The cache object doesn&#39;t hold the required data</span>
</span><span class='line'>            <span class="c1">// Preparing success method that set the cache </span>
</span><span class='line'>            <span class="nx">options</span><span class="p">.</span><span class="nx">success</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">entity</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">cacheObject</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">cacheKey</span><span class="p">,</span> <span class="nx">resp</span><span class="p">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="nx">success</span><span class="p">)</span> <span class="nx">success</span><span class="p">(</span><span class="nx">entity</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>            <span class="p">};</span>
</span><span class='line'>            <span class="c1">// Calling the original fetch</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">originalModelFetch</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// No cache for this model, calling the original fetch</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">originalModelFetch</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all! now, each model or collection that has cacheKey and cacheObject properties now cached.</p>

<h2>Usage Example</h2>

<p>First, there must define a cache object. There can be more then cache objects according to the need. For example, application global cache for caching application data or user cache for caching session user data.</p>

<figure class='code'><figcaption><span>Define global application cache</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">globalCache</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Cache</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, define the model and set cacheKey and cacheObject. In this example app.globalCache is used to cache the fetch results. Also, the results will be cached with the key &#8220;UserPermissions_X&#8221; (X is the user id).</p>

<figure class='code'><figcaption><span>Define UserPermissions model</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">UserPermissions</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>    <span class="nx">cacheObject</span><span class="o">:</span> <span class="nx">app</span><span class="p">.</span><span class="nx">globalCache</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">userId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">userId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">cacheKey</span> <span class="o">=</span> <span class="s2">&quot;UserPermissions_&quot;</span> <span class="o">+</span> <span class="nx">userId</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">urlRoot</span><span class="o">:</span> <span class="s1">&#39;api/user/permissions&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, somewhere in the application, call fetch to get the user permissions. The fetch method will ask the server for the data and then cache it.</p>

<figure class='code'><figcaption><span>Fetch user permissions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">user1Permissions</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserPermissions</span><span class="p">({</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span> <span class="p">});</span>
</span><span class='line'><span class="nx">user1Permissions</span><span class="p">.</span><span class="nx">fetch</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Later in the application, there is a need to get again the user permissions. calling fetch will immediately retrieve the user permissions from the cache object.</p>

<figure class='code'><figcaption><span>Get user permissions from cache</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">permissions</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">UserPermissions</span><span class="p">({</span> <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span> <span class="p">});</span>
</span><span class='line'><span class="nx">permissions</span><span class="p">.</span><span class="nx">fetch</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Download &amp; GitHub</h2>

<ul>
<li><a href="../code/backbone-cache/backbone-cache.zip" target="_blank">Backbone Cache Download</a></li>
<li><a href="https://github.com/naorye/BackboneCache" target="_blank">Backbone Cache GitHub Repository</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Photo Gallery Website Using Jekyll]]></title>
    <link href="http://webdeveasy.com/creating-photo-gallery-website-using-jekyll/"/>
    <updated>2013-02-25T19:03:00+02:00</updated>
    <id>http://webdeveasy.com/creating-photo-gallery-website-using-jekyll</id>
    <content type="html"><![CDATA[<p>My wife studies photography at <a href="#">Bezalel Academy Of Art</a> and I thought she should have a portfolio website for her works. So I decided to build her one. <br/>
First, I thought about using <a href="#">Wordpress</a> or other CMS, but then I realized this is too much for her. All she needs is a website with two or three layouts (for example, grid gallery and single photo layouts) and an easy way to add her photography to the website. She doesn&#8217;t need to manage users, plugins and templates with a complicated online backend. Actually, to be precise, she doesn&#8217;t even need a server side. All her website can be made by pure HTML, CSS and JavaScript. After looking for my options, I decided to use Jekyll in order to build a small project that fulfills her needs. This tutorial will present my work and give you an example of how to build static website on top of Jekyll.</p>

<!-- more -->


<h2>What Is Jekyll?</h2>

<p>Basically, Jekyll is a static site generator. It gets the site templates and contents as input, renders it and outputs a static website that contains only HTML, CSS and JavaScript. Jekyll is built on ruby, it uses <a href="#">Textile</a> or <a href="#">Markdown</a> as markup language and <a href="#">Liquid</a> as a template engine. Using Jekyll we can easily build content based static websites. <a href="#">Octopress</a> for example is a blog framework written on top of Jekyll.</p>

<h2>Why Jekyll?</h2>

<ul>
<li>Using Jekyll I can easily write my own unique desired layout without learning how to build Wordpress templates.</li>
<li>Jekyll doesn&#8217;t require any database or server side code. Therefore hosting is very simple. All I need is a place to host static website and that&#8217;s all.</li>
<li>By using Jekyll the content always stays in my possession. It doesn&#8217;t allow me forget I need to perform periodically backups, but I don&#8217;t need to export data from a database or use 3rd party applications to do it. I also don&#8217;t need to worry about data loss due to server errors.</li>
<li>I can use easily integrate my content with source control management which allows me track changes and more.</li>
</ul>


<h2>How To Use Jekyll?</h2>

<p>In order to start using Jekyll, first, we need to install Jekyll gem.
&#8212;&#8212;&#8212;> More details here
After installing Jekyll, lets create working folder named &#8220;jekyll-example&#8221; and create the file &#8220;_config.yml&#8221;. This file contains the project configurations:</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span><span class="p">:</span> <span class="s2">&quot;./_source&quot;</span>
</span><span class='line'><span class="n">destination</span><span class="p">:</span> <span class="s2">&quot;./_site&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right now the configuration only contains information about the source and the destination folders. As you can understand, by using this configurations we are telling Jekyll that the input source files will be placed under &#8221;<em>source&#8221; folder and the static website output will be placed under &#8221;</em>site&#8221; folder. <br/>
Lets create the &#8221;<em>source&#8221; folder. This folder will hold all our website files: layouts, content, JavaScript, CSS and all the other files we want Jekyll to consider when generating the static website. On generate, Jekyll will compile all the files that have yaml front matter (we will see it later) and will copy the results and all the static files to the destination folder.
We don&#8217;t need to create the destination folder, on generate, Jekyll will create it for us. <br/>
Another folder relevant for this example is the &#8221;</em>plugins&#8221; folder, which contains all the ruby plugins of our website. Plugins are system hooks that allows us to create custom generated content. During generation Jekyll executes the plugins we added. So, lets create the &#8220;_plugins&#8221; folder.
One last thing to know before we dive in to code is that Jekyll supports two different type of elements: Post and Page. Basically, both pages and posts can contain content, but posts are related to blog content while pages are related to general website content. By comparing the code of post and page, we could see a few differences:</p>

<ul>
<li>Post file name contains the title and the date of the post. invalid date in the filename cause an error.</li>
<li>Posts are Comparable objects, which means two posts can be compared. The comparison is made by the post date and the post slugs.</li>
<li>The generated default relative url of Post and Page are different (eg. /2000/01/01/my-post.html and /about.html).</li>
<li>Page can be placed anywhere but Post can only be placed under &#8220;_posts&#8221; folder.</li>
<li>Post has more data out of the box for use in Liquid templates (title, url, date, id, categories, next, previous, tags, content).</li>
<li>Posts has unique id.</li>
</ul>


<p>For simplicity I decided to use only Pages in this tutorial.</p>

<h2>Project Requirements</h2>

<p>We are creating a system that gets images and data as input and creates portfolio website out of it. Here are the requirements:
* The user don&#8217;t have to know code in order to use our system therefore his content should not contain any HTML, CSS or JavaScript.
* The final website should contain Home page and About page.
* User pages should be divided into categories. For example a photography project will be categorized under photography.
* Navigation area should contain the Home page, the About page and the projects divided by category.
* Each project will have its own set of images and the system should know to create a gallery page from them.
* Gallery page should contain a thumbnails for the images and clicking on each thumbnail should open a lightbox with the original image.</p>

<p>project requirements
input for creating the website:</p>

<pre><code>topics generator plugin
images collection generator
</code></pre>

<p>layouts (html, css and javascript): general layout and images collection
demo and download</p>

<h3>index.html</h3>

<p>Let&#8217;s begin with our application loading flow. After typing the url, the browser starts loading the index.html file:</p>

<figure class='code'><figcaption><span>index.html</span> <a href='http://webdeveasy.com/code/searcher/index.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;content-type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">/&gt;</span>      
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;js/main&quot;</span> <span class="na">src=</span><span class="s">&quot;assets/js/require.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;header&gt;</span>
</span><span class='line'>          <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;&lt;/nav&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">&quot;side-bar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;term-history&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/aside&gt;</span>
</span><span class='line'>          <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The index.html file contains the layout of our application which include placeholders for the search section, the history section and the search results area. It also includes reference to css file and reference to the require.js script.
When the browser loads this html file, right after loading style.css, the browser loads the require.js script. Look closely and you&#8217;ll notice that require.js script tag has additional attribute called &#8220;data-main&#8221;. This attribute tells require.js to load js/main.js after require.js loads.</p>

<h3>js/main.js</h3>

<p>This file contains two sections:</p>

<ul>
<li>Configuration section that configure the require.js paths and modules.</li>
<li>Initialization section that initialize the application.</li>
</ul>


<figure class='code'><figcaption><span>js/main.js</span> <a href='http://webdeveasy.com/code/Searcher/js/main.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">jQuery</span><span class="o">:</span> <span class="s1">&#39;../assets/js/jquery-1.9.0.min&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Underscore</span><span class="o">:</span> <span class="s1">&#39;../assets/js/underscore-min&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Backbone</span><span class="o">:</span> <span class="s1">&#39;../assets/js/backbone-min&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">tooltipster</span><span class="o">:</span> <span class="s1">&#39;../assets/js/jquery.tooltipster&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;../assets/js/text&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;jQuery&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;$&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s1">&#39;Underscore&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;_&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s1">&#39;Backbone&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;jQuery&#39;</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>          <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s1">&#39;tooltipster&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s1">&#39;jQuery&#39;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;router&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;app&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Router</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>require.js configuration allows us to map modules paths to names. For example, jQuery.js file is located in &#8220;libs/jquery-1.8.2.min&#8221;. Whenever we wish mark jQuery as a dependency, we will have to write this long path. Since jQuery is basic module and we probably use it a lot, it is better to map its path. <br/>
require.js works with <a href="http://requirejs.org/docs/whyamd.html" target="_blank">AMD modules</a>. The AMD structure tells require.js what are the dependencies and which object to return. The purpose of the shim configuration is to tell require.js for each un-AMD module what is its dependencies and which object to return. <br/>
After the configurations done, we ask require.js to load Backbone, router.js and app.js, and after that execute the initialization function. This function gets as parameters the AMD modules that require.js required to resolve and initializes the router, initializes the app and starts Backbone.history.</p>

<h3>app.js</h3>

<figure class='code'><figcaption><span>js/app.js</span> <a href='http://webdeveasy.com/code/searcher/js/app.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;models/query&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;views/search&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;views/history&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/sources-manager&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;models/source&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/library-of-congress/views/grid&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/google-search-api-for-shopping/views/list&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">QueryModel</span><span class="p">,</span> <span class="nx">SearchView</span><span class="p">,</span> <span class="nx">HistoryView</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">SourcesManager</span><span class="p">,</span> <span class="nx">SourceModel</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">LocGridView</span><span class="p">,</span> <span class="nx">GoogleListView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Application</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Application</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">router</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueryModel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span>
</span><span class='line'>                  <span class="s1">&#39;/search/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">),</span>
</span><span class='line'>                  <span class="p">{</span><span class="nx">trigger</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>          <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">searchView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SearchView</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">historyView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HistoryView</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SourcesManager</span><span class="p">(</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.content&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">sources</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>                      <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;library-of-congress&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Library Of Congress&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nx">view</span><span class="o">:</span> <span class="nx">LocGridView</span>
</span><span class='line'>                  <span class="p">}),</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>                      <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;google-shopping&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Google Shopping&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nx">view</span><span class="o">:</span> <span class="nx">GoogleListView</span>
</span><span class='line'>                  <span class="p">})</span>
</span><span class='line'>              <span class="p">]</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">searchView</span><span class="p">.</span><span class="nx">addSources</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets see what app.js initialization function does:</p>

<ul>
<li>Keeps reference of the router and initializes instance of QueryModel. This appQuery instance acts as a singleton and every time it changes, the router changes the url to &#8220;search/&lt;sourceId&gt;/&lt;term&gt;&#8221; (without trigger a route event).</li>
<li>Initializes the main views of the application - SearchView and HistoryView.</li>
<li>Creates two new search sources. For each source it is necessary to know it&#8217;s name, id (for internal purposes) and it&#8217;s main view. Later we will discuss on the sources feature.</li>
<li>Creates sourceManager that knows manage search sources (we will discuss on it later also) and adds to it the two search sources.</li>
<li>Adds the two search sources to the search view.</li>
</ul>


<p>At this point, the application loading flow is over and now the application waits for user interaction.
In order to understand completely how everything bonds together and works, we must understand the application features and components.</p>

<h3>router.js</h3>

<figure class='code'><figcaption><span>js/router.js</span> <a href='http://webdeveasy.com/code/searcher/js/router.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;app&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;search/:sourceId/:term&#39;</span><span class="o">:</span> <span class="s1">&#39;searchImages&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">searchImages</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourceId</span><span class="p">,</span> <span class="nx">term</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">app</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span><span class="p">,</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Router</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The router depends on app.js. Whenever a route in form &#8220;search/&lt;sourceId&gt;/&lt;term&gt;&#8221; is entered to the url, the router trigger the searchImages() method which changes the appQuery singleton.</p>

<h2>Application Features and Components</h2>

<p>Now it is time to review the searching, sources and the history features.</p>

<h3>Searching</h3>

<p>The main purpose of the application is to allow searching. The application makes searches among different search providers, therefore the input it gets from the user contains a search term and a search provider. So, we need a model to store this information. Actually, a single instance of this model will serve us during the entire use of the application. Each time the user makes a different search (change the search term or provider), the model instance changes. Later, those model changes will trigger the search.</p>

<figure class='code'><figcaption><span>js/models/query.js</span> <a href='http://webdeveasy.com/code/searcher/js/models/query.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">QueryModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">term</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">sourceId</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">QueryModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>QueryModel has two attributes. &#8220;term&#8221; for holding the search term and &#8220;sourceId&#8221; for holding the search provider. The default value for both attributes are the empty string.</p>

<p>SearchView view creates the inputs and adds the behavior of the searching process.</p>

<figure class='code'><figcaption><span>js/views/search.js</span> <a href='http://webdeveasy.com/code/searcher/js/views/search.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;text!templates/search.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">searchTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">SearchView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.search&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;click .search-button&#39;</span><span class="o">:</span> <span class="s1">&#39;setQuery&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">searchTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">searchTemplate</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">optionTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s2">&quot;&lt;option value=&#39;&lt;%= id %&gt;&#39;&gt;&lt;%= name %&gt;&lt;/option&gt;&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">applyQuery</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">setQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>      <span class="nx">applyQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">term</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">sourceId</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">searchTemplate</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.search-input&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.source-select&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">applyQuery</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">addSources</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourcesPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">sourcesPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">optionTemplate</span><span class="p">({</span>
</span><span class='line'>                    <span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">SearchView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>SearchView renders itself on initialization, and every time appQuery changes it updates the input values. On render, the view draws itself using <a href="http://underscorejs.org/#template" target="_blank">underscore templates</a> and initializes the inputs according to the appQuery. Whenever the user clicks on the search button, the view set appQuery with the new values which causing the url to change (as we saw in app.js). Notice that SearchView uses the text plugin of require.js in order to load templates/search.html. In addition, the compiled version of templates are stored in searchTemplate and in optionTemplate in order to save compilations. SearchView contains the addSource() method which gets sourceModel instance as parameter (we will see it later) and adds the new source to the sources select list.</p>

<h3>Sources</h3>

<p>As I mentioned before, the application makes searches among different search providers. The sources mechanism is responsible for defining search providers, their models and their views. This feature includes the SourcesManager view which acts as a bridge and responsible for rendering the relevant search results according to appQuery.</p>

<figure class='code'><figcaption><span>js/sources/sources-manager.js</span> <a href='http://webdeveasy.com/code/searcher/js/sources/sources-manager.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;text!templates/loading.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">loadingTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">SourcesManager</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">loadingTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">loadingTemplate</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="p">.</span><span class="nx">addSource</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceModel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">sourceId</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">sourceModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Source &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; not found!&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="k">return</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">viewType</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;view&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">viewType</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">el</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Rendering &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; with term &quot;&#39;</span><span class="o">+</span> <span class="nx">term</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">loadingTemplate</span><span class="p">());</span>
</span><span class='line'>          <span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">({</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span> <span class="p">});</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">addSource</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourceModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">sourceId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Adding source &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; to the sources pool&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">SourcesManager</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>When initialized with appQuery as model, SourcesManager renders itself on appQuery change. SourceManager has the ability to add sources using the addSource() function or using the initialization &#8220;sources&#8221; option. When it renders, it resolves the search provider&#8217;s view according to appQuery and renders it.
SourceManager initialization occurs inside the application initialization:</p>

<figure class='code'><figcaption><span>SourcesManager initialization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SourcesManager</span><span class="p">(</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.content&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sources</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;library-of-congress&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Library Of Congress&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">view</span><span class="o">:</span> <span class="nx">LocGridView</span>
</span><span class='line'>        <span class="p">}),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;google-shopping&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Google Shopping&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">view</span><span class="o">:</span> <span class="nx">GoogleListView</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>appQuery is the SourcesManager model and the search results are rendered inside &#8220;.content&#8221; element. The search providers are also defined here using the SourceModel. Each search provider should have id, name and main view which will be displayed when selected.</p>

<figure class='code'><figcaption><span>js/models/source.js</span> <a href='http://webdeveasy.com/code/searcher/js/models/source.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">SourceModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">view</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">SourceModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Google Shopping search provider</h4>

<p>Let&#8217;s explore the Google Shopping search provider. It&#8217;s files located under js/sources/google-search-api-for-shopping and it consist of ProductModel, ProductsCollection, products template and it&#8217;s main view called ListView.</p>

<figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/models/product.js</span> <a href='http://webdeveasy.com/code/searcher/js/sources/google-search-api-for-shopping/models/product.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span> <span class="s1">&#39;Backbone&#39;</span> <span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ProductModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">link</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">thumbnail</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">parse</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">product</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">product</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">product</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">attrs</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">title</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">attrs</span><span class="p">.</span><span class="nx">description</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">description</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">attrs</span><span class="p">.</span><span class="nx">link</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">link</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">product</span><span class="p">.</span><span class="nx">images</span> <span class="o">&amp;&amp;</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">status</span> <span class="o">==</span> <span class="s1">&#39;available&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span> <span class="o">&amp;&amp;</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">attrs</span><span class="p">.</span><span class="nx">thumbnail</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">link</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">attrs</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ProductModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each product contains title, description, link for the product and a small thumbnail. The parse method is used by Backbone in order to parse the response  of single product, when fetching the data from Google.</p>

<figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/collections/products.js</span> <a href='http://webdeveasy.com/code/searcher/js/sources/google-search-api-for-shopping/collections/products.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/google-search-api-for-shopping/models/product&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">ProductModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ProductsCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">model</span><span class="o">:</span> <span class="nx">ProductModel</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://www.googleapis.com/shopping/search/v1/public/products&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">parse</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">items</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ProductsCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The products collection consist of ProductModel models and the url attribute is used by Backbone fetch method.</p>

<figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/templates/products.html</span> <a href='http://webdeveasy.com/code/searcher/js/sources/google-search-api-for-shopping/templates/products.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;list-table&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;th&gt;</span>Image<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>          <span class="nt">&lt;th&gt;</span>Description<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% _.each(products, function(product) { %&gt;
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;&lt;img</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="na">src=</span><span class="s">&quot;&lt;%= product.thumbnail %&gt;&quot;</span> <span class="na">class=</span><span class="s">&quot;img-polaroid&quot;</span><span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;h4&gt;&lt;a</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span> <span class="na">href=</span><span class="s">&quot;&lt;%= product.link %&gt;&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= product.title %&gt;<span class="nt">&lt;/a&gt;&lt;/h4&gt;</span>
</span><span class='line'>              <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= product.description %&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% }); %&gt;
</span><span class='line'>  <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The search results structure defined inside the products.html as a table that contains all the products. For each product, a new product row with thumbnail, title and description is created.
Search providers can contain many views. When defining the search provider in SourcesManager, we must tell which view is the main view to display. ListView is the main view of the Google Shopping search provider.</p>

<figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/views/list.js</span> <a href='http://webdeveasy.com/code/searcher/js/sources/google-search-api-for-shopping/views/list.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/google-search-api-for-shopping/collections/products&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/google-search-api-for-shopping/models/product&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;text!sources/google-search-api-for-shopping/templates/products.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">ProductsCollection</span><span class="p">,</span> <span class="nx">ProductModel</span><span class="p">,</span> <span class="nx">productsTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ListView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">productsTemplate</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">products</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProductsCollection</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">fetch</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>                  <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;AIzaSyDEMpzAwWS40E6TBjIA_XH76QfO0YSsvDc&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">country</span><span class="o">:</span> <span class="s1">&#39;US&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">fields</span><span class="o">:</span> <span class="s1">&#39;items(product(title,description,link,images(status,thumbnails(link))))&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">q</span><span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">term</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">alt</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">thumbnails</span><span class="o">:</span> <span class="s1">&#39;128:128&#39;</span>
</span><span class='line'>              <span class="p">},</span>
</span><span class='line'>              <span class="nx">success</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="nx">products</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()}));</span>
</span><span class='line'>                  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;No result found!&#39;</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">},</span> <span class="k">this</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">error</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Error get result!!&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="p">},</span> <span class="k">this</span><span class="p">)</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ListView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ListView initializes ProductsCollection and on render fetch it and append the results to el. In case of an error or empty results, a relevant text message appears. Behind the scenes, the fetch method uses the jQuery.ajax function and the data option is passed to it. The data option contains needed properties for the Google Shopping api. Keep in mind that in your application you will need to use yours Google api key.
Now, whenever the user chooses Google Shopping as a search provider, SourcesManager initializes ListView which fetches the results and display them inside &#8220;.content&#8221; element.</p>

<h3>History</h3>

<p>Another feature of this application is history. The application stores queries history and enables us to make searches from history. In order to store the queries history we need a collection of QueryModel:</p>

<figure class='code'><figcaption><span>js/collections/queries.js</span> <a href='http://webdeveasy.com/code/searcher/js/collections/queries.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;models/query&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">QueryModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">QueriesCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">model</span><span class="o">:</span> <span class="nx">QueryModel</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">QueriesCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, in order to display the history and make each history entry clickable, There is the HistoryView:</p>

<figure class='code'><figcaption><span>js/views/history.js</span> <a href='http://webdeveasy.com/code/searcher/js/views/history.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;collections/queries&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;text!templates/queries-list.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">QueriesCollection</span><span class="p">,</span> <span class="nx">queriesListTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">HistoryView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#term-history&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;click a&#39;</span><span class="o">:</span> <span class="s1">&#39;setModel&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueriesCollection</span><span class="p">();</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addQuery</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">addQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">setModel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;source&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">queriesListTemplate</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="s1">&#39;queries&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()}));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">HistoryView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>HistoryView gets appQuery as a model, and on initialization it creates QueriesCollection instance. Whenever the appQuery changes, the view adds it to queries collection and renders itself. Render takes the queries collection and generates the markup from the queriesListTemplate dependency. Whenever the user click on history entry, the setModel() function triggered and set appQuery with the history values. As a result of appQuery change, SourcesManager&#8217;s render occurred.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searcher - Backbone application demonstration]]></title>
    <link href="http://webdeveasy.com/searcher-backbone-dot-js-application-demonstration/"/>
    <updated>2013-01-23T19:03:00+02:00</updated>
    <id>http://webdeveasy.com/searcher-backbone-dot-js-application-demonstration</id>
    <content type="html"><![CDATA[<p>In this article we will build Backbone.js application along with jQuery, underscore.js and require.js. The aim of this article is to demonstrate the use of Backbone components. As we all probably know, there are more then one way to build Backbone applications so feel comfortable to adopt what you like. <br/>
At the end of this article we will have Backbone searcher application which will know to make searches using different search providers. You can see our final application in action <a href="../code/searcher/index.html" target="_blank">here</a> and can download the code <a href="../code/searcher/searcher.zip" target="_blank">here</a>.</p>

<!-- more -->


<h2>Application Loading Flow</h2>

<h3>index.html</h3>

<p>Let&#8217;s begin with our application loading flow. After typing the url, the browser starts loading the index.html file:</p>

<figure class='code'><figcaption><span>index.html</span> <a href='http://webdeveasy.com/code/searcher/index.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;content-type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">/&gt;</span>      
</span><span class='line'>      <span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;js/main&quot;</span> <span class="na">src=</span><span class="s">&quot;assets/js/require.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="nt">&lt;header&gt;</span>
</span><span class='line'>          <span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;&lt;/nav&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">&quot;side-bar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>              <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;term-history&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/aside&gt;</span>
</span><span class='line'>          <span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The index.html file contains the layout of our application which include placeholders for the search section, the history section and the search results area. It also includes reference to css file and reference to the require.js script.
When the browser loads this html file, right after loading style.css, the browser loads the require.js script. Look closely and you&#8217;ll notice that require.js script tag has additional attribute called &#8220;data-main&#8221;. This attribute tells require.js to load js/main.js after require.js loads.</p>

<h3>js/main.js</h3>

<p>This file contains two sections:</p>

<ul>
<li>Configuration section that configure the require.js paths and modules.</li>
<li>Initialization section that initialize the application.</li>
</ul>


<figure class='code'><figcaption><span>js/main.js</span> <a href='http://webdeveasy.com/code/Searcher/js/main.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">jQuery</span><span class="o">:</span> <span class="s1">&#39;../assets/js/jquery-1.9.0.min&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Underscore</span><span class="o">:</span> <span class="s1">&#39;../assets/js/underscore-min&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">Backbone</span><span class="o">:</span> <span class="s1">&#39;../assets/js/backbone-min&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">tooltipster</span><span class="o">:</span> <span class="s1">&#39;../assets/js/jquery.tooltipster&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;../assets/js/text&#39;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">shim</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s1">&#39;jQuery&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;$&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s1">&#39;Underscore&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;_&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s1">&#39;Backbone&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;jQuery&#39;</span>
</span><span class='line'>          <span class="p">],</span>
</span><span class='line'>          <span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="s1">&#39;tooltipster&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">deps</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>              <span class="s1">&#39;jQuery&#39;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;router&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;app&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Router</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>require.js configuration allows us to map modules paths to names. For example, jQuery.js file is located in &#8220;libs/jquery-1.8.2.min&#8221;. Whenever we wish mark jQuery as a dependency, we will have to write this long path. Since jQuery is basic module and we probably use it a lot, it is better to map its path. <br/>
require.js works with <a href="http://requirejs.org/docs/whyamd.html" target="_blank">AMD modules</a>. The AMD structure tells require.js what are the dependencies and which object to return. The purpose of the shim configuration is to tell require.js for each un-AMD module what is its dependencies and which object to return. <br/>
After the configurations done, we ask require.js to load Backbone, router.js and app.js, and after that execute the initialization function. This function gets as parameters the AMD modules that require.js required to resolve and initializes the router, initializes the app and starts Backbone.history.</p>

<h3>app.js</h3>

<figure class='code'><figcaption><span>js/app.js</span> <a href='http://webdeveasy.com/code/searcher/js/app.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;models/query&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;views/search&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;views/history&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/sources-manager&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;models/source&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/library-of-congress/views/grid&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/google-search-api-for-shopping/views/list&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">QueryModel</span><span class="p">,</span> <span class="nx">SearchView</span><span class="p">,</span> <span class="nx">HistoryView</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">SourcesManager</span><span class="p">,</span> <span class="nx">SourceModel</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">LocGridView</span><span class="p">,</span> <span class="nx">GoogleListView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Application</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Application</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">router</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueryModel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">this</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span>
</span><span class='line'>                  <span class="s1">&#39;/search/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">),</span>
</span><span class='line'>                  <span class="p">{</span><span class="nx">trigger</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>          <span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">searchView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SearchView</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">historyView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HistoryView</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SourcesManager</span><span class="p">(</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.content&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">,</span>
</span><span class='line'>              <span class="nx">sources</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>                      <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;library-of-congress&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Library Of Congress&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nx">view</span><span class="o">:</span> <span class="nx">LocGridView</span>
</span><span class='line'>                  <span class="p">}),</span>
</span><span class='line'>                  <span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>                      <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;google-shopping&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Google Shopping&#39;</span><span class="p">,</span>
</span><span class='line'>                      <span class="nx">view</span><span class="o">:</span> <span class="nx">GoogleListView</span>
</span><span class='line'>                  <span class="p">})</span>
</span><span class='line'>              <span class="p">]</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">searchView</span><span class="p">.</span><span class="nx">addSources</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lets see what app.js initialization function does:</p>

<ul>
<li>Keeps reference of the router and initializes instance of QueryModel. This appQuery instance acts as a singleton and every time it changes, the router changes the url to &#8220;search/&lt;sourceId&gt;/&lt;term&gt;&#8221; (without trigger a route event).</li>
<li>Initializes the main views of the application - SearchView and HistoryView.</li>
<li>Creates two new search sources. For each source it is necessary to know it&#8217;s name, id (for internal purposes) and it&#8217;s main view. Later we will discuss on the sources feature.</li>
<li>Creates sourceManager that knows manage search sources (we will discuss on it later also) and adds to it the two search sources.</li>
<li>Adds the two search sources to the search view.</li>
</ul>


<p>At this point, the application loading flow is over and now the application waits for user interaction.
In order to understand completely how everything bonds together and works, we must understand the application features and components.</p>

<h3>router.js</h3>

<figure class='code'><figcaption><span>js/router.js</span> <a href='http://webdeveasy.com/code/searcher/js/router.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;app&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;search/:sourceId/:term&#39;</span><span class="o">:</span> <span class="s1">&#39;searchImages&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">searchImages</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourceId</span><span class="p">,</span> <span class="nx">term</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">app</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span><span class="p">,</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">Router</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The router depends on app.js. Whenever a route in form &#8220;search/&lt;sourceId&gt;/&lt;term&gt;&#8221; is entered to the url, the router trigger the searchImages() method which changes the appQuery singleton.</p>

<h2>Application Features and Components</h2>

<p>Now it is time to review the searching, sources and the history features.</p>

<h3>Searching</h3>

<p>The main purpose of the application is to allow searching. The application makes searches among different search providers, therefore the input it gets from the user contains a search term and a search provider. So, we need a model to store this information. Actually, a single instance of this model will serve us during the entire use of the application. Each time the user makes a different search (change the search term or provider), the model instance changes. Later, those model changes will trigger the search.</p>

<figure class='code'><figcaption><span>js/models/query.js</span> <a href='http://webdeveasy.com/code/searcher/js/models/query.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">QueryModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">term</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">sourceId</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">QueryModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>QueryModel has two attributes. &#8220;term&#8221; for holding the search term and &#8220;sourceId&#8221; for holding the search provider. The default value for both attributes are the empty string.</p>

<p>SearchView view creates the inputs and adds the behavior of the searching process.</p>

<figure class='code'><figcaption><span>js/views/search.js</span> <a href='http://webdeveasy.com/code/searcher/js/views/search.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;text!templates/search.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">searchTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">SearchView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.search&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;click .search-button&#39;</span><span class="o">:</span> <span class="s1">&#39;setQuery&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">searchTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">searchTemplate</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">optionTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s2">&quot;&lt;option value=&#39;&lt;%= id %&gt;&#39;&gt;&lt;%= name %&gt;&lt;/option&gt;&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">applyQuery</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">setQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>      <span class="nx">applyQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">term</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">sourceId</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">searchTemplate</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.search-input&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.source-select&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">applyQuery</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">addSources</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourcesPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">sourcesPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">optionTemplate</span><span class="p">({</span>
</span><span class='line'>                    <span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">SearchView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>SearchView renders itself on initialization, and every time appQuery changes it updates the input values. On render, the view draws itself using <a href="http://underscorejs.org/#template" target="_blank">underscore templates</a> and initializes the inputs according to the appQuery. Whenever the user clicks on the search button, the view set appQuery with the new values which causing the url to change (as we saw in app.js). Notice that SearchView uses the text plugin of require.js in order to load templates/search.html. In addition, the compiled version of templates are stored in searchTemplate and in optionTemplate in order to save compilations. SearchView contains the addSource() method which gets sourceModel instance as parameter (we will see it later) and adds the new source to the sources select list.</p>

<h3>Sources</h3>

<p>As I mentioned before, the application makes searches among different search providers. The sources mechanism is responsible for defining search providers, their models and their views. This feature includes the SourcesManager view which acts as a bridge and responsible for rendering the relevant search results according to appQuery.</p>

<figure class='code'><figcaption><span>js/sources/sources-manager.js</span> <a href='http://webdeveasy.com/code/searcher/js/sources/sources-manager.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;text!templates/loading.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">loadingTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">SourcesManager</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">loadingTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">loadingTemplate</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="p">.</span><span class="nx">addSource</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceModel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">sourceId</span><span class="p">];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">sourceModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Source &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; not found!&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="k">return</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">viewType</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;view&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">viewType</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">el</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Rendering &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; with term &quot;&#39;</span><span class="o">+</span> <span class="nx">term</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">loadingTemplate</span><span class="p">());</span>
</span><span class='line'>          <span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">({</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span> <span class="p">});</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">addSource</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourceModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">sourceId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">;</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Adding source &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; to the sources pool&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">SourcesManager</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>When initialized with appQuery as model, SourcesManager renders itself on appQuery change. SourceManager has the ability to add sources using the addSource() function or using the initialization &#8220;sources&#8221; option. When it renders, it resolves the search provider&#8217;s view according to appQuery and renders it.
SourceManager initialization occurs inside the application initialization:</p>

<figure class='code'><figcaption><span>SourcesManager initialization</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SourcesManager</span><span class="p">(</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.content&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">sources</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;library-of-congress&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Library Of Congress&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">view</span><span class="o">:</span> <span class="nx">LocGridView</span>
</span><span class='line'>        <span class="p">}),</span>
</span><span class='line'>        <span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;google-shopping&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Google Shopping&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">view</span><span class="o">:</span> <span class="nx">GoogleListView</span>
</span><span class='line'>        <span class="p">})</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>appQuery is the SourcesManager model and the search results are rendered inside &#8220;.content&#8221; element. The search providers are also defined here using the SourceModel. Each search provider should have id, name and main view which will be displayed when selected.</p>

<figure class='code'><figcaption><span>js/models/source.js</span> <a href='http://webdeveasy.com/code/searcher/js/models/source.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">SourceModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">view</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">SourceModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Google Shopping search provider</h4>

<p>Let&#8217;s explore the Google Shopping search provider. It&#8217;s files located under js/sources/google-search-api-for-shopping and it consist of ProductModel, ProductsCollection, products template and it&#8217;s main view called ListView.</p>

<figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/models/product.js</span> <a href='http://webdeveasy.com/code/searcher/js/sources/google-search-api-for-shopping/models/product.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span> <span class="s1">&#39;Backbone&#39;</span> <span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ProductModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">link</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">thumbnail</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">parse</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">product</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">product</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">product</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">attrs</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">title</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">attrs</span><span class="p">.</span><span class="nx">description</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">description</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">attrs</span><span class="p">.</span><span class="nx">link</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">link</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>              
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="nx">product</span><span class="p">.</span><span class="nx">images</span> <span class="o">&amp;&amp;</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">status</span> <span class="o">==</span> <span class="s1">&#39;available&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                  <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span> <span class="o">&amp;&amp;</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">attrs</span><span class="p">.</span><span class="nx">thumbnail</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">link</span><span class="p">;</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">attrs</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ProductModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Each product contains title, description, link for the product and a small thumbnail. The parse method is used by Backbone in order to parse the response  of single product, when fetching the data from Google.</p>

<figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/collections/products.js</span> <a href='http://webdeveasy.com/code/searcher/js/sources/google-search-api-for-shopping/collections/products.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/google-search-api-for-shopping/models/product&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">ProductModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ProductsCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">model</span><span class="o">:</span> <span class="nx">ProductModel</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://www.googleapis.com/shopping/search/v1/public/products&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">parse</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">items</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ProductsCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The products collection consist of ProductModel models and the url attribute is used by Backbone fetch method.</p>

<figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/templates/products.html</span> <a href='http://webdeveasy.com/code/searcher/js/sources/google-search-api-for-shopping/templates/products.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;list-table&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;th&gt;</span>Image<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>          <span class="nt">&lt;th&gt;</span>Description<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% _.each(products, function(product) { %&gt;
</span><span class='line'>      <span class="nt">&lt;tr&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;&lt;img</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="na">src=</span><span class="s">&quot;&lt;%= product.thumbnail %&gt;&quot;</span> <span class="na">class=</span><span class="s">&quot;img-polaroid&quot;</span><span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;td&gt;</span>
</span><span class='line'>              <span class="nt">&lt;h4&gt;&lt;a</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span> <span class="na">href=</span><span class="s">&quot;&lt;%= product.link %&gt;&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= product.title %&gt;<span class="nt">&lt;/a&gt;&lt;/h4&gt;</span>
</span><span class='line'>              <span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= product.description %&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  <span class="err">&lt;</span>% }); %&gt;
</span><span class='line'>  <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The search results structure defined inside the products.html as a table that contains all the products. For each product, a new product row with thumbnail, title and description is created.
Search providers can contain many views. When defining the search provider in SourcesManager, we must tell which view is the main view to display. ListView is the main view of the Google Shopping search provider.</p>

<figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/views/list.js</span> <a href='http://webdeveasy.com/code/searcher/js/sources/google-search-api-for-shopping/views/list.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/google-search-api-for-shopping/collections/products&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;sources/google-search-api-for-shopping/models/product&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;text!sources/google-search-api-for-shopping/templates/products.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">ProductsCollection</span><span class="p">,</span> <span class="nx">ProductModel</span><span class="p">,</span> <span class="nx">productsTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">ListView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">productsTemplate</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">products</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProductsCollection</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">fetch</span><span class="p">({</span>
</span><span class='line'>              <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>                  <span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;AIzaSyDEMpzAwWS40E6TBjIA_XH76QfO0YSsvDc&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">country</span><span class="o">:</span> <span class="s1">&#39;US&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">fields</span><span class="o">:</span> <span class="s1">&#39;items(product(title,description,link,images(status,thumbnails(link))))&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">q</span><span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">term</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">alt</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="nx">thumbnails</span><span class="o">:</span> <span class="s1">&#39;128:128&#39;</span>
</span><span class='line'>              <span class="p">},</span>
</span><span class='line'>              <span class="nx">success</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>                  <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="nx">products</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()}));</span>
</span><span class='line'>                  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                      <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;No result found!&#39;</span><span class="p">);</span>
</span><span class='line'>                  <span class="p">}</span>
</span><span class='line'>              <span class="p">},</span> <span class="k">this</span><span class="p">),</span>
</span><span class='line'>              <span class="nx">error</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Error get result!!&#39;</span><span class="p">);</span>
</span><span class='line'>              <span class="p">},</span> <span class="k">this</span><span class="p">)</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">ListView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ListView initializes ProductsCollection and on render fetch it and append the results to el. In case of an error or empty results, a relevant text message appears. Behind the scenes, the fetch method uses the jQuery.ajax function and the data option is passed to it. The data option contains needed properties for the Google Shopping api. Keep in mind that in your application you will need to use yours Google api key.
Now, whenever the user chooses Google Shopping as a search provider, SourcesManager initializes ListView which fetches the results and display them inside &#8220;.content&#8221; element.</p>

<h3>History</h3>

<p>Another feature of this application is history. The application stores queries history and enables us to make searches from history. In order to store the queries history we need a collection of QueryModel:</p>

<figure class='code'><figcaption><span>js/collections/queries.js</span> <a href='http://webdeveasy.com/code/searcher/js/collections/queries.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;models/query&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">QueryModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">QueriesCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">model</span><span class="o">:</span> <span class="nx">QueryModel</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">QueriesCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, in order to display the history and make each history entry clickable, There is the HistoryView:</p>

<figure class='code'><figcaption><span>js/views/history.js</span> <a href='http://webdeveasy.com/code/searcher/js/views/history.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;collections/queries&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;text!templates/queries-list.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">QueriesCollection</span><span class="p">,</span> <span class="nx">queriesListTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">HistoryView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#term-history&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;click a&#39;</span><span class="o">:</span> <span class="s1">&#39;setModel&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueriesCollection</span><span class="p">();</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addQuery</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">addQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">setModel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;source&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">queriesListTemplate</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="s1">&#39;queries&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()}));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">HistoryView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>HistoryView gets appQuery as a model, and on initialization it creates QueriesCollection instance. Whenever the appQuery changes, the view adds it to queries collection and renders itself. Render takes the queries collection and generates the markup from the queriesListTemplate dependency. Whenever the user click on history entry, the setModel() function triggered and set appQuery with the history values. As a result of appQuery change, SourcesManager&#8217;s render occurred.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Prototype]]></title>
    <link href="http://webdeveasy.com/javascript-prototype/"/>
    <updated>2012-11-13T10:49:17+02:00</updated>
    <id>http://webdeveasy.com/javascript-prototype</id>
    <content type="html"><![CDATA[<p>I bet you have seen the prototype keyword before. This prototype thing is very important to know and understand especially if you want to be an expert web developer. This article will explain you about it.</p>

<!-- more -->


<h2>Prototype-Based Language</h2>

<p>This part might confuse you a little, but believe me, after some examples coming next everything will be clear. So, stop the chit chat and let&#8217;s dive into the JavaScript engine!</p>

<p>JavaScript is an object oriented language, but unlike all the <a href="http://en.wikipedia.org/wiki/Class-based_programming" target="_blank">class-based languages</a> (C++, JAVA, C#, &#8230;), JavaScript is <a href="http://en.wikipedia.org/wiki/Prototype-based_programming" target="_blank">prototype-based language</a>. In class-based languages, we write classes which can be organized into hierarchy and so advance code reuse. In prototype-based languages, there is no distinction between classes and objects. An object is used as a template for creating a new object. In addition, an object&#8217;s set of properties can be extended either at creation time or at run time. This way prototype-based language furthering code reuse. There are more differences between class-based and prototype-based languages but this is enough for now.</p>

<p>Let&#8217;s instantiate a new object. In order to do it we have to define function and then simply use the &#8220;new&#8221; keyword:</p>

<figure class='code'><figcaption><span>Instantiate a new object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">baseObj</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;Hi &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">ins</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">baseObj</span><span class="p">(</span><span class="s2">&quot;Dan&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The baseObj() function is called Object Constructor since it creates and defines an object. Later we can call:</p>

<figure class='code'><figcaption><span>Hi Dan</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">ins</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">// Alerts &quot;Hi Dan&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will talk about this later.</p>

<h2>JavaScript&#8217;s Prototype</h2>

<p>In JavaScript, as we mentioned before, we can add properties to an object even after its creation:</p>

<figure class='code'><figcaption><span>Add properties to an object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">animal</span><span class="p">(){</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'>    <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">cat</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">animal</span><span class="p">();</span>
</span><span class='line'><span class="nx">cat</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&quot;Green&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is important to notice that the color property is added only to the cat instance. Other instances of animal will not contain the color property. But, there are times where we want to add a property to all the instances of an object. Each animal has a color and not only cats, therefore color property is relevant to all instances of animal. That&#8217;s where the prototype object of JavaScript comes in.</p>

<p>In JavaScript, each object has a property called &#8220;prototype&#8221;. An object&#8217;s prototype allows us adding properties to all instances of that object (even to the existing instances). For example:</p>

<figure class='code'><figcaption><span>Add the color property to all animal instances </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">frog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">animal</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">frog</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span> <span class="c1">// frog doesn&#39;t have the color property yet</span>
</span><span class='line'>
</span><span class='line'><span class="nx">animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&quot;Green&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">animal</span><span class="p">();</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">dog</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span> <span class="c1">// will log &quot;Green&quot;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">frog</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span> <span class="c1">// will also log &quot;Green&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This adds and initialize the color property to every present and future animal instances.</p>

<p>Similar to properties, we can add methods and reflects all the instances:</p>

<figure class='code'><figcaption><span>Add the color method to all instances</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">run</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;I am running!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">dog</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span> <span class="c1">// will log &quot;I am running!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This functionality allows us to do very useful things like extending the behavior of an Array and add a method that gets an element and removes it from the array:</p>

<figure class='code'><figcaption><span>Extend Array&#8217;s functionality</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">remove</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">elem</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">index</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>
</span><span class='line'><span class="nx">arr</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// will keep the array to be [1, 2, 3, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example I used the &#8220;this&#8221; keyword inside the method. Keep in mind that &#8220;this&#8221; refer to the object that calls the method. In this example when calling arr.remove(4), &#8220;this&#8221; refer to arr and therefore this.indexOf(elem) returns the index of elem in arr.</p>

<h2>The Object Constructor Way</h2>

<p>Besides the prototype approach, another way to define properties and methods is by doing it inside the object constructor:</p>

<figure class='code'><figcaption><span>Define properties and methods inside the object constructor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">animal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&quot;Green&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">run</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;I am running!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mouse</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">animal</span><span class="p">();</span>
</span><span class='line'><span class="nx">mouse</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span> <span class="c1">// will log &quot;I am running!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code results the same object structure as the prototype approach. Each instance of animal will have the color property and the run method.</p>

<p>The main advantage of this approach is that you can make a use of local variables defined inside the object constructor:</p>

<figure class='code'><figcaption><span>Use local variables inside an object constructor</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">animal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">runAlready</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&quot;Green&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">run</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">runAlready</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;I am running!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;I am already running!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those local variable &#8220;runAlready&#8221; is acting like private members of C# and JAVA. No one can access this variable except the object&#8217;s methods.</p>

<p>This approach might seem more readable and convenient but actually is not always recommended, especially when adding many methods. If you don&#8217;t need to use local variables defined inside the object constructor, then there is no reason to use this approach and using prototype is better. That is because if you are going to create lots of animals, a new set of methods will be created and held in different instances each time the animal constructor is called. In the prototype approach, all the instances will share one set of methods and therefore less memory.</p>

<p>You can also use combine approaches whereby methods that uses private local constructor variables will be defined inside the constructor while other methods will be added using the prototype:</p>

<figure class='code'><figcaption><span>Combined approach for extend an object&#8217;s functionality</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">animal</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">runAlready</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">run</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">runAlready</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;I am running!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;I am already running!&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="s2">&quot;Green&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nx">animal</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hide</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;I am hiding!&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">horse</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">animal</span><span class="p">();</span>
</span><span class='line'><span class="nx">horse</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span> <span class="c1">// will log &quot;I am running!&quot;</span>
</span><span class='line'><span class="nx">horse</span><span class="p">.</span><span class="nx">hide</span><span class="p">();</span> <span class="c1">// will log &quot;I am hiding!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusion</h2>

<p>With this article we understood the meaning of prototype-based language, we saw how we can use the prototype property in order to add properties and methods to all instances of an object. We even saw a practical example of extending Array&#8217;s behavior! :) I demonstrated another way to add properties using the object constructor and explained its drawback.</p>

<p>If you wish to read more about the differences between class-based languages and prototype-based languages, dig in details about prototype and inheritance, I highly recommend to read Mozilla&#8217;s <a href="https://developer.mozilla.org/en-US/docs/Core_JavaScript_1.5_Guide/Details_of_the_Object_Model" target="_blank">Details of the object model</a> guide.</p>

<p>I really enjoyed writing this article and I hope you enjoyed even more to read it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone Singleton]]></title>
    <link href="http://webdeveasy.com/backbone-singleton/"/>
    <updated>2012-11-05T19:13:36+02:00</updated>
    <id>http://webdeveasy.com/backbone-singleton</id>
    <content type="html"><![CDATA[<p>Using Backbone.js, sometimes we need a model that will act like a singleton. Other times we want to reuse the type of that singleton. This article will present two different ways of creating a singleton using Backbone.js and require.js. While the first way is simpler and more intuitive, the second allows us more flexibility</p>

<!-- more -->


<h2>Simple Singleton</h2>

<p>I am working on a little application using Backbone.js and require.js. The application lets the user making searches by a keyword. <br/>
Thinking of the model, I realized that I need a model that will hold the keyword and since the keyword is single in the application, it should be a singleton.
Because I am working with require.js, in order to simulate a singleton, I created a module that will return an instance of the Keyword model.</p>

<figure class='code'><figcaption><span>KeywordModel</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">Backbone</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">KeywordModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">keyword</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">KeywordModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way whenever I need the Keyword single instance, all I have to do is just add keyword.js as a dependency:</p>

<figure class='code'><figcaption><span>Getting the Keyword single instance</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;models/keyword&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">keywordModel</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">SearchView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#search&#39;</span>
</span><span class='line'>      <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="s1">&#39;change&#39;</span><span class="o">:</span> <span class="s1">&#39;setModel&#39;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">keywordModel</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;change: keyword&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">keyword</span> <span class="o">=</span> <span class="nx">keywordModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;keyword&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">keyword</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">setModel</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">keyword</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>          <span class="nx">keywordModel</span><span class="p">.</span><span class="nx">set</span><span class="p">({</span> <span class="nx">keyword</span><span class="o">:</span> <span class="nx">keyword</span> <span class="p">});</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">SearchView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first time require.js required to load models/keyword.js, it gets it from the server and returns a new instance of KeywordModel. The next time we ask require.js for models/keyword.js, instead of creating a new instance, require.js returns us the cached instance.</p>

<h2>Desire To Make History</h2>

<p>Now, lets assume that I want to store searches history (each history record contains only the keyword). <br/>
Obviously this means that I have to use a collection, but which model shall I use? I cannot use KeywordModel since I don&#8217;t have access to its definition. Any time I&#8217;ll ask for models/keyword.js all I get from require.js is the model instance and not it&#8217;s definition. <br/>
One solution is to create a new model and return its definition, but this solution is undesirable since we make unnecessary duplication. <br/>
In order to solve this issue we have to remember that <a href="http://backbonejs.org/#Model-extend" target="_blank">Backbone model&#8217;s extend function</a> can get an optional parameter called &#8220;classProperties&#8221;. These set of properties can be seen as static properties that are related to the class and not to the instance. Therefore our model can be:</p>

<figure class='code'><figcaption><span>Using class properties</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">Backbone</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">KeywordModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">keyword</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">},</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">singleton</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">getAppKeyword</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">KeywordModel</span><span class="p">.</span><span class="nx">singleton</span> <span class="o">=</span>
</span><span class='line'>              <span class="nx">KeywordModel</span><span class="p">.</span><span class="nx">singleton</span> <span class="o">||</span> <span class="k">new</span> <span class="nx">KeywordModel</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">KeywordModel</span><span class="p">.</span><span class="nx">singleton</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">KeywordModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now, asking for models/keyword.js as a dependency will get us the definition which can be used to retrieve the singleton by calling KeywordModel.getAppKeyword(). Here is the collection of KeywordModel models:</p>

<figure class='code'><figcaption><span>Collection of KeywordModel models</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>  <span class="s1">&#39;backbone&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;models/keyword&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">KeywordModel</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">KeywordsCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">model</span><span class="o">:</span> <span class="nx">KeywordModel</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">appKeyword</span> <span class="o">=</span> <span class="nx">KeywordModel</span><span class="p">.</span><span class="nx">getAppKeyword</span><span class="p">();</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">appKeyword</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span> <span class="s1">&#39;change: keyword&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">pushCopy</span><span class="p">,</span> <span class="k">this</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">pushCopy</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">clone</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">appKeyword</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span>
</span><span class='line'>          <span class="k">this</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">clone</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">new</span> <span class="nx">KeywordsCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way, any time the model&#8217;s keyword changes, a copy of the application keyword is added to the collection.</p>

<p>I hope this short article gave you another new ideas, thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Plugin Pattern]]></title>
    <link href="http://webdeveasy.com/jquery-plugin-pattern/"/>
    <updated>2012-10-02T22:07:46+02:00</updated>
    <id>http://webdeveasy.com/jquery-plugin-pattern</id>
    <content type="html"><![CDATA[<p>jQuery plugin is an extension to jQuery that encapsulates an ability or visual behaveiour so that it can be used later and in many different parts in a web application. This article will explain the basics of jQuery plugin and guide you how to create a simple jQuery plugin.</p>

<!-- more -->


<h2>Two jQuery Plugin Types</h2>

<p>I distinguish between two types of of jQuery plugins:</p>

<p><strong>Plugin that works on element.</strong> For example, a plugin that converts &lt;select&gt; element to an autocomplete. Such plugin is working on the select element. This kind of plugin is actually extention to the jQuery prototype (or $.fn):</p>

<figure class='code'><figcaption><span>Extention to $.fn</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span> <span class="c1">//plugin content</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Invocation of such plugins looks like:</p>

<figure class='code'><figcaption><span>Plugin invocation  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#my-elem&#39;</span><span class="p">).</span><span class="nx">myPlugin</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Plugin that doesn&#8217;t work on element.</strong> <a href="http://docs.jquery.com/Utilities" target="_blank">The utilities of jQuery</a> are good examples for such plugin. They are actually functions that located in the jQuery object (or $):</p>

<figure class='code'><figcaption><span>Extention to $</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span> <span class="c1">//plugin content</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Invocation of such plugins looks like:</p>

<figure class='code'><figcaption><span>Plugin invocation </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">myPlugin</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Both types of plugins can get data as input, make DOM manipulations, make calculations, let the user interact them and much more.</p>

<h2>Limit The Scope</h2>

<p>Usually when writing jQuery plugin (or any JavaScript code), it is a good idea to limit it&#8217;s scope. This way you can prevent access to private variables and functions. In addition, using scopes may helping prevent naming conflicts. In order to limit the scope of jQuery plugin, wrap it with a function and invoke it. For example:</p>

<figure class='code'><figcaption><span>Plugin inside IIFE    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">...</span> <span class="c1">//plugin content</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is called <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank">Immediately-Invoked Function Expression (IIFE)</a>.</p>

<h2>The Dollar Sign</h2>

<p>The dollar sign ($) is a synonym to the jQuery library. It is shorter and look better then the &#8220;jQuery&#8221; word. Because of that, there are many other libraries that make a use with the dollar sign as a synonym. So, we have to be sure our plugin doesn&#8217;t collide with other libraries. Therefore passing jQuery as a parameter to the IIFE is a best practice:</p>

<figure class='code'><figcaption><span>Passing jQuery as a parameter to the IIFE     </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// Here we sure $ is jQuery</span>
</span><span class='line'>      <span class="p">...</span> <span class="c1">// Plugin content</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Plugin Parameters and Defaults</h2>

<p>We can pass parameters to our plugin when calling it, for example:</p>

<figure class='code'><figcaption><span>Pass parameters to our plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#elem&#39;</span><span class="p">).</span><span class="nx">myPlugin</span><span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">param2</span><span class="p">,</span> <span class="nx">param3</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>But, sometimes our plugin will have a lot of parameters (for instance, <a href="http://www.trirand.com/blog/" target="_blank">jqGrid</a> plugin has more then 20 parameters) and some of them might be optionals. For this reason we wrap all the parameters in an object. For example, assume our plugin gets parameters &#8220;name&#8221;, &#8220;address&#8221; and &#8220;color&#8221;, we will define our plugin:</p>

<figure class='code'><figcaption><span>Define jQuery plugin with options</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>and for calling it:</p>

<figure class='code'><figcaption><span>Call jQuery plugin with options  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#elem&#39;</span><span class="p">).</span><span class="nx">myPlugin</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Naor&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">address</span><span class="o">:</span> <span class="s1">&#39;Jerusalem&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;Green&#39;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way the user can supply only the parameters he wants. But this leads to another problem. What if the plugin need the color parameter which wasn&#8217;t supplied? The solution is simple. All we have to do is to make a defaults to the parameters:</p>

<figure class='code'><figcaption><span>Options with defaults</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;no-name&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">address</span><span class="o">:</span> <span class="s1">&#39;none&#39;</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">color</span><span class="o">:</span> <span class="s1">&#39;white&#39;</span>
</span><span class='line'>      <span class="p">},</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>      <span class="p">...</span> <span class="c1">// The rest of the plugin</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way we support many options with optional parameters. <br/>
In case we want to force the user pass some parameters, we can use the old way for the compulsory parameters and an &#8220;options&#8221; object for the optionals:</p>

<figure class='code'><figcaption><span>Compulsory and optionals parameters</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// param1 is compulsory</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">param1</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>The <em>this</em> Expression</h2>

<p>Inside a plugin definition the <em>this</em> expression has a different meaning between the two plugin types. I&#8217;ll explain the meaning of the <em>this</em> expression using examples:</p>

<h3>The <em>this</em> expression for plugins that do not work on an element</h3>

<figure class='code'><figcaption><span>The &#8220;this&#8221; expression</span> <a href='http://webdeveasy.com/code/jquery-plugin-pattern/this-expression/this1.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="o">&lt;!</span><span class="nx">doctype</span> <span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">jQuery</span> <span class="nx">Plugins</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;../assets/js/jquery-1.9.0.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// Here &lt;i&gt;this&lt;/i&gt; represents the jQuery object</span>
</span><span class='line'>                  <span class="k">return</span> <span class="nx">$</span> <span class="o">===</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>              <span class="p">};</span>
</span><span class='line'>          <span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="nx">Is</span> <span class="o">&lt;</span><span class="nx">i</span><span class="o">&gt;</span><span class="k">this</span><span class="o">&lt;</span><span class="sr">/i&gt; equals jQuery? &lt;span id=&quot;isEqual&quot; /</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#isEqual&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">myPlugin</span><span class="p">());</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that inside such plugin, <em>this</em> is equal to jQuery.
You can watch this example <a href="../code/jquery-plugin-pattern/this-expression/this1.html" target="_blank">here</a>.</p>

<h3>The <em>this</em> expression for plugins that do work on an element</h3>

<figure class='code'><figcaption><span>The &#8220;this&#8221; expression</span> <a href='http://webdeveasy.com/code/jquery-plugin-pattern/this-expression/this2.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="o">&lt;!</span><span class="nx">doctype</span> <span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">jQuery</span> <span class="nx">Plugins</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;../assets/js/jquery-1.9.0.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="c1">// Here &lt;i&gt;this&lt;/i&gt; is a reference to the actaul jQuery</span>
</span><span class='line'>                  <span class="c1">// element the plugin works on.</span>
</span><span class='line'>                  <span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                      <span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>                      <span class="kd">var</span> <span class="nx">elemType</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;tagName&#39;</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>                      <span class="k">switch</span><span class="p">(</span><span class="nx">elemType</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>                          <span class="k">case</span> <span class="s1">&#39;input&#39;</span><span class="o">:</span>
</span><span class='line'>                              <span class="nx">current</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>                              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                          <span class="k">case</span> <span class="s1">&#39;select&#39;</span><span class="o">:</span>
</span><span class='line'>                              <span class="nx">current</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;option&gt;&#39;</span> <span class="o">+</span> <span class="nx">text</span> <span class="o">+</span> <span class="s1">&#39;&lt;/option&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>                              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                          <span class="k">case</span> <span class="s1">&#39;span&#39;</span><span class="o">:</span>
</span><span class='line'>                              <span class="nx">current</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>                              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>                      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                  <span class="p">});</span>
</span><span class='line'>              <span class="p">};</span>
</span><span class='line'>          <span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Choose</span> <span class="nx">text</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;my-text&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;my-button&quot;</span><span class="o">&gt;</span><span class="nx">Press</span> <span class="nx">here</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Span</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;target&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/span&gt; &lt;br/</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">Text</span> <span class="nx">input</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;target&quot;</span> <span class="o">/&gt;</span> <span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>          <span class="nx">Select</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">select</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;target&quot;</span><span class="o">&gt;&lt;</span><span class="err">/select&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#my-button&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>                  <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#my-text&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>                  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">myPlugin</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>              <span class="p">});</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that <em>this</em> is a reference to the main element that the plugin works on. Sometimes, like in this example, the jQuery element represents more then one DOM element and we have to iterate each one of them in order to effect all of the DOM elements. In this example each DOM element is different element and so different treatment.
You can watch this example <a href="../code/jquery-plugin-pattern/this-expression/this2.html" target="_blank">here</a>.</p>

<h2>jQuery Chaining Principal</h2>

<p><strong>jQuery Chaining Principal is relevant only to plugins that do work on an element.</strong></p>

<p>Take this code for example:</p>

<figure class='code'><figcaption><span>jQuery without chaining</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#elem&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;active&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#elem&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;some value&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#elem&#39;</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code adds css class to an element, sets its value and disables it. Instead of three different lines of code we can write:
I believe you&#8217;ve seen this syntax before:</p>

<figure class='code'><figcaption><span>jQuery chaining</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#elem&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;active&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="s1">&#39;some value&#39;</span><span class="p">).</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;disabled&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This looks better, easier to understand and more effective (no need to search for &#8216;#elem&#8217; a few times). This is made possible due to the jQuery chaining principal. Each jQuery method or plugin returns the element or elements that it works on:</p>

<figure class='code'><figcaption><span>jQuery chaining principal    </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="p">...</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="p">;</span> <span class="c1">// This line responsible for chaining</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that inside the plugin scope, the <em>this</em> expression referenced to the element itself.</p>

<h2>User Interface</h2>

<p>Up to now we saw a plugin structure wrapped in IIFE, with $ as jQuery and with compulsory/optional parameters. We undertsood the <em>this</em> expression inside a plugin and saw the chaining principal in action. Now we need to see how to create an interface so the user can interact with the plugin. I&#8217;ll do it separately for each plugin type.</p>

<h3>Plugin that doesn&#8217;t work on element</h3>

<p>The first plugin doesn&#8217;t work on element, it gets positions and a text as parameters and displays the text on the specified position:</p>

<figure class='code'><figcaption><span>float plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="kr">float</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">posX</span><span class="p">,</span> <span class="nx">posY</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="o">+</span><span class="nx">text</span><span class="o">+</span><span class="s1">&#39;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">left</span><span class="o">:</span> <span class="nx">posX</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">top</span><span class="o">:</span> <span class="nx">posY</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;absolute&#39;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we want to allow the user to move the text to a new position and to remove it. Let&#8217;s write methods:</p>

<figure class='code'><figcaption><span>changePosition() and remove() methods  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">changePosition</span><span class="p">(</span><span class="nx">elem</span><span class="p">,</span> <span class="nx">posX</span><span class="p">,</span> <span class="nx">posY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">elem</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">left</span><span class="o">:</span> <span class="nx">posX</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">top</span><span class="o">:</span> <span class="nx">posY</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">remove</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">elem</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="kr">float</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">posX</span><span class="p">,</span> <span class="nx">posY</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="o">+</span><span class="nx">text</span><span class="o">+</span><span class="s1">&#39;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">left</span><span class="o">:</span> <span class="nx">posX</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">top</span><span class="o">:</span> <span class="nx">posY</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;absolute&#39;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that the user doesn&#8217;t have an access to &#8220;changePosition&#8221; nor &#8220;remove&#8221; and he never holds the &lt;div&gt; element. So now we need to connect the user to the methods. In order to do it we make the &#8220;float&#8221; plugin return a &#8220;remote control&#8221; object:</p>

<figure class='code'><figcaption><span>jQuery plugin returns &#8220;remote control&#8221; object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">changePosition</span><span class="p">(</span><span class="nx">elem</span><span class="p">,</span> <span class="nx">posX</span><span class="p">,</span> <span class="nx">posY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">elem</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">left</span><span class="o">:</span> <span class="nx">posX</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">top</span><span class="o">:</span> <span class="nx">posY</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kd">function</span> <span class="nx">remove</span><span class="p">(</span><span class="nx">elem</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">elem</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="kr">float</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">posX</span><span class="p">,</span> <span class="nx">posY</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">elem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div&gt;&#39;</span><span class="o">+</span><span class="nx">text</span><span class="o">+</span><span class="s1">&#39;&lt;/div&gt;&#39;</span><span class="p">).</span><span class="nx">appendTo</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">left</span><span class="o">:</span> <span class="nx">posX</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">top</span><span class="o">:</span> <span class="nx">posY</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">position</span><span class="o">:</span> <span class="s1">&#39;absolute&#39;</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">changePosition</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">posX</span><span class="p">,</span> <span class="nx">posY</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="nx">changePosition</span><span class="p">(</span><span class="nx">elem</span><span class="p">,</span> <span class="nx">posX</span><span class="p">,</span> <span class="nx">posY</span><span class="p">);</span>
</span><span class='line'>          <span class="p">},</span>
</span><span class='line'>          <span class="nx">remove</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">remove</span><span class="p">(</span><span class="nx">elem</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>    
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, whenever the user will invoke $.float(..) he will get a &#8220;remote control&#8221; object with the interface we want to provide, and in order to use it:</p>

<figure class='code'><figcaption><span>Interact with a plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">control</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="kr">float</span><span class="p">(</span><span class="s1">&#39;100px&#39;</span><span class="p">,</span> <span class="s1">&#39;100px&#39;</span><span class="p">,</span> <span class="s1">&#39;Hello!&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">control</span><span class="p">.</span><span class="nx">changePosition</span><span class="p">(</span><span class="s1">&#39;200px&#39;</span><span class="p">,</span> <span class="s1">&#39;200px&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Live example for the float plugin you can find <a href="../code/jquery-plugin-pattern/float-plugin/float.html" target="_blank">here</a>.</p>

<h3>Plugin that does work on element</h3>

<p>The second plugin does work on element. It works on an &lt;input&gt; element and gets two parameters: &lt;ul&gt; selector and a number &#8220;N&#8221;. Whenever the input&#8217;s value changes, the &lt;ul&gt; gets filled with &#8220;N&#8221; items containing the value:</p>

<figure class='code'><figcaption><span>Compose plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">compose</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">number</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">ul</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>      <span class="p">},</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ul</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ul</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">options</span><span class="p">.</span><span class="nx">number</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">ul</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&#39;</span> <span class="o">+</span> <span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>            
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we want to allow the user to change the number parameter &#8220;N&#8221;. Again, let&#8217;s write a method for changing the parameter:</p>

<figure class='code'><figcaption><span>setNumber() method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">compose</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">number</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">ul</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>      <span class="p">},</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">function</span> <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">options</span><span class="p">.</span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ul</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ul</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">options</span><span class="p">.</span><span class="nx">number</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">ul</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&#39;</span> <span class="o">+</span> <span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>            
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Like the former plugin example, the user doesn&#8217;t have an access to &#8220;setNumber&#8221; method. Unlike the former plugin example, here we cannot return a &#8220;remote control&#8221; object. Due to jQuery chaining principal we have to return <em>this</em>. For solving this we use <a href="http://api.jquery.com/jQuery.data/" target="_blank">jQuery.data()</a> method. This method allows us attach key-value data to an element. For example, $(&#8216;#elem&#8217;).data(&#8216;my-color&#8217;, &#8216;Green&#8217;); attaches the &#8220;my-color = Green&#8221; key-value to the element. In order to get the value of &#8220;my-color&#8221; all we have to do is: $(&#8216;#elem&#8217;).data(&#8216;my-color&#8217;) and we get &#8220;Green&#8221;.
So we use the jQuery.data() method to attach the &#8220;remote control&#8221; object to the element, and as a key we use the name of the plugin &#8220;compose&#8221;:</p>

<figure class='code'><figcaption><span>jQuery plugin returns &#8220;remote control&#8221; object</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">compose</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">options</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">number</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">ul</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>      <span class="p">},</span> <span class="nx">options</span><span class="p">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="kd">function</span> <span class="nx">setNumber</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">options</span><span class="p">.</span><span class="nx">number</span> <span class="o">=</span> <span class="nx">number</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">change</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ul</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>              <span class="kd">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">ul</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>              <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">options</span><span class="p">.</span><span class="nx">number</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                  <span class="nx">ul</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;&#39;</span> <span class="o">+</span> <span class="nx">value</span> <span class="o">+</span> <span class="s1">&#39;&lt;/li&gt;&#39;</span><span class="p">)</span>
</span><span class='line'>              <span class="p">}</span>            
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;compose&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">setNumber</span><span class="o">:</span> <span class="nx">setNumber</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, in order to change the number:</p>

<figure class='code'><figcaption><span>Interact with a plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#elem&#39;</span><span class="p">).</span><span class="nx">compose</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">number</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">ul</span><span class="o">:</span> <span class="s1">&#39;#ul&#39;</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#elem&#39;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;compose&#39;</span><span class="p">).</span><span class="nx">setNumber</span><span class="p">(</span><span class="mi">8</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And then the input&#8217;s value will appear 8 times.
Live example for the compose plugin you can find <a href="../code/jquery-plugin-pattern/compose-plugin/compose.html" target="_blank">here</a>.</p>

<h2>Summary</h2>

<p>In this article I presented two jQuery plugin types and their structure (IIFE wrap and jQuery injection as $), I explained how to add compulsory and optional parameters, demonstrated the meaning of the <em>this</em> expression and described the jQuery chaining principal. At the end I also presented a way of letting the user interact the plugins.</p>

<h3>Template of plugin that does not work on an element</h3>

<figure class='code'><figcaption><span>Template of plugin that does not work on an element</span> <a href='http://webdeveasy.com/code/jquery-plugin-pattern/templates/plugin-template-1.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">jQuery</span> <span class="nt">plugin</span> <span class="nt">template</span> <span class="nt">for</span> <span class="nt">plugin</span> <span class="nt">that</span> <span class="nt">does</span> <span class="nt">not</span> <span class="nt">work</span> <span class="nt">on</span> <span class="nt">element</span>
</span><span class='line'><span class="o">(</span><span class="nt">function</span><span class="o">(</span><span class="err">$</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">$</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="err">$</span><span class="o">,</span> <span class="err">{</span>
</span><span class='line'>      <span class="n">pluginName</span><span class="o">:</span> <span class="n">function</span><span class="p">(</span><span class="n">param</span><span class="o">,</span> <span class="n">options</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>          <span class="n">options</span> <span class="o">=</span> <span class="err">$</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="err">{</span>
</span><span class='line'>              <span class="o">//</span> <span class="n">Options</span> <span class="n">Defaults</span>
</span><span class='line'>          <span class="p">}</span><span class="o">,</span> <span class="nt">options</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="o">//</span> <span class="nt">Plugin</span> <span class="nt">content</span>
</span><span class='line'>      
</span><span class='line'>          <span class="nt">return</span> <span class="p">{</span>
</span><span class='line'>              <span class="o">//</span> <span class="n">Plugin</span> <span class="n">interface</span> <span class="n">object</span>
</span><span class='line'>          <span class="p">}</span><span class="o">;</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span><span class="o">);</span>
</span><span class='line'><span class="err">}</span><span class="o">)(</span><span class="nt">jQuery</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Template of plugin that does work on an element</h3>

<figure class='code'><figcaption><span>Template of plugin that does not work on an element</span> <a href='http://webdeveasy.com/code/jquery-plugin-pattern/templates/plugin-template-2.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">jQuery</span> <span class="nt">plugin</span> <span class="nt">template</span> <span class="nt">for</span> <span class="nt">plugin</span> <span class="nt">that</span> <span class="nt">does</span> <span class="nt">work</span> <span class="nt">on</span> <span class="nt">element</span>
</span><span class='line'><span class="o">(</span><span class="nt">function</span><span class="o">(</span><span class="err">$</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">$</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="err">$</span><span class="o">.</span><span class="n">fn</span><span class="o">,</span> <span class="err">{</span>
</span><span class='line'>      <span class="n">pluginName</span><span class="o">:</span> <span class="n">function</span><span class="p">(</span><span class="n">param</span><span class="o">,</span> <span class="n">options</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>          <span class="n">options</span> <span class="o">=</span> <span class="err">$</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="err">{</span>
</span><span class='line'>              <span class="o">//</span> <span class="n">Options</span> <span class="n">Defaults</span>
</span><span class='line'>          <span class="p">}</span><span class="o">,</span> <span class="nt">options</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nt">this</span><span class="nc">.each</span><span class="o">(</span><span class="nt">function</span><span class="o">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="o">//</span> <span class="n">Operations</span> <span class="n">for</span> <span class="n">each</span> <span class="n">DOM</span> <span class="n">element</span>
</span><span class='line'>          <span class="p">}</span><span class="o">)</span><span class="nc">.data</span><span class="o">(</span><span class="s1">&#39;pluginName&#39;</span><span class="o">,</span> <span class="p">{</span>
</span><span class='line'>              <span class="o">//</span> <span class="n">Plugin</span> <span class="n">interface</span> <span class="n">object</span>
</span><span class='line'>          <span class="p">}</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>          <span class="nt">return</span> <span class="nt">this</span><span class="o">;</span>
</span><span class='line'>      <span class="err">}</span>
</span><span class='line'>  <span class="err">}</span><span class="o">);</span>
</span><span class='line'><span class="err">}</span><span class="o">)(</span><span class="nt">jQuery</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo &amp; Download</h2>

<ul>
<li>Live example for the float plugin you can find <a href="../code/jquery-plugin-pattern/float-plugin/float.html" target="_blank">here</a>.</li>
<li>Live example for the compose plugin you can find <a href="../code/jquery-plugin-pattern/compose-plugin/compose.html" target="_blank">here</a>.</li>
<li><a href="../code/jquery-plugin-pattern/jquery-plugin-pattern.zip" target="_blank">Here</a> you can find all the examples of this post and the plugins templates.</li>
</ul>


<p>I hope you find this post useful, and if you have any question, don&#8217;t hesitate to ask!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Style Your jQuery-UI Tabs]]></title>
    <link href="http://webdeveasy.com/style-your-jquery-ui-tabs/"/>
    <updated>2012-09-22T20:11:31+03:00</updated>
    <id>http://webdeveasy.com/style-your-jquery-ui-tabs</id>
    <content type="html"><![CDATA[<p>This article will explain and guide you step by step how to style your jQuery-UI tabs and make them look like this:</p>

<iframe src="../code/style-your-jquery-ui-tabs/style-tabs.html" width="100%"></iframe>


<!-- more -->


<p>For this example you will need <a href="http://www.jquery.com" target="_blank">jQuery</a> and <a href="http://www.jqueryui.com" target="_blank">jQuery-UI</a> for the <a href="http://jqueryui.com/demos/tabs/" target="_blank">tabs plugin</a>. There are many ways to use the tabs plugin and here I will use one of those methods.</p>

<h2>jQuery UI Tabs Markup</h2>

<p>The tabs plugin gets a parent element that contains an unordered list (&lt;ul&gt;). Each item in the list (&lt;li&gt;) represents a tab and contains an anchor (&lt;a&gt;) with a link to the data container div. For example:</p>

<figure class='code'><figcaption><span>Tabs plugin structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tabsContainer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#firstTab&quot;</span><span class="nt">&gt;</span>First Tab<span class="nt">&lt;a/&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#secondTab&quot;</span><span class="nt">&gt;</span>Second Tab<span class="nt">&lt;a/&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#thirdTab&quot;</span><span class="nt">&gt;</span>Third Tab<span class="nt">&lt;a/&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;firstTab&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Content for the first tab
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;secondTab&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Content for the second tab
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;thirdTab&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      Content for the third tab
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see the parent element (&#8220;div#tabsContainer&#8221;) also contains the data containers. Each anchor has a reference to the id of the data container it represents. This way the tabs plugin knows for each tab which div to display.</p>

<h2>Our Tabs Markup</h2>

<p>This is our example&#8217;s structure:</p>

<figure class='code'><figcaption><span>Our example&#8217;s structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;simpleTabs&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#facebook&quot;</span><span class="nt">&gt;</span>Facebook<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#twitter&quot;</span><span class="nt">&gt;</span>Twitter<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>      ......
</span><span class='line'>      ......
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;facebook&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      content about Facebook here
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;twitter&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      content about Twitter here
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  ......
</span><span class='line'>  ......
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because this is not the final markup, I summarized and didn&#8217;t put the whole code. As you can see I created a parent div with unordered list and data containers in it. When running the tabs plugin on the code above I&#8217;ll get regular tabs as you can see:</p>

<iframe src="../code/style-your-jquery-ui-tabs/no-style-tabs.html" width="100%"></iframe>


<p>When the tabs plugin generates the tabs, it makes manipulation on the HTML elements. After generating it, the HTML looks like similar to this:</p>

<figure class='code'><figcaption><span>After applying tabs plugin</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;simpaleTabs&quot;</span> <span class="na">class=</span><span class="s">&quot;ui-tabs ui-widget ui-widget-content ui-corner-all&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;ui-state-default ui-corner-top ui-tabs-active ui-state-active&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#facebook&quot;</span> <span class="na">class=</span><span class="s">&quot;ui-tabs-anchor&quot;</span><span class="nt">&gt;</span>Facebook<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;ui-state-default ui-corner-top&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#twitter&quot;</span> <span class="na">class=</span><span class="s">&quot;ui-tabs-anchor&quot;</span><span class="nt">&gt;</span>Twitter<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        ......
</span><span class='line'>        ......
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;facebook&quot;</span> <span class="na">class=</span><span class="s">&quot;ui-tabs-panel ui-widget-content ui-corner-bottom&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        content about Facebook here
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;twitter&quot;</span> <span class="na">class=</span><span class="s">&quot;ui-tabs-panel ui-widget-content ui-corner-bottom&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        content about Twitter here
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The tabs plugin added a few classes to the elements. This is something important to know and we use this when we change styles. Now we want each tab to contain an icon and a text. Therefore we will add a div inside each anchor and it will hold the text and the icon as a background image. Notice that HTML5 allows wrapping of block-level elements like &lt;div&gt;s with basic &lt;a&gt; element. Now, each list item looks like:</p>

<figure class='code'><figcaption><span>List item new look</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;#facebook&quot;</span><span class="nt">&gt;&lt;div&gt;</span>Facebook<span class="nt">&lt;/div&gt;&lt;/a&gt;&lt;/li&gt;</span>;
</span></code></pre></td></tr></table></div></figure>


<h2>Css and Tabs Style</h2>

<p>Now we are going to change the styles of our tabs. Our web application might use the tabs plugin more than once, and probably different tabs in our application will have different styles designs. For this reason we want to separate the design of the current tabs by adding a class to the parent element:</p>

<figure class='code'><figcaption><span>Add class to the parent element</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tabsWithStyle&quot;</span> <span class="na">class=</span><span class="s">&quot;style-tabs&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way each tabs with the &#8220;style-tabs&#8221; class will share the same style and other tabs can have different styles.</p>

<p>As we saw before, the tabs plugin has changed the HTML and added some classes. Those classes and styles are defined in the jQuery-UI css file and in order to change the appearance of our tabs we need to change them. Changing the original jQuery-UI css file might distort the page since those classes are used in many ways and in many other jQuery-UI plugins. In addition, changing the original css file will prevent replacing the jQuery-UI theme because the changes might get lost. Therfore the changes will be made in our style.css file.</p>

<p>Remember the wrapper divs we added inside each anchor? Now is the time to give them background. Each div will get an &#8220;icon&#8221; class that defines width and font and maniplates the positions of the text and the icon image:</p>

<figure class='code'><figcaption><span>icon div style</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span> <span class="nc">.icon</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#787878</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-position</span><span class="o">:</span> <span class="k">center</span> <span class="m">3px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding-top</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">80px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In addition, each tab&#8217;s div has a different icon image and therefore a different icon image class.</p>

<h2>Complete CSS File</h2>

<figure class='code'><figcaption><span>Tabs Style</span> <a href='http://webdeveasy.com/code/style-your-jquery-ui-tabs/style.css' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="err">﻿</span><span class="nc">.facebook-icon</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="sx">url(images/facebook.png)</span> <span class="k">no-repeat</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.twitter-icon</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="sx">url(images/twitter.png)</span> <span class="k">no-repeat</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.linkedin-icon</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="sx">url(images/linkedin.png)</span> <span class="k">no-repeat</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.google-icon</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="sx">url(images/google.png)</span> <span class="k">no-repeat</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.wikipedia-icon</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="sx">url(images/wikipedia.png)</span> <span class="k">no-repeat</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nc">.picasa-icon</span> <span class="p">{</span> <span class="k">background</span><span class="o">:</span> <span class="sx">url(images/picasa.png)</span> <span class="k">no-repeat</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">32px</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">480px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span><span class="o">,</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span> <span class="nt">a</span><span class="o">,</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-panel</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">padding</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-widget-header</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="sx">url(images/TabMenu.png)</span> <span class="k">repeat</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">74px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-corner-all</span> <span class="p">{</span>
</span><span class='line'>    <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>    <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span>
</span><span class='line'>    <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
</span><span class='line'>    <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-widget-header</span> <span class="nc">.ui-state-default</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'>    <span class="k">border</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span><span class="nc">.ui-tabs-active</span><span class="o">,</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span><span class="nd">:hover</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">background</span><span class="o">:</span> <span class="sx">url(images/SelectedMiddle.png)</span> <span class="k">repeat</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span> <span class="nc">.icon</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#787878</span><span class="p">;</span>
</span><span class='line'>    <span class="k">background-position</span><span class="o">:</span> <span class="k">center</span> <span class="m">3px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">padding-top</span><span class="o">:</span> <span class="m">40px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span>
</span><span class='line'>    <span class="k">font-size</span><span class="o">:</span> <span class="m">12px</span><span class="p">;</span>
</span><span class='line'>    <span class="k">text-align</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>    <span class="k">width</span><span class="o">:</span> <span class="m">80px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span><span class="nc">.ui-tabs-active</span> <span class="nc">.icon</span><span class="o">,</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span><span class="nd">:hover</span> <span class="nc">.icon</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">color</span><span class="o">:</span> <span class="m">#414141</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span><span class="nc">.ui-tabs-active</span> <span class="nc">.icon</span><span class="nd">:before</span><span class="o">,</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span><span class="nd">:hover</span> <span class="nc">.icon</span><span class="nd">:before</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">content</span><span class="o">:</span> <span class="sx">url(images/SelectedSides.png)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">right</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span><span class="nc">.ui-tabs-active</span> <span class="nc">.icon</span><span class="nd">:after</span><span class="o">,</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span><span class="nd">:hover</span> <span class="nc">.icon</span><span class="nd">:after</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">content</span><span class="o">:</span> <span class="sx">url(images/SelectedSides.png)</span><span class="p">;</span>
</span><span class='line'>    <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span>
</span><span class='line'>    <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nc">.style-tabs</span> <span class="nc">.ui-tabs-nav</span> <span class="nt">li</span><span class="nc">.ui-tabs-active</span> <span class="nt">a</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">cursor</span><span class="o">:</span> <span class="k">pointer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that those classes are based on the generated markup and this is how I know which classes to change. Among the changes, those styles also:</p>

<ul>
<li>Set fixed width to the tabs container</li>
<li>Define tab hover style to look like selected tab</li>
<li>Use the &#8220;:before&#8221; and &#8220;:after&#8221; <a href="https://developer.mozilla.org/en-US/docs/CSS/Pseudo-elements" target="_blank">pseudo elements</a> in order to put an image before and after selected tab</li>
</ul>


<h2>Complete Markup</h2>

<figure class='code'><figcaption><span>Tabs Style</span> <a href='http://webdeveasy.com/code/style-your-jquery-ui-tabs/style-tabs.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="err">﻿</span><span class="o">&lt;!</span><span class="nt">doctype</span> <span class="nt">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nt">html</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">head</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">title</span><span class="o">&gt;</span><span class="nt">Custom</span> <span class="nt">jQuery</span> <span class="nt">Tabs</span><span class="o">&lt;/</span><span class="nt">title</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nt">script</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nt">src</span><span class="o">=</span><span class="s2">&quot;assets/js/jquery-1.9.0.min.js&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">script</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nt">script</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nt">src</span><span class="o">=</span><span class="s2">&quot;assets/js/jquery-ui-1.10.0.custom.min.js&quot;</span><span class="o">&gt;&lt;/</span><span class="nt">script</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nt">link</span> <span class="nt">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;assets/css/jquery-ui-1.10.0.custom.min.css&quot;</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="o">/&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">link</span> <span class="nt">rel</span><span class="o">=</span><span class="s2">&quot;stylesheet&quot;</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;style.css&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nt">head</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nt">body</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;tabsWithStyle&quot;</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;style-tabs&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">ul</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#facebook&quot;</span><span class="o">&gt;&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon facebook-icon&quot;</span><span class="o">&gt;</span><span class="nt">Facebook</span><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#twitter&quot;</span><span class="o">&gt;&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon twitter-icon&quot;</span><span class="o">&gt;</span><span class="nt">Twitter</span><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#linkedin&quot;</span><span class="o">&gt;&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon linkedin-icon&quot;</span><span class="o">&gt;</span><span class="nt">LinkedIn</span><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#google&quot;</span><span class="o">&gt;&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon google-icon&quot;</span><span class="o">&gt;</span><span class="nt">GooglePlus</span><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#wikipedia&quot;</span><span class="o">&gt;&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon wikipedia-icon&quot;</span><span class="o">&gt;</span><span class="nt">Wikipedia</span><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nt">li</span><span class="o">&gt;&lt;</span><span class="nt">a</span> <span class="nt">href</span><span class="o">=</span><span class="s2">&quot;#picasa&quot;</span><span class="o">&gt;&lt;</span><span class="nt">div</span> <span class="nt">class</span><span class="o">=</span><span class="s2">&quot;icon picasa-icon&quot;</span><span class="o">&gt;</span><span class="nt">Picasa</span><span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;&lt;/</span><span class="nt">a</span><span class="o">&gt;&lt;/</span><span class="nt">li</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="nt">ul</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;facebook&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="nt">content</span> <span class="nt">about</span> <span class="nt">Facebook</span> <span class="nt">here</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;twitter&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="nt">content</span> <span class="nt">about</span> <span class="nt">Twitter</span> <span class="nt">here</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;linkedin&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="nt">content</span> <span class="nt">about</span> <span class="nt">LinkedIn</span> <span class="nt">here</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;google&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="nt">content</span> <span class="nt">about</span> <span class="nt">Google</span> <span class="nt">Plus</span> <span class="nt">here</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;wikipedia&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="nt">content</span> <span class="nt">about</span> <span class="nt">Wikipedia</span> <span class="nt">here</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nt">div</span> <span class="nt">id</span><span class="o">=</span><span class="s2">&quot;picasa&quot;</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="nt">content</span> <span class="nt">about</span> <span class="nt">Picasa</span> <span class="nt">here</span>
</span><span class='line'>          <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="nt">div</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nt">script</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="err">$</span><span class="o">(</span><span class="nt">function</span><span class="o">()</span> <span class="p">{</span>
</span><span class='line'>              <span class="err">$</span><span class="p">(</span><span class="s1">&#39;#tabsWithStyle&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">tabs</span><span class="p">();</span>
</span><span class='line'>          <span class="p">}</span><span class="o">);</span>
</span><span class='line'>      <span class="o">&lt;/</span><span class="nt">script</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nt">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo &amp; Download</h2>

<ul>
<li>You can find a demo on the top of this article.</li>
<li><a href="../code/style-your-jquery-ui-tabs/style-your-jquery-ui-tabs.zip" target="_blank">You can download the code here</a>.</li>
</ul>


<p>That&#8217;s all! have fun and don&#8217;t hesitate to leave your comment!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cascading Autocompletes using jQuery UI]]></title>
    <link href="http://webdeveasy.com/cascading-autocompletes-using-jquery-ui/"/>
    <updated>2012-09-14T18:34:42+03:00</updated>
    <id>http://webdeveasy.com/cascading-autocompletes-using-jquery-ui</id>
    <content type="html"><![CDATA[<p>Yesterday I got a new requirement for the application I am working on.
I had several <a href="http://jqueryui.com/demos/autocomplete" target="_blank">jQuery UI autocompletes</a> and I needed to add cascading functionality. This means that each autocomplete in the group affects the following autocomple&#8217;s possible values. If there is no value selected in the first autocomplete - the next autocomplete must be disabled. When the user selects a value on the first autocomplete - the next autocomplete becomes enabled.</p>

<!-- more -->


<p>After searching the web I realized that the best option for me is to write my own jQuery plugin that manages the autocompletes cascading.
The plugin gets as input a sequence of jQuery UI auocomplete elements and adds the cascading functionality. The idea under my plugin is to override each autocomplete&#8217;s change and select events, and enable or disable the next autocomplete in the sequence according to the selected value.</p>

<p>Here is the code:</p>

<figure class='code'><figcaption><span>Cascading Autocompletes plugin</span> <a href='http://webdeveasy.com/code/cascading-autocompletes-plugin/jquery.cascading-autocompletes.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">activateChild</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">child</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;enable&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">deactivateChild</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">child</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;disable&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">subChild</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;cascade-child&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">subChild</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">deactivateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">subChild</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">eventOverride</span><span class="p">(</span><span class="nx">originalEvent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">isChildActivate</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">ui</span><span class="p">.</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="nx">isChildActivate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">deactivateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">ui</span><span class="p">.</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isChildActivate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">activateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">originalEvent</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">originalEvent</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">cascade</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">child</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">originalChange</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;change&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">originalSelect</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;select&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">parent</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;cascade-child&quot;</span><span class="p">,</span> <span class="nx">child</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="nx">eventOverride</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">originalChange</span><span class="p">));</span>
</span><span class='line'>            <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;select&quot;</span><span class="p">,</span> <span class="nx">eventOverride</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">originalSelect</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">deactivateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">cascadingAutocompletes</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">autocompletes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">autocompletes</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">autocompletes</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="nx">autocompletes</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">cascade</span><span class="p">(</span><span class="nx">autocompletes</span><span class="p">[</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usage example:</p>

<figure class='code'><figcaption><span>Cascading Autocompletes plugin Usage</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">cascadingAutocompletes</span><span class="p">([</span><span class="s2">&quot;#country&quot;</span><span class="p">,</span> <span class="s2">&quot;#city&quot;</span><span class="p">,</span> <span class="s2">&quot;#street&quot;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo &amp; Download</h2>

<ul>
<li><a href="http://webdeveasy.com/code/cascading-autocompletes-plugin/index.html" target="_blank">Demo Here</a>.</li>
<li><a href="http://webdeveasy.com/code/cascading-autocompletes-plugin/cascading-autocompletes-plugin.zip" target="_blank">Download code here</a>.</li>
</ul>


<p>Hope this helps!</p>
]]></content>
  </entry>
  
</feed>
