<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Web Development is Easy!]]></title>
  <link href="http://webdeveasy.com/categories/javascript/atom.xml" rel="self"/>
  <link href="http://webdeveasy.com/"/>
  <updated>2014-06-22T02:30:40+03:00</updated>
  <id>http://webdeveasy.com/</id>
  <author>
    <name><![CDATA[NaorYe]]></name>
    <email><![CDATA[mailto:naorye@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Back Button Behavior on a Page With an iframe]]></title>
    <link href="http://webdeveasy.com/back-button-behavior-on-a-page-with-an-iframe/"/>
    <updated>2014-05-29T01:45:45+03:00</updated>
    <id>http://webdeveasy.com/back-button-behavior-on-a-page-with-an-iframe</id>
    <content type="html"><![CDATA[<p>I am developing a widget for websites. This widget lays inside an iframe in a website's page. One of my users (which is a site owner) complained about a weird behavior of my widget. On pages where the widget was implemented, the browser's back button didn't work properly. Instead of navigating the user to the previous page on the website, the back button navigated the user to the previous page inside the iframe.</p>

<!-- more -->


<p>Let me show you an example. This <a target="_blank" href="http://webdeveasy.com/code/back-button-behavior-on-a-page-with-an-iframe/problem/page1.html">demo page</a> includes two pages. The first page contains nothing but a link to the second page. When clicking on the link, we are redirected to the second page that contains an iframe. At this point, looking on the browser's history will show us only the first page as expected:</p>

<p><img src="http://webdeveasy.com/code/back-button-behavior-on-a-page-with-an-iframe/problem/images/page2.png" /></p>

<p>In order to demonstrate navigation inside an iframe, the iframe in the second page contains a page with an anchor. This anchor refers to a different page. A click on the anchor causes navigation inside the iframe, but also adds a new history entry of the second page:</p>

<p><img src="http://webdeveasy.com/code/back-button-behavior-on-a-page-with-an-iframe/problem/images/iframe2.png" /></p>

<p>Pressing back will not return us back to the first page. Instead, it will change the iframe's page and this is not the desired behavior. <br/>
What we really want is the iframe's navigation not to interfere the browser's navigation. Pressing the back button should take us back to the first page and not to the previous iframe's page.</p>

<p><strong><em>It appears that any location change in the iframe is stored in the browser's history.</em></strong></p>

<p>Once the problem is understood, the solution is pretty simple. Whenever the user navigates inside the iframe, we don't want to add a new entry to the history. In order to do that, I'd like to explain a bit about anchors.</p>

<h2>How anchors work?</h2>

<p>When an anchor is clicked, it navigates to the new page and the new location is added to the browser's hitory. But, if the url is the same as the current url, no history entry is added and the anchor only performs a page refresh. It is easy to verify what I am saying here by creating a page that contains a link to itself. Clicking on this anchor only refreshes the page and no history entry is added.</p>

<h2>history.replaceState() To The Rescue</h2>

<p>Luckily HTML5 gave us <a href="https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history" target="_blank">a great API for controlling the history</a>. <code>window.history</code> exposes useful methods that let us manipulate the contents of the history stack. Among these methods we can find the <code>replaceState()</code> method. <code>history.replaceState()</code> can modify the current history entry and associate it with the current document. <br/>
Assuming we have the following anchor inside an iframe's page: <code>&lt;a href="iframe2.html"&gt;iframe page 2&lt;/a&gt;</code>. Clicking on it redirects us to <code>page2.html</code> and adds a new history entry for that page. If the current location, prior to the anchor's action, is the same as the anchor's url, then no new history entry will be added. <br/>
Let's manipulate the history and set the current location to the anchor's url before the anchor performs it's action:
```javascript Prevent anchors to add history entry</p>

<pre><code>var anchors = document.getElementsByTagName('a');
for (var i = 0; i &lt; anchors.length; i++) {
    var anchor = anchors[i];
    anchor.addEventListener('click', function(event) {
        history.replaceState(null, null, anchor.href);
    }, false);
}
</code></pre>

<p>```
This script runs through all the page's anchors and attaches a click event. Whenever the user clicks on an anchor, the current location is replaced with the anchor's href. And here we prevented from another history entry to be added. <br/>
Keep in mind that this script has to run at the end of the page, after the DOM has loaded. <br/>
Here You can see the <a target="_blank" href="http://webdeveasy.com/code/back-button-behavior-on-a-page-with-an-iframe/solution/page1.html">solution</a>. Navigating inside the iframe doesn't create history entry:</p>

<p><img src="http://webdeveasy.com/code/back-button-behavior-on-a-page-with-an-iframe/solution/images/iframe2.png" /></p>

<p>I spent a lot of time trying to understand the behavior of anchors and history and finding a solution for the back button issue. I hope you'll find this explanation interesting and useful. <br/>
Thanks for reading,
NaorYe</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interceptors in AngularJS and Useful Examples]]></title>
    <link href="http://webdeveasy.com/interceptors-in-angularjs-and-useful-examples/"/>
    <updated>2014-03-08T22:44:14+02:00</updated>
    <id>http://webdeveasy.com/interceptors-in-angularjs-and-useful-examples</id>
    <content type="html"><![CDATA[<p>The <code>$http</code> service of AngularJS allows us to communicate with a backend and make HTTP requests. There are cases where we want to capture every request and manipulate it before sending it to the server. Other times we would like to capture the response and process it before completing the call. Global http error handling can be also a good example of such need. Interceptors are created exactly for such cases. This article will introduce AngularJS interceptors and will provide some useful examples.</p>

<!-- more -->


<h2>What are Interceptors?</h2>

<p>The <code>$httpProvider</code> provider contains an array of interceptors. An interceptor is simply a regular service factory that is registered to that array. This is how we create an interceptor:
```javascript Interceptor declaration
module.factory('myInterceptor', ['$log', function($log) {</p>

<pre><code>$log.debug('$log is here to show you that this is a regular factory with injection');

var myInterceptor = {
    ....
    ....
    ....
};

return myInterceptor;
</code></pre>

<p>}]);
<code>
And then add it by it's name to `$httpProvider.interceptors` array:
</code> javascript add the interceptor to $httpProvider.interceptors
module.config(['$httpProvider', function($httpProvider) {</p>

<pre><code>$httpProvider.interceptors.push('myInterceptor');
</code></pre>

<p>}]);
```
Interceptors allow you to:</p>

<ul>
<li><p><strong>Intercept a request by implementing the <code>request</code> function:</strong> This method is called before <code>$http</code> sends the request to the backend, so you can modify the configurations and make other actions. This function receives the request configuration object as a parameter and has to return a configuration object or a promise. Returning an invalid configuration object or promise that will be rejected, will make the <code>$http</code> call to fail.</p></li>
<li><p><strong>Intercept a response by implementing the <code>response</code> function:</strong> This method is called right after <code>$http</code> receives the response from the backend, so you can modify the response and make other actions. This function receives a response object as a parameter and has to return a response object or a promise. The response object includes the request configuration, headers, status and data that returned from the backend. Returning an invalid response object or promise that will be rejected, will make the <code>$http</code> call to fail.</p></li>
<li><p><strong>Intercept request error by implementing the <code>requestError</code> function:</strong> Sometimes a request can't be sent or it is rejected by an interceptor. Request error interceptor captures requests that have been canceled by a previous request interceptor. It can be used in order to recover the request and sometimes undo things that have been set up before a request, like removing overlays and loading indicators, enabling buttons and fields and so on.</p></li>
<li><p><strong>Intercept response error by implementing the <code>responseError</code> function:</strong> Sometimes our backend call fails. Other times it might be rejected by a request interceptor or by a previous response interceptor. In those cases, response error interceptor can help us to recover the backend call.</p></li>
</ul>


<h2>Asynchronous Operations</h2>

<p>Sometimes there is a need to make some asynchronous operations inside the interceptor. Luckily AngularJS allows us to return a promise that will be resolved later. This will defer the request sending in case of request interceptor and will defer the response resolving in case of response interceptor.
```javascript Make asynchronous operations in request interceptor
module.factory('myInterceptor', ['$q', 'someAsyncService', function($q, someAsyncService) {</p>

<pre><code>var requestInterceptor = {
    request: function(config) {
        var deferred = $q.defer();
        someAsyncService.doAsyncOperation().then(function() {
            // Asynchronous operation succeeded, modify config accordingly
            ...
            deferred.resolve(config);
        }, function() {
            // Asynchronous operation failed, modify config accordingly
            ...
            deferred.resolve(config);
        });
        return deferred.promise;
    }
};

return requestInterceptor;
</code></pre>

<p>}]);
<code>
In this example, the request interceptor makes an asynchronous operation and updates the config according to the results. Then it continues with the modified config. If `deferred` is rejected, the http request will fail.   
The same applies for response interceptor:
</code>javascript Make asynchronous operations in response interceptor
module.factory('myInterceptor', ['$q', 'someAsyncService', function($q, someAsyncService) {</p>

<pre><code>var responseInterceptor = {
    response: function(response) {
        var deferred = $q.defer();
        someAsyncService.doAsyncOperation().then(function() {
            // Asynchronous operation succeeded, modify response accordingly
            ...
            deferred.resolve(response);
        }, function() {
            // Asynchronous operation failed, modify response accordingly
            ...
            deferred.resolve(response);
        });
        return deferred.promise;
    }
};

return responseInterceptor;
</code></pre>

<p>}]);
<code>``
Only when</code>deferred<code>is resolved, the request will succeed. If</code>deferred` is rejected, the request will fail.</p>

<h2>Examples</h2>

<p>In this section I'll provide some examples to AngularJS Interceptors in order to give a good understanding of how to use them and how they can help you. Keep in mind that the solutions I provide here are not necessarily the best or the most accurate solutions.</p>

<h3>Session Injector (request interceptor)</h3>

<p>There are two ways of implementing server side authentication. The first one is to use the traditional Cookie-Based Authentication that uses server side cookies to authenticate the user on each request. The other approach is Token-Based Authentication. When the user logs in, he gets <code>sessionToken</code> from the backend. This <code>sessionToken</code> identifies the user in the server and is sent to the server on each request. <br/>
The following <code>sessionInjector</code> adds <code>x-session-token</code> header to each intercepted request (in case the current user is logged in):
```javascript Session Injector
module.factory('sessionInjector', ['SessionService', function(SessionService) {</p>

<pre><code>var sessionInjector = {
    request: function(config) {
        if (!SessionService.isAnonymus) {
            config.headers['x-session-token'] = SessionService.token;
        }
        return config;
    }
};
return sessionInjector;
</code></pre>

<p>}]);
module.config(['$httpProvider', function($httpProvider) {</p>

<pre><code>$httpProvider.interceptors.push('sessionInjector');
</code></pre>

<p>}]);
<code>
And now creating a get request:
</code>javascript
$http.get('https://api.github.com/users/naorye/repos');
<code>
The configuration object before intercepted by `sessionInjector`:
</code>javascript
{</p>

<pre><code>"transformRequest": [
    null
],
"transformResponse": [
    null
],
"method": "GET",
"url": "https://api.github.com/users/naorye/repos",
"headers": {
    "Accept": "application/json, text/plain, */*"
}
</code></pre>

<p>}
<code>
The configuration object after intercepted by `sessionInjector`:
</code>javascript
{</p>

<pre><code>"transformRequest": [
    null
],
"transformResponse": [
    null
],
"method": "GET",
"url": "https://api.github.com/users/naorye/repos",
"headers": {
    "Accept": "application/json, text/plain, */*",
    "x-session-token": 415954427904
}
</code></pre>

<p>}
```</p>

<h3>Timestamp Marker (request and response interceptors)</h3>

<p>Let's measure the time it takes to get a backend response using interceptors. It is done by adding a timestamp for each request and response:
```javascript Timestamp Marker
module.factory('timestampMarker', [function() {</p>

<pre><code>var timestampMarker = {
    request: function(config) {
        config.requestTimestamp = new Date().getTime();
        return config;
    },
    response: function(response) {
        response.config.responseTimestamp = new Date().getTime();
        return response;
    }
};
return timestampMarker;
</code></pre>

<p>}]);
module.config(['$httpProvider', function($httpProvider) {</p>

<pre><code>$httpProvider.interceptors.push('timestampMarker');
</code></pre>

<p>}]);
<code>
And now we can do:
</code>javascript
$http.get('https://api.github.com/users/naorye/repos').then(function(response) {</p>

<pre><code>var time = response.config.responseTimestamp - response.config.requestTimestamp;
console.log('The request took ' + (time / 1000) + ' seconds.');
</code></pre>

<p>});
```
Here you can find an <a href="http://webdeveasy.com/code/interceptors-in-angularjs-and-useful-examples/timestamp-marker.html" target="_blank">example for the Timestamp Marker</a>.</p>

<h3>Request Recover (request error interceptor)</h3>

<p>In order to demonstrate a request error interceptor we have to simulate a situation where a previous interceptor rejects the request. Our request error interceptor will get the rejection reason and will recover the request. <br/>
Let's create two interceptors: <code>requestRejector</code> and <code>requestRecoverer</code>. <br/>
```javascript Request Recoverer
module.factory('requestRejector', ['$q', function($q) {</p>

<pre><code>var requestRejector = {
    request: function(config) {
        return $q.reject('requestRejector');
    }
};
return requestRejector;
</code></pre>

<p>}]);
module.factory('requestRecoverer', ['$q', function($q) {</p>

<pre><code>var requestRecoverer = {
    requestError: function(rejectReason) {
        if (rejectReason === 'requestRejector') {
            // Recover the request
            return {
                transformRequest: [],
                transformResponse: [],
                method: 'GET',
                url: 'https://api.github.com/users/naorye/repos',
                headers: {
                    Accept: 'application/json, text/plain, */*'
                }
            };
        } else {
            return $q.reject(rejectReason);
        }
    }
};
return requestRecoverer;
</code></pre>

<p>}]);
module.config(['$httpProvider', function($httpProvider) {</p>

<pre><code>$httpProvider.interceptors.push('requestRejector');
// Removing 'requestRecoverer' will result to failed request
$httpProvider.interceptors.push('requestRecoverer'); 
</code></pre>

<p>}]);
<code>
And now, if we do the following, we will get the log `success` even though `requestRejector` rejected the request:
</code>javascript
$http.get('https://api.github.com/users/naorye/repos').then(function() {</p>

<pre><code>console.log('success');
</code></pre>

<p>}, function(rejectReason) {</p>

<pre><code>console.log('failure');
</code></pre>

<p>});
```
Here you can find an <a href="http://webdeveasy.com/code/interceptors-in-angularjs-and-useful-examples/request-recover.html" target="_blank">example for the Request Recover</a>.</p>

<h3>Session Recoverer (response error interceptor)</h3>

<p>There are times, in our single page application, where the session gets lost. Such situation might happen due to session expiration or a server error. Let's create an interceptor that will recover the session and resend the original request again automatically (for situations where the session expired). <br/>
For the example purposes, let's assume that the http status code for session expiration is 419.
```javascript Session Recoverer
module.factory('sessionRecoverer', ['$q', '$injector', function($q, $injector) {</p>

<pre><code>var sessionRecoverer = {
    responseError: function(response) {
        // Session has expired
        if (response.status == 419){
            var SessionService = $injector.get('SessionService');
            var $http = $injector.get('$http');
            var deferred = $q.defer();

            // Create a new session (recover the session)
            // We use login method that logs the user in using the current credentials and
            // returns a promise
            SessionService.login().then(deferred.resolve, deferred.reject);

            // When the session recovered, make the same backend call again and chain the request
            return deferred.promise.then(function() {
                return $http(response.config);
            });
        }
        return $q.reject(response);
    }
};
return sessionRecoverer;
</code></pre>

<p>}]);
module.config(['$httpProvider', function($httpProvider) {</p>

<pre><code>$httpProvider.interceptors.push('sessionRecoverer');
</code></pre>

<p>}]);
<code>``
This way, whenever a backend call fails due to session expiration,</code>sessionRecoverer` creates a new session and performs the backend call again.</p>

<h2>Summary</h2>

<p>In this article I explained about AngularJS interceptors. I presented <code>request</code>, <code>response</code>, <code>requestError</code> and <code>responseError</code> interceptors and described how and when to use them. I also provided real world useful examples that can help you in your development.</p>

<p>I hope you enjoyed reading this article as much as I enjoyed writing it! <br/>
Good Luck! <br/>
NaorYe</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Service Providers in AngularJS and Logger Implementation]]></title>
    <link href="http://webdeveasy.com/service-providers-in-angularjs-and-logger-implementation/"/>
    <updated>2014-02-08T16:49:33+02:00</updated>
    <id>http://webdeveasy.com/service-providers-in-angularjs-and-logger-implementation</id>
    <content type="html"><![CDATA[<p>In this article I'll explain what a provider is and what is the difference between a provider and other services declaration in AngularJS. Through this article I'll also create a tidy Logger for your AngularJS application.</p>

<!-- more -->


<h2>What is wrong with $log?</h2>

<p>Nothing! Really, $log is doing it's work. It is a simple service for logging, including a default implementation that writes messages into the browser's console. And that's it. But when talking about logging, I'd like a service that will print my messages nicely, something like a timestamp and maybe a hint about where the message was created. I would also like to turn off all the messages during application configuration when running on production, and maybe expose a way to turn it on. I know $logProvider has the <code>debugEnabled(flag)</code> method, but I would like to turn off all the other kinds of messages (like <code>info()</code> and <code>error()</code>) and not only debug. Later on I may want to add colors to my messages and maybe aggregate all the <code>error()</code> messages and send them somehow to me. This is why I was looking to create a new logging mechanism. <br/>
While thinking about a way of implementation, I considered using a <a href="http://docs.angularjs.org/api/AUTO.$provide#decorator" target="_blank">service decorator</a> but then realized that I might want more than modifying the behavior of $log, like add or remove methods, or change the way $log's methods work. Eventually I decided to use a <a href="http://docs.angularjs.org/api/AUTO.$provide#methods_provider" target="_blank">service provider</a>.</p>

<h2>A little about AngularJS services</h2>

<p>This section might be a little confusing, but it is really important to understand. When we call <code>module.provider()</code>, we are actually calling the <code>provider()</code> method of the <code>$provide</code> service. <code>$provide.provider()</code> is exposed on <code>angular.Module</code>. The same is for <code>module.service()</code> and <code>module.factory()</code>, they are methods of <code>$provide</code> service that are exposed on <code>angular.Module</code>. Therefore the following blocks are the same thing:
<code>javascript Calling directly to module.provider(), module.service() and module.factory()
module.provider('providerName', function() { ... });
module.service('serviceName', function() { ... });
module.factory('factoryName', function() { ... });
</code>
```
module.config(['$provide', function($provide) {</p>

<pre><code>$provide.provider('providerName', function() { ... });
</code></pre>

<p>});
module.config(['$provide', function($provide) {</p>

<pre><code>$provide.service('serviceName', function() { ... });
</code></pre>

<p>});
module.config(['$provide', function($provide) {</p>

<pre><code>$provide.factory('factoryName', function() { ... });
</code></pre>

<p>});
<code>
More than that, `$provide.service()` and `$provide.factory()` are actually an easy way to use `$provide.provider()`:
</code> javascript $provide.service() and $provide.factory() are actually $provide.provider()
$provide.service('serviceName', function() {</p>

<pre><code>this.name = 'The Catcher in the Rye';
this.author = 'J. D. Salinger';
</code></pre>

<p>});
// Equals to
$provide.provider('serviceName', function() {</p>

<pre><code>this.$get = function($injector) {
    return $injector.instantiate(function() {
        this.name = 'The Catcher in the Rye';
        this.author = 'J. D. Salinger';
    });
};
</code></pre>

<p>});</p>

<p>$provide.factory('factoryName', function() {</p>

<pre><code>return { name: 'The Catcher in the Rye', author: 'J. D. Salinger' };
</code></pre>

<p>});
// Equals to
$provide.provider('serviceName', function() {</p>

<pre><code>this.$get = function($injector) {
    return $injector.invoke(function() {
        return { name: 'The Catcher in the Rye', author: 'J. D. Salinger' };
    });
};
</code></pre>

<p>});
<code>``
As we all can see, AngularJS only knows service provider (</code>$provide.provider()`) and all other ways of creating services are derived.</p>

<h2>What service provider gives?</h2>

<p>Besides of creating the service, service provider allows to configure the service on <code>module.config()</code> block. Look on the following <code>appColor</code> example service that is defined by a service provider:
<code>`` javascript Sample</code>appColor` service provider
$provide.provider('appColor', function() {</p>

<pre><code>var color = 'Green';
this.setColor = function(newColor) {
    color = newColor;
};
this.$get = function() {
    return color;
};
</code></pre>

<p>});
<code>
Whenever we ask from Angular to inject `appColor`, we get the `color` variable that returned from the `$get` method. But on `module.config()` blocks we can ask for `appColorProvider` which exposes the provider and all it's methods and attributes. This let us configure the service before other code consumes it:
</code> javascript <code>appColor</code> configuration and usage
module.config(['appColorProvider', function(appColorProvider) {</p>

<pre><code>appColorProvider.setColor('Blue');
</code></pre>

<p>});
...
...
module.run(['appColor', function(appColor) {</p>

<pre><code>// Will log: 'Application color is Blue'
console.log('Application color is ' + appColor);
</code></pre>

<p>});
```
As you can see, service provider gave us access to the "provider" part, where we can set methods or variables and which can be accessed during configuration only. And this is what I was looking for when thinking about creating my Logger.</p>

<h2>Creating the Logger!</h2>

<p>I want to create a Logger service that will print my messages in the following formats (according to the supplied arguments):  <br/>
<code>&lt;timestamp&gt; - &lt;context&gt;::&lt;method name&gt;('&lt;message&gt;')</code>
<code>&lt;timestamp&gt; - &lt;context&gt;: &lt;message&gt;</code></p>

<p>Before integrating with Angular, let's create a Logger class that uses $log. First we will create a Logger constructor and a static helper method that will create new instances of Logger.
``` javascript Logger construction
var Logger = function(context) {</p>

<pre><code>this.context = context;
</code></pre>

<p>};
Logger.getInstance = function(context) {</p>

<pre><code>return new Logger(context);
</code></pre>

<p>};
<code>
The constructor gets a context as a parameter.   
I want it to be easy to interpolate variables into the message string. Therefore, let's take Douglas Crockford's &lt;a href="http://javascript.crockford.com/remedial.html" target="_blank"&gt;supplant implementation&lt;/a&gt; and put it as a helper in Logger:
</code> javascript supplant support
Logger.supplant = function(str, o) {</p>

<pre><code>return str.replace(
        /\{([^{}]*)\}/g,
        function (a, b) {
            var r = o[b];
            return typeof r === 'string' || typeof r === 'number' ? r : a;
        }
    );
</code></pre>

<p>};
<code>
Now it is easy to add a method that returns a formatted timestamp:
</code> javascript formatted timestamp on message
Logger.getFormattedTimestamp = function(date) {
   return Logger.supplant('{0}:{1}:{2}:{3}', [</p>

<pre><code>    date.getHours(),
    date.getMinutes(),
    date.getSeconds(),
    date.getMilliseconds()
]); 
</code></pre>

<p>};
<code>
Notice that the last two methods are generic methods and you can take them out and put in your `utils` service for example.   
Now we want to write a generic `_log()` method that gets the original method of `$log` (log, info, warn, debug or error) and uses it to print a message according to the given arguments. First I'll show my implementation and then explain:
</code>javascript generic <code>_log()</code> method
Logger.prototype = {</p>

<pre><code>// Supports the following arguments: fnName (optional), message (mandatory), supplantData (optional)
// Length and types of arguments are checked in order to determine the usage
_log: function(originalFn, args) {
    var now  = Logger.getFormattedTimestamp(new Date());
    var message = '', supplantData = [];
    switch (args.length) {
        case 1:
            message = Logger.supplant("{0} - {1}: {2}", [ now, this.context, args[0] ]);
            break;
        case 3:
            supplantData = args[2];
            message = Logger.supplant("{0} - {1}::{2}(\'{3}\')", [ now, this.context, args[0], args[1] ]);
            break;
        case 2:
            if (typeof args[1] === 'string') {
                message = Logger.supplant("{0} - {1}::{2}(\'{3}\')", [ now, this.context, args[0], args[1] ]);
            } else {
                supplantData = args[1];
                message = Logger.supplant("{0} - {1}: {2}", [ now, this.context, args[0] ]);
            }
            break;
    }

    $log[originalFn].call(null, Logger.supplant(message, supplantData));
},
...
</code></pre>

<p>};
<code>``
</code>_log()` method first gets the formatted current date. Then it checks for the arguments length and types and determines which output the user wants to print:</p>

<ol>
<li>If the user supplied one argument, then the argument must be the message itself and <code>_log()</code> will print: <code>&lt;timestamp&gt; - &lt;context&gt;: &lt;message&gt;</code></li>
<li>If the user supplied three arguments, then the first argument is a method name, the second is the message and the third is an object of variables to interpolate with the message. For this, <code>_log()</code> will print: <code>&lt;timestamp&gt; - &lt;context&gt;::&lt;method name&gt;('&lt;message&gt;')</code></li>
<li>If the user provided two arguments, we need to find out whether he supplied a method name or an interpolation object. In order to figure that out, we'll check the type of the last argument. If it is a string, then it has to be the message itself while the first argument is the method name. Otherwise consider the first argument as the message and the second as array of interpolation variables. The output print will be according to this check.</li>
</ol>


<p>At the end, <code>_log()</code> calls the required method on $log with the interpolated message. <br/>
Now the last thing to do is to implement an overrides to <code>log()</code>, <code>info()</code>, <code>warn()</code>, <code>debug()</code> and <code>error()</code>:
```javascript implement $log overrides
Logger.prototype = {</p>

<pre><code>...
log: function() {
    this._log('log', arguments);
},
info: function() {
    this._log('info', arguments);
},
warn: function() {
    this._log('warn', arguments);
},
debug: function() {
    this._log('debug', arguments);
},
error: function() {
    this._log('error', arguments);
}
</code></pre>

<p>};
<code>
Finally we have a Logger! This is how we can use it:
</code> javascript Logger usage example
var logger = Logger.getInstance('Example'); // Name of this file / class / module
logger.log('This is a log'); // Logs: "19:24:1:263 - Example: This is a log"
logger.warn('warn', 'This is a warn'); // Warns: "19:24:1:263 - Example::warn('This is a warn')"
logger.error('This is a {0} error! {1}', [ 'big', 'just kidding' ]); // Shouts: "19:24:1:263 - Example: This is a big error! just kidding"
logger.debug('debug', 'This is a debug for line {0}', [ 8 ]); // Logs: "19:24:1:263 - Example::debug('This is a debug for line 8')"
```
Now we can finally integrate our new Logger with AngularJS service provider!</p>

<h2>Back To AngularJS Service Provider</h2>

<p>I wanted to create Logger provider with the ability of disable all the logs. For that I've created a provider that wraps our Logger implementation and adds a method to LoggerProvider for enable or disable Logger:
``` javascript Logger service provider
module.provider('Logger', [function () {</p>

<pre><code>var isEnabled = true;
this.enabled = function(_isEnabled) {
    isEnabled = !!_isEnabled;
};

// $log injected as a dependency
this.$get = ['$log', function($log) {
    var Logger = ...
    ... // Logger implementation

    return Logger;
}];
</code></pre>

<p>}]);
<code>
The last thing left to do is to change the `_log()` to do nothing if `isEnabled` equals to false:
</code> javascript enable / disable <code>_log()</code>
Logger.prototype = {</p>

<pre><code>_log: function(originalFn, args) {
    if (!isEnabled) {
        return;
    }
    ....
</code></pre>

<p><code>
As you can see, Logger is enabled by default. In order to turn it off we just need to do:
</code>javascript Turn off logger
module.config(['Logger', function(Logger) {</p>

<pre><code>Logger.enabled(false);
</code></pre>

<p>});
```
Thats all!</p>

<h2>Summary</h2>

<p>On this article I discussed the difference between AngularJS factory, service and provider. I showed the similarity and explained that service provider is a base method that all other ways of creating services are derived from. I also explained the options of service provider over other services and the most important thing, created a Logger provider with you!</p>

<p>Here you can find <a href="https://github.com/naorye/angular-ny-logger" target="_blank">Logger GitHub Repository</a> with the source code and a demo.</p>

<p>NaorYe</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS Data Model]]></title>
    <link href="http://webdeveasy.com/angularjs-data-model/"/>
    <updated>2013-11-23T20:51:33+02:00</updated>
    <id>http://webdeveasy.com/angularjs-data-model</id>
    <content type="html"><![CDATA[<p>As we already know, AngularJS doesn't come with an out of the box solution for data modeling. In the most abstract way, AngularJS lets us use JSON data as a model in the controller. As the time passed and my application grew, I realized that this modeling method isn't powerful enough to fit my application's needs. In this article I will present the way I dealt with data modeling in my AngularJS application.</p>

<!-- more -->


<h2>Defining a model for controller</h2>

<p>Let's start with a simple example. I would like to display a book view. This is the controller:
```javascript BookController
app.controller('BookController', ['$scope', function($scope) {</p>

<pre><code>$scope.book = {
    id: 1,
    name: 'Harry Potter',
    author: 'J. K. Rowling',
    stores: [
        { id: 1, name: 'Barnes &amp; Noble', quantity: 3},
        { id: 2, name: 'Waterstones', quantity: 2},
        { id: 3, name: 'Book Depository', quantity: 5}
    ]
};
</code></pre>

<p>}]);
<code>
This controller creates a model of book which can be later used in our template:
</code>html template for displaying a book</p>

<div ng-controller="BookController">
    Id: <span ng-bind="book.id"></span>
    <br/>
    Name:<input type="text" ng-model="book.name" />
    <br/>
    Author: <input type="text" ng-model="book.author" />
</div>


<p><code>
In case we would like to get the book data from a backend api, we can also use $http:
</code>javascript BookController with $http
app.controller('BookController', ['$scope', '$http', function($scope, $http) {</p>

<pre><code>var bookId = 1;

$http.get('ourserver/books/' + bookId).success(function(bookData) {
    $scope.book = bookData;
});
</code></pre>

<p>}]);
<code>
Notice that bookData is still a JSON object.
Later on we would like to do something with this data. For example, update the book, delete it or even do other operations that are not dealing with the backend, like generate a book image url according to requested size or determining whether the book is available. Those methods can be declared on our controller:
</code>javascript BookController with several book actions
app.controller('BookController', ['$scope', '$http', function($scope, $http) {</p>

<pre><code>var bookId = 1;

$http.get('ourserver/books/' + bookId).success(function(bookData) {
    $scope.book = bookData;
});

$scope.deleteBook = function() {
    $http.delete('ourserver/books/' + bookId);
};

$scope.updateBook = function() {
    $http.put('ourserver/books/' + bookId, $scope.book);
};

$scope.getBookImageUrl = function(width, height) {
    return 'our/image/service/' + bookId + '/width/height';
};

$scope.isAvailable = function() {
    if (!$scope.book.stores || $scope.book.stores.length === 0) {
        return false;
    }
    return $scope.book.stores.some(function(store) {
        return store.quantity &gt; 0;
    });
};
</code></pre>

<p>}]);
<code>
And later in our template:
</code>html template for displaying a complete book</p>

<div ng-controller="BookController">
    <div ng-style="{ backgroundImage: 'url(' + getBookImageUrl(100, 100) + ')' }"></div>
    Id: <span ng-bind="book.id"></span>
    <br/>
    Name:<input type="text" ng-model="book.name" />
    <br/>
    Author: <input type="text" ng-model="book.author" />
    <br/>
    Is Available: <span ng-bind="isAvailable() ? 'Yes' : 'No' "></span>
    <br/>
    <button ng-click="deleteBook()">Delete</button>
    <br/>
    <button ng-click="updateBook()">Update</button>
</div>


<p>```</p>

<h2>Sharing a model between controllers</h2>

<p>As long as the book's structure and methods are relevant only to one controller, all is fine and our work here is done. But as the application grows, there might be other controllers that will deal with books. Those controllers will sometimes need to fetch a book, update it, delete it or get it's image url or availability. Therefore we have to share the behaviors of a book between controllers. In order to do this we will use a factory that returns the book's behavior. Before writing this factory, I would like to mention here that we could make the factory return an object that contains helper methods for book (i.e. functions that get a book JSON and do what asked), but I prefer to use <a>prototype</a> for constructing a Book class, which I believe is the right choice:
```javascript Book model service
app.factory('Book', ['$http', function($http) {</p>

<pre><code>function Book(bookData) {
    if (bookData) {
        this.setData(bookData):
    }
    // Some other initializations related to book
};
Book.prototype = {
    setData: function(bookData) {
        angular.extend(this, bookData);
    },
    load: function(id) {
        var scope = this;
        $http.get('ourserver/books/' + bookId).success(function(bookData) {
            scope.setData(bookData);
        });
    },
    delete: function() {
        $http.delete('ourserver/books/' + bookId);
    },
    update: function() {
        $http.put('ourserver/books/' + bookId, this);
    },
    getImageUrl: function(width, height) {
        return 'our/image/service/' + this.book.id + '/' + width + '/' + height;
    },
    isAvailable: function() {
        if (!this.book.stores || this.book.stores.length === 0) {
            return false;
        }
        return this.book.stores.some(function(store) {
            return store.quantity &gt; 0;
        });
    }
};
return Book;
</code></pre>

<p>}]);
<code>
This way all book's behavior is encapsulated in Book service. Now, let's use our shiny Book service in our BookController:
</code>javascript BookController that uses Book model
app.controller('BookController', ['$scope', 'Book', function($scope, Book) {</p>

<pre><code>$scope.book = new Book();
$scope.book.load(1);
</code></pre>

<p>}]);
<code>
As you can see, the controller became very thin. It now creates a Book instance, assigns it to the scope and loads it from the backend. When the book will be loaded, it's properties will be changed and so the template. Keep in mind that other controllers that interact with a book, simply inject the Book service. We have to change the template to use book's methods as well:
</code>html template that uses book instance</p>

<div ng-controller="BookController">
    <div ng-style="{ backgroundImage: 'url(' + book.getImageUrl(100, 100) + ')' }"></div>
    Id: <span ng-bind="book.id"></span>
    <br/>
    Name:<input type="text" ng-model="book.name" />
    <br/>
    Author: <input type="text" ng-model="book.author" />
    <br/>
    Is Available: <span ng-bind="book.isAvailable() ? 'Yes' : 'No' "></span>
    <br/>
    <button ng-click="book.delete()">Delete</button>
    <br/>
    <button ng-click="book.update()">Update</button>
</div>


<p>```
Up to here we saw how to model a data, encapsulate all its methods in one class and share this class between controllers without code duplication.</p>

<h2>Model of the same book in several controllers</h2>

<p>So we have a book model definition and several controllers that work with books. After using this modeling architecture you will notice that there is a big problem.
Up to now we supported several controllers that do operations with books. But what will happen if two controllers will deal with the same book? <br/>
Assume that we have a section with a list of names of all our books and another section with an editable view of a book. We have two controllers, one for each section. The first controller loads the books list and the second controller loads a single book. Our user sees the second section, edit the name of the book and then presses on the "update" button. The update process will succeed and the book name will be changed. But in the books list section the user still sees the old name! What happened actually is that there were two different instances of the same book - one for the books list and one for the editable view. When the user edited the book's name, he actually changed the name property of the book instance that was binded to the editable view. Whereas the book instance that was binded to the books list view didn't changed. <br/>
The solution for this problem is to share the same books instances with any controller that needs them. This way both the books list controller and the editable view controller will hold the same book instance and whenever this instance is changed, the changes will be reflected in all the views. Translating words to actions, we have to create a booksManager service (the letter b is not capital because it is an object and not a Class) that will manage books instances pool and will be responsible for returning instances of books. If the required instance doesn't exist in the pool, the service will create it. If the required instance already exists in the pool, the service will only return it. Keep in mind that all the functions that load instances of books will be defined eventually only in our booksManager service since it has to be the only component that provide books instances.
```javascript booksManager service
app.factory('booksManager', ['$http', '$q', 'Book', function($http, $q, Book) {</p>

<pre><code>var booksManager = {
    _pool: {},
    _retrieveInstance: function(bookId, bookData) {
        var instance = this._pool[bookId];

        if (instance) {
            instance.setData(bookData);
        } else {
            instance = new Book(bookData);
            this._pool[bookId] = instance;
        }

        return instance;
    },
    _search: function(bookId) {
        return this._pool[bookId];
    },
    _load: function(bookId, deferred) {
        var scope = this;

        $http.get('ourserver/books/' + bookId)
            .success(function(bookData) {
                var book = scope._retrieveInstance(bookData.id, bookData);
                deferred.resolve(book);
            })
            .error(function() {
                deferred.reject();
            });
    },
    /* Public Methods */
    /* Use this function in order to get a book instance by it's id */
    getBook: function(bookId) {
        var deferred = $q.defer();
        var book = this._search(bookId);
        if (book) {
            deferred.resolve(book);
        } else {
            this._load(bookId, deferred);
        }
        return deferred.promise;
    },
    /* Use this function in order to get instances of all the books */
    loadAllBooks: function() {
        var deferred = $q.defer();
        var scope = this;
        $http.get('ourserver/books)
            .success(function(booksArray) {
                var books = [];
                booksArray.forEach(function(bookData) {
                    var book = scope._retrieveInstance(bookData.id, bookData);
                    books.push(book);
                });

                deferred.resolve(books);
            })
            .error(function() {
                deferred.reject();
            });
        return deferred.promise;
    },
    /*  This function is useful when we got somehow the book data and we wish to store it or update the pool and get a book instance in return */
    setBook: function(bookData) {
        var scope = this;
        var book = this._search(bookData.id);
        if (book) {
            book.setData(bookData);
        } else {
            book = scope._retrieveInstance(bookData);
        }
        return book;
    },

};
return booksManager;
</code></pre>

<p>}]);
<code>
Our Book service is now without the load method:
</code>javascript Book model without the load method
app.factory('Book', ['$http', function($http) {</p>

<pre><code>function Book(bookData) {
    if (bookData) {
        this.setData(bookData):
    }
    // Some other initializations related to book
};
Book.prototype = {
    setData: function(bookData) {
        angular.extend(this, bookData);
    },
    delete: function() {
        $http.delete('ourserver/books/' + bookId);
    },
    update: function() {
        $http.put('ourserver/books/' + bookId, this);
    },
    getImageUrl: function(width, height) {
        return 'our/image/service/' + this.book.id + '/width/height';
    },
    isAvailable: function() {
        if (!this.book.stores || this.book.stores.length === 0) {
            return false;
        }
        return this.book.stores.some(function(store) {
            return store.quantity &gt; 0;
        });
    }
};
return Book;
</code></pre>

<p>}]);
<code>
Our EditableBookController and BooksListController controllers looks like:
</code>javascript EditableBookController and BooksListController that uses booksManager
app</p>

<pre><code>.controller('EditableBookController', ['$scope', 'booksManager', function($scope, booksManager) {
    booksManager.getBook(1).then(function(book) {
        $scope.book = book
    });
}])
.controller('BooksListController', ['$scope', 'booksManager', function($scope, booksManager) {
    booksManager.loadAllBooks().then(function(books) {
        $scope.books = books
    });
}]);
</code></pre>

<p>```
Notice that the templates remain the same as they still use instances. Now the application will hold only one book instance with id equals to 1 and any change on it will be reflected on all views that use it.</p>

<h2>Summary</h2>

<p>On this article I suggested an architecture for modeling data in AngularJS. First, I presented the default model binding of AngularJS, then I showed how to encapsulate the model's methods and operations so we can share it between different controllers, and finally I explained how to manage our models instances so all the changes will be reflected on all the application views.</p>

<p>I hope this article gave you ideas how to implement your data models. If you have any question, don't hesitate to ask!</p>

<p>NaorYe</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Select Plugin]]></title>
    <link href="http://webdeveasy.com/easy-select-plugin/"/>
    <updated>2013-10-07T19:12:43+02:00</updated>
    <id>http://webdeveasy.com/easy-select-plugin</id>
    <content type="html"><![CDATA[<p>One day I was asked to add a text input component with an ability to choose a value from fixed list. After searching the web, I found several jQuery plugins that was able to solve my needs and much more. But, those components required many dependencies and weighed so much for my simple need. So I decided to write my own plugin. Easy Select requires jQuery only and takes 3kb minified (before gzip):</p>

<div>
    Select a continent: <input class="continent-input" type="text" />
    <script>
        $(function() {
            $('.continent-input').easySelect({
                idKey: 'value',
                textKey: 'name',
                items: [
                    { name: 'Africa', value: 1},
                    { name: 'Antarctica', value: 2},
                    { name: 'Asia', value: 3},
                    { name: 'Australia', value: 4},
                    { name: 'Europe', value: 5},
                    { name: 'North America', value: 6},
                    { name: 'South America', value: 7}
                ]
            });
        });
    </script>
</div>


<!-- more -->


<p>See a <a href="http://webdeveasy.com/code/easy-select-plugin/demo/index.html" target="_blank">demo</a>.</p>

<h2>Getting Started</h2>

<ol>
<li>Download the plugin from <a href="https://github.com/naorye/easy-select/archive/master.zip" target="_blank">here</a>.</li>
<li>Add a reference to jquery.easy-select.js and easy-select.css in your page (located in <code>/dist</code> folder). You can use the minified version instead by using jquery.easy-select.min.js and easy-select.min.css.</li>
<li>In order to use the plugin on text input element:
<code>html Text input element
&lt;input type="text" class="my-input" /&gt;
</code>
```javascript easy-select usage
$('.my-input').easySelect({
 items: [

<pre><code> 1: 'Option 1',
 2: 'Option 2',
 3: 'Option 3'
</code></pre>

<p> ]
});
```</p></li>
</ol>


<h2>Options</h2>

<p>Easy select has a few options:</p>

<h4 style="margin-bottom: 0;">items</h4>


<p>Type: Array of objects<br/>
Default: <code>[]</code> <br/>
Array of items for the select box.</p>

<h4 style="margin-bottom: 0;">idKey</h4>


<p>Type: String <br/>
Default: <code>id</code> <br/>
The name of the attribute that represents the item id.</p>

<h4 style="margin-bottom: 0;">textKey</h4>


<p>Type: String <br/>
Default: <code>text</code> <br/>
The name of the attribute that represents the item text.</p>

<h4 style="margin-bottom: 0;">onSelect</h4>


<p>Type: Function <br/>
Default: <code>null</code> <br/>
A callback function that triggered every time a new item gets selected.</p>

<h2>Methods</h2>

<p>Easy select has also a few useful methods. In order to use them you need to access the API object:
<code>javascript Accessing easy-select API object
$('.my-input').data('easySelect');
</code></p>

<h4>getValue()</h4>

<p>In order to get the selectd text you can read the value of your text input. <code>getValue()</code> method returns the value (or id) of the selected item.
<code>javascript Usage example
$('.my-input').data('easySelect').getValue();
</code></p>

<h4>setItems()</h4>

<p><code>setItems()</code> method lets you change the items list during runtime. This method is useful when you want to load data asynchronously.
```javascript Usage example
$.get('url/to/data').done(function(items) {</p>

<pre><code>$('.my-input').data('easySelect').setItems(items);
</code></pre>

<p>});
```</p>

<h4>destroy()</h4>

<p><code>destroy()</code> method destroys the plugin by removing unnecessary elements and unbinding events.
<code>javascript Usage example
$('.my-input').data('easySelect').destroy();
</code></p>

<h2>Contributing</h2>

<ol>
<li>Visit our git repository: <a href="https://github.com/naorye/easy-select" target="_blank">https://github.com/naorye/easy-select</a></li>
<li>Fork it!</li>
<li>Create your feature branch: <code>git checkout -b my-new-feature</code></li>
<li>Make your changes on the <code>src</code> folder, never on the <code>dist</code> folder</li>
<li>You can use <code>grunt build</code> and <code>grunt preview</code> commands in order to see your changes on the demo</li>
<li>Commit your changes: <code>git commit -m 'Add some feature'</code></li>
<li>Push to the branch: <code>git push origin my-new-feature</code></li>
<li>Submit a pull request</li>
</ol>


<p>I hope some of you will find a good use for it.</p>

<p>NaorYe</p>
]]></content>
  </entry>
  
</feed>
