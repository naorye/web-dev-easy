<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Web Development is Easy!]]></title>
  <link href="http://webdeveasy.com/categories/javascript/atom.xml" rel="self"/>
  <link href="http://webdeveasy.com/"/>
  <updated>2014-01-20T18:27:46+02:00</updated>
  <id>http://webdeveasy.com/</id>
  <author>
    <name><![CDATA[NaorYe]]></name>
    <email><![CDATA[mailto:naorye@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[AngularJS Data Model]]></title>
    <link href="http://webdeveasy.com/angularjs-data-model/"/>
    <updated>2013-11-23T20:51:33+02:00</updated>
    <id>http://webdeveasy.com/angularjs-data-model</id>
    <content type="html"><![CDATA[<p>As we already know, AngularJS doesn't come with an out of the box solution for data modeling. In the most abstract way, AngularJS lets us use JSON data as a model in the controller. As the time passed and my application grew, I realized that this modeling method isn't powerful enough to fit my application's needs. In this article I will present the way I dealt with data modeling in my AngularJS application.</p>

<!-- more -->


<h2>Defining a model for controller</h2>

<p>Let's start with a simple example. I would like to display a book view. This is the controller:
```javascript BookController
app.controller('BookController', ['$scope', function($scope) {</p>

<pre><code>$scope.book = {
    id: 1,
    name: 'Harry Potter',
    author: 'J. K. Rowling',
    stores: [
        { id: 1, name: 'Barnes &amp; Noble', quantity: 3},
        { id: 2, name: 'Waterstones', quantity: 2},
        { id: 3, name: 'Book Depository', quantity: 5}
    ]
};
</code></pre>

<p>}]);
<code>
This controller creates a model of book which can be later used in our template:
</code>html template for displaying a book</p>

<div ng-controller="BookController">
    Id: <span ng-bind="book.id"></span>
    <br/>
    Name:<input type="text" ng-model="book.name" />
    <br/>
    Author: <input type="text" ng-model="book.author" />
</div>


<p><code>
In case we would like to get the book data from a backend api, we can also use $http:
</code>javascript BookController with $http
app.controller('BookController', ['$scope', '$http', function($scope, $http) {</p>

<pre><code>var bookId = 1;

$http.get('ourserver/books/' + bookId).success(function(bookData) {
    $scope.book = bookData;
});
</code></pre>

<p>}]);
<code>
Notice that bookData is still a JSON object.
Later on we would like to do something with this data. For example, update the book, delete it or even do other operations that are not dealing with the backend, like generate a book image url according to requested size or determining whether the book is available. Those methods can be declared on our controller:
</code>javascript BookController with several book actions
app.controller('BookController', ['$scope', '$http', function($scope, $http) {</p>

<pre><code>var bookId = 1;

$http.get('ourserver/books/' + bookId).success(function(bookData) {
    $scope.book = bookData;
});

$scope.deleteBook = function() {
    $http.delete('ourserver/books/' + bookId);
};

$scope.updateBook = function() {
    $http.put('ourserver/books/' + bookId, $scope.book);
};

$scope.getBookImageUrl = function(width, height) {
    return 'our/image/service/' + bookId + '/width/height';
};

$scope.isAvailable = function() {
    if (!$scope.book.stores || $scope.book.stores.length === 0) {
        return false;
    }
    return $scope.book.stores.some(function(store) {
        return store.quantity &gt; 0;
    });
};
</code></pre>

<p>}]);
<code>
And later in our template:
</code>html template for displaying a complete book</p>

<div ng-controller="BookController">
    <div ng-style="{ backgroundImage: 'url(' + getBookImageUrl(100, 100) + ')' }"></div>
    Id: <span ng-bind="book.id"></span>
    <br/>
    Name:<input type="text" ng-model="book.name" />
    <br/>
    Author: <input type="text" ng-model="book.author" />
    <br/>
    Is Available: <span ng-bind="isAvailable() ? 'Yes' : 'No' "></span>
    <br/>
    <button ng-click="deleteBook()">Delete</button>
    <br/>
    <button ng-click="updateBook()">Update</button>
</div>


<p>```</p>

<h2>Sharing a model between controllers</h2>

<p>As long as the book's structure and methods are relevant only to one controller, all is fine and our work here is done. But as the application grows, there might be other controllers that will deal with books. Those controllers will sometimes need to fetch a book, update it, delete it or get it's image url or availability. Therefore we have to share the behaviors of a book between controllers. In order to do this we will use a factory that returns the book's behavior. Before writing this factory, I would like to mention here that we could make the factory return an object that contains helper methods for book (i.e. functions that get a book JSON and do what asked), but I prefer to use <a>prototype</a> for constructing a Book class, which I believe is the right choice:
```javascript Book model service
app.factory('Book', ['$http', function($http) {</p>

<pre><code>function Book(bookData) {
    if (bookData) {
        this.setData(bookData):
    }
    // Some other initializations related to book
};
Book.prototype = {
    setData: function(bookData) {
        angular.extend(this, bookData);
    },
    load: function(id) {
        var scope = this;
        $http.get('ourserver/books/' + bookId).success(function(bookData) {
            scope.setData(bookData);
        });
    },
    delete: function() {
        $http.delete('ourserver/books/' + bookId);
    },
    update: function() {
        $http.put('ourserver/books/' + bookId, this);
    },
    getImageUrl: function(width, height) {
        return 'our/image/service/' + this.book.id + '/width/height';
    },
    isAvailable: function() {
        if (!this.book.stores || this.book.stores.length === 0) {
            return false;
        }
        return this.book.stores.some(function(store) {
            return store.quantity &gt; 0;
        });
    }
};
return Book;
</code></pre>

<p>}]);
<code>
This way all book's behavior is encapsulated in Book service. Now, let's use our shiny Book service in our BookController:
</code>javascript BookController that uses Book model
app.controller('BookController', ['$scope', 'Book', function($scope, Book) {</p>

<pre><code>$scope.book = new Book();
$scope.book.load(1);
</code></pre>

<p>}]);
<code>
As you can see, the controller became very thin. It now creates a Book instance, assigns it to the scope and loads it from the backend. When the book will be loaded, it's properties will be changed and so the template. Keep in mind that other controllers that interact with a book, simply inject the Book service. We have to change the template to use book's methods as well:
</code>html template that uses book instance</p>

<div ng-controller="BookController">
    <div ng-style="{ backgroundImage: 'url(' + book.getImageUrl(100, 100) + ')' }"></div>
    Id: <span ng-bind="book.id"></span>
    <br/>
    Name:<input type="text" ng-model="book.name" />
    <br/>
    Author: <input type="text" ng-model="book.author" />
    <br/>
    Is Available: <span ng-bind="book.isAvailable() ? 'Yes' : 'No' "></span>
    <br/>
    <button ng-click="book.delete()">Delete</button>
    <br/>
    <button ng-click="book.update()">Update</button>
</div>


<p>```
Up to here we saw how to model a data, encapsulate all its methods in one class and share this class between controllers without code duplication.</p>

<h2>Model of the same book in several controllers</h2>

<p>So we have a book model definition and several controllers that work with books. After using this modeling architecture you will notice that there is a big problem.
Up to now we supported several controllers that do operations with books. But what will happen if two controllers will deal with the same book? <br/>
Assume that we have a section with a list of names of all our books and another section with an editable view of a book. We have two controllers, one for each section. The first controller loads the books list and the second controller loads a single book. Our user sees the second section, edit the name of the book and then presses on the "update" button. The update process will succeed and the book name will be changed. But in the books list section the user still sees the old name! What happened actually is that there were two different instances of the same book - one for the books list and one for the editable view. When the user edited the book's name, he actually changed the name property of the book instance that was binded to the editable view. Whereas the book instance that was binded to the books list view didn't changed. <br/>
The solution for this problem is to share the same books instances with any controller that needs them. This way both the books list controller and the editable view controller will hold the same book instance and whenever this instance is changed, the changes will be reflected in all the views. Translating words to actions, we have to create a booksManager service (the letter b is not capital because it is an object and not a Class) that will manage books instances pool and will be responsible for returning instances of books. If the required instance doesn't exist in the pool, the service will create it. If the required instance already exists in the pool, the service will only return it. Keep in mind that all the functions that load instances of books will be defined eventually only in our booksManager service since it has to be the only component that provide books instances.
```javascript booksManager service
app.factory('booksManager', ['$http', '$q', 'Book', function($http, $q, Book) {</p>

<pre><code>var booksManager = {
    _pool: {},
    _retrieveInstance: function(bookId, bookData) {
        var instance = this._pool[bookId];

        if (instance) {
            instance.setData(bookData);
        } else {
            instance = new Book(bookData);
            this._pool[bookId] = instance;
        }

        return instance;
    },
    _search: function(bookId) {
        return this._pool[bookId];
    },
    _load: function(bookId, deferred) {
        var scope = this;

        $http.get('ourserver/books/' + bookId)
            .success(function(bookData) {
                var book = scope._retrieveInstance(bookData.id, bookData);
                deferred.resolve(book);
            })
            .error(function() {
                deferred.reject();
            });
    },
    /* Public Methods */
    /* Use this function in order to get a book instance by it's id */
    getBook: function(bookId) {
        var deferred = $q.defer();
        var book = this._search(bookId);
        if (book) {
            deferred.resolve(book);
        } else {
            this._load(bookId, deferred);
        }
        return deferred.promise;
    },
    /* Use this function in order to get instances of all the books */
    loadAllBooks: function() {
        var deferred = $q.defer();
        var scope = this;
        $http.get('ourserver/books)
            .success(function(booksArray) {
                var books = [];
                booksArray.forEach(function(bookData) {
                    var book = scope._retrieveInstance(bookData.id, bookData);
                    books.push(book);
                });

                deferred.resolve(books);
            })
            .error(function() {
                deferred.reject();
            });
        return deferred.promise;
    },
    /*  This function is useful when we got somehow the book data and we wish to store it or update the pool and get a book instance in return */
    setBook: function(bookData) {
        var scope = this;
        var book = this._search(bookData.id);
        if (book) {
            book.setData(bookData);
        } else {
            book = scope._retrieveInstance(bookData);
        }
        return book;
    },

};
return booksManager;
</code></pre>

<p>}]);
<code>
Our Book service is now without the load method:
</code>javascript Book model without the load method
app.factory('Book', ['$http', function($http) {</p>

<pre><code>function Book(bookData) {
    if (bookData) {
        this.setData(bookData):
    }
    // Some other initializations related to book
};
Book.prototype = {
    setData: function(bookData) {
        angular.extend(this, bookData);
    },
    delete: function() {
        $http.delete('ourserver/books/' + bookId);
    },
    update: function() {
        $http.put('ourserver/books/' + bookId, this);
    },
    getImageUrl: function(width, height) {
        return 'our/image/service/' + this.book.id + '/width/height';
    },
    isAvailable: function() {
        if (!this.book.stores || this.book.stores.length === 0) {
            return false;
        }
        return this.book.stores.some(function(store) {
            return store.quantity &gt; 0;
        });
    }
};
return Book;
</code></pre>

<p>}]);
<code>
Our EditableBookController and BooksListController controllers looks like:
</code>javascript EditableBookController and BooksListController that uses booksManager
app</p>

<pre><code>.controller('EditableBookController', ['$scope', 'booksManager', function($scope, booksManager) {
    booksManager.getBook(1).then(function(book) {
        $scope.book = book
    });
}])
.controller('BooksListController', ['$scope', 'booksManager', function($scope, booksManager) {
    booksManager.loadAllBooks().then(function(books) {
        $scope.books = books
    });
}]);
</code></pre>

<p>```
Notice that the templates remain the same as they still use instances. Now the application will hold only one book instance with id equals to 1 and any change on it will be reflected on all views that use it.</p>

<h2>Summary</h2>

<p>On this article I suggested an architecture for modeling data in AngularJS. First, I presented the default model binding of AngularJS, then I showed how to encapsulate the model's methods and operations so we can share it between different controllers, and finally I explained how to manage our models instances so all the changes will be reflected on all the application views.</p>

<p>I hope this article gave you ideas how to implement your data models. If you have any question, don't hesitate to ask!</p>

<p>NaorYe</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Easy Select Plugin]]></title>
    <link href="http://webdeveasy.com/easy-select-plugin/"/>
    <updated>2013-10-07T19:12:43+02:00</updated>
    <id>http://webdeveasy.com/easy-select-plugin</id>
    <content type="html"><![CDATA[<p>One day I was asked to add a text input component with an ability to choose a value from fixed list. After searching the web, I found several jQuery plugins that was able to solve my needs and much more. But, those components required many dependencies and weighed so much for my simple need. So I decided to write my own plugin. Easy Select requires jQuery only and takes 3kb minified (before gzip):</p>

<div>
    Select a continent: <input class="continent-input" type="text" />
    <script>
        $(function() {
            $('.continent-input').easySelect({
                idKey: 'value',
                textKey: 'name',
                items: [
                    { name: 'Africa', value: 1},
                    { name: 'Antarctica', value: 2},
                    { name: 'Asia', value: 3},
                    { name: 'Australia', value: 4},
                    { name: 'Europe', value: 5},
                    { name: 'North America', value: 6},
                    { name: 'South America', value: 7}
                ]
            });
        });
    </script>
</div>


<!-- more -->


<p>See a <a href="http://webdeveasy.com/code/easy-select-plugin/demo/index.html" target="_blank">demo</a>.</p>

<h2>Getting Started</h2>

<ol>
<li>Download the plugin from <a href="https://github.com/naorye/easy-select/archive/master.zip" target="_blank">here</a>.</li>
<li>Add a reference to jquery.easy-select.js and easy-select.css in your page (located in <code>/dist</code> folder). You can use the minified version instead by using jquery.easy-select.min.js and easy-select.min.css.</li>
<li>In order to use the plugin on text input element:
<code>html Text input element
&lt;input type="text" class="my-input" /&gt;
</code>
```javascript easy-select usage
$('.my-input').easySelect({
 items: [

<pre><code> 1: 'Option 1',
 2: 'Option 2',
 3: 'Option 3'
</code></pre>

<p> ]
});
```</p></li>
</ol>


<h2>Options</h2>

<p>Easy select has a few options:</p>

<h4 style="margin-bottom: 0;">items</h4>


<p>Type: Array of objects<br/>
Default: <code>[]</code> <br/>
Array of items for the select box.</p>

<h4 style="margin-bottom: 0;">idKey</h4>


<p>Type: String <br/>
Default: <code>id</code> <br/>
The name of the attribute that represents the item id.</p>

<h4 style="margin-bottom: 0;">textKey</h4>


<p>Type: String <br/>
Default: <code>text</code> <br/>
The name of the attribute that represents the item text.</p>

<h4 style="margin-bottom: 0;">onSelect</h4>


<p>Type: Function <br/>
Default: <code>null</code> <br/>
A callback function that triggered every time a new item gets selected.</p>

<h2>Methods</h2>

<p>Easy select has also a few useful methods. In order to use them you need to access the API object:
<code>javascript Accessing easy-select API object
$('.my-input').data('easySelect');
</code></p>

<h4>getValue()</h4>

<p>In order to get the selectd text you can read the value of your text input. <code>getValue()</code> method returns the value (or id) of the selected item.
<code>javascript Usage example
$('.my-input').data('easySelect').getValue();
</code></p>

<h4>setItems()</h4>

<p><code>setItems()</code> method lets you change the items list during runtime. This method is useful when you want to load data asynchronously.
```javascript Usage example
$.get('url/to/data').done(function(items) {</p>

<pre><code>$('.my-input').data('easySelect').setItems(items);
</code></pre>

<p>});
```</p>

<h4>destroy()</h4>

<p><code>destroy()</code> method destroys the plugin by removing unnecessary elements and unbinding events.
<code>javascript Usage example
$('.my-input').data('easySelect').destroy();
</code></p>

<h2>Contributing</h2>

<ol>
<li>Visit our git repository: <a href="https://github.com/naorye/easy-select" target="_blank">https://github.com/naorye/easy-select</a></li>
<li>Fork it!</li>
<li>Create your feature branch: <code>git checkout -b my-new-feature</code></li>
<li>Make your changes on the <code>src</code> folder, never on the <code>dist</code> folder</li>
<li>You can use <code>grunt build</code> and <code>grunt preview</code> commands in order to see your changes on the demo</li>
<li>Commit your changes: <code>git commit -m 'Add some feature'</code></li>
<li>Push to the branch: <code>git push origin my-new-feature</code></li>
<li>Submit a pull request</li>
</ol>


<p>I hope some of you will find a good use for it.</p>

<p>NaorYe</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single Page Application Authentication]]></title>
    <link href="http://webdeveasy.com/single-page-application-authentication/"/>
    <updated>2013-09-25T23:27:44+03:00</updated>
    <id>http://webdeveasy.com/single-page-application-authentication</id>
    <content type="html"><![CDATA[<p>This article will guide you how to add user authentication to your single page application. On the back end side I will use Node.js and on the front end side I will use AngularJS. Although I used specific frameworks, you may apply the same technique for different back end and frond end frameworks (rails, Backbone, etc...). <br/>
The final application will look like this (without the horrible styling):<!--
--><iframe src="http://spa-auth.herokuapp.com/" width="580px" height="150px" scrolling="no" style="overflow:hidden;margin:0 45px;"></iframe></p>

<!-- more -->


<p>At the beginning of this article I will build an application based on <a target="_blank" href="http://nodejs.org">Node.js</a>, <a target="_blank" href="http://expressjs.com/">express</a>, <a target="_blank" href="http://mongoosejs.com/">mongoose</a> and <a target="_blank" href="http://angularjs.org/">AngularJS</a> and then I will add authentication support. At the end we will have single page application that allows users to login and logout from our system. For this article I chose to implement facebook authentication, but changing this later to other 3rd party or local authentication will be trivial. <br/>
One thing important to mention is that the final application will contain the minimum code required for this guide so don't use it as a boilerplate code, the best thing is to learn from it and implement it yourself in your application.</p>

<h2>Create an application</h2>

<p>At the beginning, let's create a single page application.</p>

<h3>Node.js server: app.js</h3>

<p>First thing we do is loading required modules:
```javascript Load required modules and configurations
var fs = require('fs')</p>

<pre><code>mongoose = require('mongoose'),
http = require('http');
</code></pre>

<p><code>
Then we connect to our mongo database (you should define your own) and load some mongoose models (right now we don't have any model):
</code>javascript Connect to mongo db and load mongoose models
mongoose.connect('<mongodb uri>');</p>

<p>var models_path = __dirname + '/app/models';
fs.readdirSync(models_path).forEach(function(file) {</p>

<pre><code>if (file.substring(-3) === '.js') {
    require(models_path + '/' + file);
}
</code></pre>

<p>});
<code>
Last things to do is to configure express application, define its routes and start it. Express configurations and routes definitions are made in different files in order to keep the application easy to maintain.
</code>javascript Configure express, define routes and start
var app = require('./config/express')(config);
require('./config/routes')(app, config);
http.createServer(app).listen(app.get('port'), function(){</p>

<pre><code>console.log('Express server listening on port ' + app.get('port'));
</code></pre>

<p>});</p>

<p>exports = module.exports = app;
```</p>

<h3>Express configuration: config/express.js</h3>

<p>There is nothing special in this express configurations file. Amongst all the configurations, we:</p>

<ul>
<li>Set our views path to be /app/views</li>
<li>Set our view engine to <a target="_blank" href="https://github.com/visionmedia/ejs">ejs</a></li>
<li>Use <a target="_blank" href="http://kcbanner.github.io/connect-mongo/">connect-mongo</a> as a session store (you need to define your &lt;mongodb uri&gt;)</li>
<li>Define /public as a static folder (this folder will contain our front end application)</li>
</ul>


<p>```javascript express configurations
var express = require('express'),</p>

<pre><code>mongoStore = require('connect-mongo')(express),
path = require('path');
</code></pre>

<p>module.exports = function (config) {</p>

<pre><code>var app = express();

var root = path.normalize(__dirname + '/..');

app.set('showStackError', true);

app.set('port', process.env.PORT || 3000);
app.set('views', root + '/app/views');
app.set('view engine', 'ejs');
app.use(express.favicon());

app.use(express.logger('dev'));

app.use(express.bodyParser());
app.use(express.methodOverride());
app.use(express.cookieParser());

app.use(express.session({
    secret: 'my-session-store',
    store: new mongoStore({
        url: '&lt;mongodb uri&gt;',
        collection : 'sessions'
    })
}));

app.use(express.static(root + '/public'));

app.use(app.router);

if ('development' == app.get('env')) {
    app.use(express.errorHandler());

    app.use(function(req, res, next) {
         console.log(req.url);
         next();
    });
}

return app;
</code></pre>

<p>};
```</p>

<h3>Routes definition: config/routes.js</h3>

<p>Our routes definitions are very simple. We need to be able to serve secured data only for our members as well as unsecured data for all users. Therefore the router handles the following endpoints:</p>

<ul>
<li>GET request on api/secured/* for secured data</li>
<li>GET request on api/* for unsecured data</li>
<li>All other GET requests return the index view (except for static content that was defined on express configurations)</li>
</ul>


<p>```javascript Routes definition
module.exports = function (app, passport, config) {</p>

<pre><code>app.get('api/secured/*',
    function (req, res, next) {
        // Need to filter anonymous users somehow 
        /*if (not logged in) {
            return res.json({ error: 'This is a secret message, login to see it.' });
        }*/
        next();
    },
    function (req, res) {
        res.json({ message: 'This message is only for authenticated users' });
    });


app.get('api/*', function (req, res) {
    res.json({ message: 'This message is known by all' });
});


app.get('/*', function (req, res) {
    res.render('index');
});
</code></pre>

<p>};
```
Notice that GET request on api/secured/* should return error JSON for anonymous users.</p>

<h3>Front end</h3>

<p>Our front end, which consists of AngularJS, has an html markup that contains a secured message and an unsecured message:
```html Markup</p>

<div ng-controller="MessageController">
    Unsecured message: <span ng-bind="messages.unsecured"></span>
    <br/>
    Secured message: <span ng-bind="messages.secured"></span>
</div>


<p>```
At the end we would like the secured message to be displayed only to authenticated users.</p>

<p>This is our MessageController:
```javascript MessageController
app.controller('MessageController', ['$scope', '$http', function($scope, $http) {</p>

<pre><code>$scope.messages = {};

$http.get('/api/secured/message').success(function(data) {
    $scope.messages.secured = data.message || data.error;
});

$http.get('/api/message').success(function(data) {
    $scope.messages.unsecured = data.message || data.error;
});
</code></pre>

<p>}]);
```</p>

<p>You can download the application we have so far, without authentication, <a target="_blank" href="../code/single-page-application-authentication/single-page-application-without-authentication.zip">here</a>. In order to run the application, fill in your &lt;mongodb uri&gt; in config/express.js, execute 'npm install' and then execute 'npm start'. <br/>
Now is the time to add authentication.</p>

<h2>Authentication support</h2>

<p>For supporting authentication, we will use <a target="_blank" href="http://passportjs.org/">Passport</a> which is a really simple authentication middleware for Node.js. There are other good authentication middlewares like <a target="_blank" href="http://everyauth.com/">everyauth</a> or <a target="_blank" href="https://github.com/ciaranj/connect-auth">connect-auth</a>, but I find Passport more modular and easy to use. <br/>
Supporting facebook authentication with Passport requires to add "passport" and "passport-facebook" packages to package.json.</p>

<p>Before I continue, I'd like to describe how the whole authentication process is going to be:</p>

<ol>
<li>The first time the user enters the application, he is not authenticated.</li>
<li>The user presses the "Login" button and a new window is opened. Because the authentication process includes redirection to facebook, I decided to open a new window in order to keep the current state of the application window.</li>
<li>This new window leads to an endpoint that triggers Passport and the authentication process begins.</li>
<li>During the authentication process, Passport redirects the user to facebook for authentication. When facebook authentication is completed, facebook redirects the user back to the application which will attempt to obtain an access token. If access was granted, the user will be logged in. Otherwise, authentication has failed.</li>
<li>If authentication succeeds, Passport creates a new user (or loads the user in case of returning user) and establishes a new session. This session will be maintained via a cookie set in the user's browser.</li>
<li>After authentication is completed, Passport redirects the new window to an "after-auth" view that informs the parent opener window about the authentication state and the user data.</li>
<li>The next time the user enters to the application, the cookie will identify the session and the user will become logged in.</li>
</ol>


<p>Therefore, our to do list is:</p>

<ul>
<li>Create User model for representing users</li>
<li>Tell Passport how to create or load user instances according to facebook response</li>
<li>Create an after-auth view for completing the authentication</li>
<li>Create endpoints that triggers the authentication process and renders the after-auth view</li>
</ul>


<p>Now stop talking and let's create the User mongoose model.</p>

<h3>User mongoose model</h3>

<p>```javascript User mongoose model
var mongoose = require('mongoose'),</p>

<pre><code>Schema = mongoose.Schema;
</code></pre>

<p>var UserSchema = new Schema({</p>

<pre><code>name: String,
email: String,
username: String,
user_image: String,
facebook_id: String,
facebook: { },
createdAt: { type: Date, 'default': Date.now }
</code></pre>

<p>});</p>

<p>module.exports = mongoose.model('User', UserSchema);
```
As you can see, the User model is very simple. Except the usual user details, we also want to store the user's facebook id and the whole JSON returned from facebook.</p>

<h3>Fetching the current user</h3>

<p>In order to be able to login using facebook, Passport requires an authentication mechanism (called Strategy). "passport-facebook" package gives us FacebookStrategy class which implements such mechanism. All we have to do is to tell Passport to use FacebookStrategy and implement a method that creates or loads a user according to facebook profile id. <br/>
(Note that in order to use this code, you have to supply your facebook app id and facebook app secret)
```javascript FacebookStrategy for Passport
passport.use(new FacebookStrategy({</p>

<pre><code>    clientID: '&lt;Your facebook app id&gt;',
    clientSecret: '&lt;Your facebook app secret&gt;',
    callbackURL: '/auth/facebook/callback'
}, function(accessToken, refreshToken, profile, done) {
    User.findOne({ 'facebook.id': profile.id }, function (err, user) {
        if (err) { return done(err); }
        if (!user) {
            user = new User({
                name: profile.displayName,
                email: profile.emails[0].value,
                username: profile.username,
                provider_id: profile.id,
                provider: 'facebook',
                facebook: profile._json
            });
            user.save(function (err) {
                if (err) {
                    console.log(err);
                }
                return done(err, user);
            });
        } else {
            return done(err, user);
        }
    });
}));
</code></pre>

<p><code>
When Passport gives us the user's facebook profile, we perform mongodb search for the user according to his facebook profile id. If the user is not found, we create a new user model and save it. Eventually we return the user instance.   
In addition to constructing the user from his facebook profile, we also have to tell Passport how to serialize and deserialize user instance to and from a session:
</code>javascript Serialize and deserialize user instance<br/>
passport.serializeUser(function(user, done) {</p>

<pre><code>done(null, user.id);
</code></pre>

<p>});</p>

<p>passport.deserializeUser(function(id, done) {</p>

<pre><code>User.findOne({ _id: id }, function (err, user) {
    done(err, user);
});
</code></pre>

<p>});
```
When user is authenticated, passport serializes the user and stores the result in a session cookie. When a user with session cookie arrives to the system, Passport deserialize the user instance.</p>

<h3>After-authentication view</h3>

<p>After facebook approves or disapproves the user, Passport tries to obtain access token and renders after-auth view. This view contains a script that passes the login state along with the user data (in case of success login) to the parent window. This is done by defining an accessible method on the application window that knows to handle logins results. Let's take a look on the after-auth view:
```html after-auth view
&lt;!DOCTYPE html>
<html lang="en">
<head></p>

<pre><code>&lt;title&gt;Single Page Application Authentication - Auth Success&lt;/title&gt;
&lt;meta charset="utf-8" /&gt;
&lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt;
</code></pre>

<p></head>
<body></p>

<script type="text/javascript">
    if (window.opener) {
        window.opener.focus();

        var state = '<%= state %>';
        var user = <%- JSON.stringify(user) %>;
        if (window.opener.app &&
            window.opener.app.authState) {
            
            window.opener.app.authState(state, user);
        }
    }
    window.close();
</script>


<p></body>
</html>
```
As you can see, this view contains only script code that notifies the application about the authentication state and the user data. Later we will define the authState() method that handles the result. At the end, the pop-up window is closed.</p>

<p>Now is the time to connect all the actions. Let's see our new endpoints.</p>

<h3>New routes definition</h3>

<p>First, let's take a look on the endpoints that handles the login:
```javascript Login endpoints</p>

<pre><code>app.get('/auth/facebook', passport.authenticate('facebook'));
app.get('/auth/facebook/callback', passport.authenticate('facebook', { successRedirect: '/auth/success', failureRedirect: '/auth/failure' }));
app.get('/auth/success', function(req, res) {
    res.render('after-auth', { state: 'success', user: req.user ? req.user : null });
});
app.get('/auth/failure', function(req, res) {
    res.render('after-auth', { state: 'failure', user: null });
});
</code></pre>

<p><code>
When the user asks for /auth/facebook, Passport redirects the user to facebook which in turn redirects the user back to /auth/facebook/callback (accoring to FacebookStrategy implementation). Then, Passport tries to get access token and redirects to /auth/success or /auth/failure according to the result.   
Both /auth/success and /auth/failure render our after-auth view with different parameters.   
Another endpoint for logout will be DELETE request on /auth:
</code>javascript Logout endpoint
app.delete('/auth', function(req, res) {</p>

<pre><code>req.logout();
res.writeHead(200);
res.end();
</code></pre>

<p>});<br/>
<code>
The last thing to do is to fix our secured data endpoint:
</code>javascript Secured data endpoint
app.get('/api/secured/*',</p>

<pre><code>function (req, res, next) {
    if (!req.user) {
        return res.json({ error: 'This is a secret message, login to see it.' });
    }
    next();
},
function (req, res) {
    res.json({ message: 'This message is only for authenticated users' });
});
</code></pre>

<p>```
First we check whether req.user exists. In case it doesn't, we return an error JSON.</p>

<p>After all our hard work, now is the time to see our authentication in action!</p>

<h2>Authentication in action</h2>

<p>In order to demonstrate our authentication implementation, we have to complete our front end application. Let's create AngularJS service that will be responsible to the user session. The purposes of such service are:</p>

<ul>
<li>Initiate the authentication process</li>
<li>Allow logout</li>
<li>Supply handlers for authentication success / failure and maintain session state
```javascript Session service
app.factory('sessionService', ['$rootScope', '$window', '$http',
  function ($rootScope, $window, $http) {
  var session = {

<pre><code>  init: function () {
      this.resetSession();
  },
  resetSession: function() {
      this.currentUser = null;
      this.isLoggedIn = false;
  },
  facebookLogin: function() {
      var url = '/auth/facebook',
          width = 1000,
          height = 650,
          top = (window.outerHeight - height) / 2,
          left = (window.outerWidth - width) / 2;
      $window.open(url, 'facebook_login', 'width=' + width + ',height=' + height + ',scrollbars=0,top=' + top + ',left=' + left);
  },
  logout: function() {
      var scope = this;
      $http.delete('/auth').success(function() {
          scope.resetSession();
          $rootScope.$emit('session-changed');
      });
  },
  authSuccess: function(userData) {
      this.currentUser = userData;
      this.isLoggedIn = true;
      $rootScope.$emit('session-changed');
  },
  authFailed: function() {
      this.resetSession();
      alert('Authentication failed');
  }
</code></pre>

<p>  };
  session.init();
  return session;
}]);
```
Calling sessionService.facebookLogin() and sessionService.logout() will log us in and out from the application. sessionService.authSuccess() and sessionService.authFailed() are methods that get called whenever the application gets notified about the authentication state. From now on, whenever we like, we can use sessionService.isLoggedIn and sessionService.currentUser in order to know the authentication state and get the current logged in user. Our service also triggers a 'session-changed' event each time the session changed.</p></li>
</ul>


<p>Lt's see now the changes in MessageController
```javascript MessageController
app.controller('MessageController', ['$scope', '$rootScope', '$http',</p>

<pre><code>function($scope, $rootScope, $http) {
    $scope.messages = {};

    function loadMessages() {
        $http.get('/api/secured/message').success(function(data) {
            $scope.messages.secured = data.message || data.error;
        });

        $http.get('/api/message').success(function(data) {
            $scope.messages.unsecured = data.message || data.error;
        });
    }

    var deregistration = $rootScope.$on('session-changed', loadMessages);
    $scope.$on('$destroy', deregistration);

    loadMessages();
}]);
</code></pre>

<p>```
MessageController basically remains the same, except that each time 'session-changed' event is triggered, the controller reloads the messages.</p>

<p>Now is the time to add Login and Logout buttons and bind them to actions. Those buttons will be visible only when necessary.
<code>html Login and logout buttons
&lt;button ng-hide="session.isLoggedIn" ng-click="session.facebookLogin()"&gt;Login&lt;/button&gt;
&lt;span ng-show="session.isLoggedIn" ng-bind="'Hello ' + session.currentUser.name"&gt;&lt;/span&gt;
&lt;button ng-show="session.isLoggedIn" ng-click="session.logout()"&gt;Logout&lt;/button&gt;
</code>
In order the variable "session" to be recognized in the template, we will make the following assignment:
```javascript session assignment to $rootScope
app.run(['$rootScope', 'sessionService', function ($rootScope, sessionService) {</p>

<pre><code>$rootScope.session = sessionService;
</code></pre>

<p>}]);
<code>
Now we have to define the authState() method that handles the result from the authentication pop-up window:
</code>javascript app.authState() definition
app.run(['$rootScope', '$window', 'sessionService', function ($rootScope, $window, sessionService) {</p>

<pre><code>$window.app = {
    authState: function(state, user) {
        $rootScope.$apply(function() {
            switch (state) {
                case 'success':
                    sessionService.authSuccess(user);
                    break;
                case 'failure':
                    sessionService.authFailed();
                    break;
            }

        });
    }
};
</code></pre>

<p>}]);
<code>  
One last thing to do is to determine the authentication state when the application loads. On our template we add a script that assigns the current user (or null) to window.user:
</code>html Assigning the current user to window.user</p>

<script type="text/javascript">
    window.user = <%- JSON.stringify(user) %>;
</script>


<p><code>
Where the "user" variable comes from our endpoint:
</code>javascript Injecting the current user to the view</p>

<pre><code>app.get('/*', function (req, res) {
    res.render('index', { user: req.user ? req.user : null });
});
</code></pre>

<p><code>
And when the front end application loads, we initialize the session according to window.user:
</code>javascript Initiate the front end session state
app.run(['sessionService', '$window', function (sessionService, $window) {</p>

<pre><code>if ($window.user !== null) {
    sessionService.authSuccess($window.user);
}
</code></pre>

<p>}]);
```</p>

<p>Congratulations! Now we have a secured application with facebook authentication!</p>

<h2>Download &amp; GitHub &amp; Demo</h2>

<ul>
<li>Download the application with authentication support <a target="_blank" href="../code/single-page-application-authentication/single-page-application-with-authentication.zip">here</a> (don't forget to run 'npm install' before starting the application with 'npm start')</li>
<li>See a demonstration of the application <a target="_blank" href="http://spa-auth.herokuapp.com/">here</a></li>
<li>Visit the <a href="https://github.com/naorye/spa-auth" target="_blank">GitHub repository</a></li>
</ul>


<p>I hope this article helped you understanding how to add authentication support for your single page application. Feel free to leave comments and questions!</p>

<p>NaorYe</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pages Slider With JavaScript And CSS]]></title>
    <link href="http://webdeveasy.com/pages-slider-with-javascript-and-css/"/>
    <updated>2013-08-06T02:37:31+03:00</updated>
    <id>http://webdeveasy.com/pages-slider-with-javascript-and-css</id>
    <content type="html"><![CDATA[<p>In this article I will show you how to build a pages slider that looks like those on our smartphones. At the end we will get this:</p>

<div class="example">
    Slide left to see this in action:
    <br/> 
    <div class="slider">
        <div class="content">
            <div class="page"></div>
            <div class="page"></div>
            <div class="page"></div>
            <div class="page"></div>
            <div class="page"></div>
            <div class="page"></div>
            <div class="page"></div>
            <div class="page"></div>
        </div>
    </div>
</div>


<script type="text/javascript">
    $(function() {
        $('.slider').pagesSliderTouch();
    });
</script>


<!-- more -->


<h2>Slider Markup Structure</h2>

<p>Our slider consist of div contained in another div. The parent div has limited width with overflow set to "hidden". The child div contains the pages and therefore has their total width. This way only one page is visible and in order to move between pages all we have to do is change the child div's position relative to its parent. Important thing to mention is that we won't really change the child div's position property but will use CSS transform property to simulate this. Here is a sketch of the slider markup structure:</p>

<p><img class="center" src="/code/pages-slider-with-javascript-and-css/images/markup.png" title="'Slider Markup Structure'" ></p>

<p>According to this plan, let's write a markup for four pages with relevant CSS properties:
```html Pages slider plugin markup</p>

<div class="slider">
    <div class="content">
        <div class="page"></div>
        <div class="page"></div>
        <div class="page"></div>
        <div class="page"></div>
    </div>
</div>


<p><code>
</code>css Slider plugin style
.slider { overflow: hidden; }
.slider .content { position: relative; }
.slider .content .page { float: left; }
<code>
This CSS is mandatory in order to give our slider the correct appearance. In addition, we have to style the pages. Their style is not mandatory for the plugin behavior and it's only purpose is to make the pages look nice.
</code>css Pages style
.page {</p>

<pre><code>width: 300px;
height: 100px;  
border-radius: 2px;
box-shadow: inset 0 0 6px 0 rgba(0,0,0,0.4);
background-repeat: no-repeat;
background-size: cover;
</code></pre>

<p>}</p>

<p>.page:nth-child(1) {</p>

<pre><code>background-image: url('http://www.lorempixum.com/300/100/?1');
</code></pre>

<p>}
.page:nth-child(2) {</p>

<pre><code>background-image: url('http://www.lorempixum.com/300/100/?2');
</code></pre>

<p>}
.page:nth-child(3) {</p>

<pre><code>background-image: url('http://www.lorempixum.com/300/100/?3');
</code></pre>

<p>}
.page:nth-child(4) {</p>

<pre><code>background-image: url('http://www.lorempixum.com/300/100/?4');
</code></pre>

<p>}
```
Keep in mind that all the pages must have equal width. In our example, page size is 300px width and 100px height. In order to make this example interesting, each page contains a random image. <br/>
Now all we are left to do is writing the plugin's behavior.</p>

<h2>Slider Behavior</h2>

<p>Our slider behavior is very simple. All we have to do is to bind to mouse down, mouse move and mouse up events, and move the pages accordingly. <br/>
I will start to write this plugin with prototype, so if you are not familiar with prototype, my <a href="http://webdeveasy.com/javascript-prototype" target="_blank">JavaScript Prototype</a> article can be a good reference. Later I will integrate the plugin to jQuery plugin but you can easily integrate it yourself to an AngularJS directive or whatever you like. At the end I will integrate the plugin with <a href="http://eightmedia.github.io/hammer.js" target="_blank">Hammer.js</a> so the plugin will work also with touch gestures. <br/>
Ok, enough talking. Let's write our plugin.</p>

<h2>PagesSlider Initialization and Events Binding</h2>

<p>```javascript PagesSlider initialization and events binding
var PagesSlider = function (slider, options) {</p>

<pre><code>this.slider = slider;
this.content = slider.children().first();
this.currentIndex = 0;
this.pages = this.content.children();
this.slider.width(this.pages.first().width());

var totalWidth = 0;
this.pages.each(function (index, page) {
    totalWidth += $(page).width();
});
this.content.width(totalWidth);

this.bindEvents();
</code></pre>

<p>};
$.extend(PagesSlider.prototype, {</p>

<pre><code>bindEvents: function () {
    this._removeTransition = $.proxy(this.removeTransition, this);
    this._startDrag = $.proxy(this.startDrag, this);
    this._doDrag = $.proxy(this.doDrag, this);
    this._endDrag = $.proxy(this.endDrag, this);

    this.content
        .on('mousedown', this._startDrag)
        .on('transitionend', this._removeTransition);
    $('body')
        .on('mousemove', this._doDrag)
        .on('mouseup', this._endDrag);
},
destroy: function () {
    this.content
        .off('mousedown', this._startDrag)
        .off('transitionend', this._removeTransition);
    $('body')
        .off('mousemove', this._doDrag)
        .off('mouseup', this._endDrag);
}
.
.
.
</code></pre>

<p>});
```
Our constructor gets the slider element as an input. It sets the slider's width to be equal to the first page width and sets content's width to be equal to the pages widths sum. Since all the pages should have the same width and since slider's overflow CSS property was set to hidden, only one page will be visible. The page that will be visible is depending on the content's offset relative to slider.</p>

<h2>startDrag(), doDrag(), endDrag() and removeTransition()</h2>

<p>At the end of the constructor method we bind to 'mousedown', 'mousemove', 'mouseup' and 'transitionend' events. Let's see the implementation of startDrag(), doDrag(), endDrag() and removeTransition():
```javascript startDrag(), doDrag(), endDrag() and removeTransition() implementation
$.extend(PagesSlider.prototype, {</p>

<pre><code>.
.
.
startDrag: function (event) {
    this.enableDrag = true;
    this.dragStartX = event.clientX;
},
doDrag: function (event) {
    if (this.enableDrag) {
        var position = this.pages.eq(this.currentIndex).position();
        var delta = event.clientX - this.dragStartX;

        this.content.css('transform', 'translate3d(' + (delta - position.left) + 'px, 0, 0)');
        event.preventDefault();
    }
},
endDrag: function (event) {
    if (this.enableDrag) {
        this.enableDrag = false;

        var delta = event.clientX - this.dragStartX;
        if (Math.abs(delta) &gt; this.slider.width() / 5) {
            if (delta &lt; 0) {
                this.next();
            } else {
                this.prev();
            }
        } else {
            this.current();
        }
    }
},
removeTransition: function() {
    this.content.css('transition', 'none');
}
.
.
.
</code></pre>

<p>});
```
On startDrag() we enable dragging and store the current X position in order to calculate dragging delta. <br/>
On doDrag() we validate that dragging is enabled (mouse is down) and then calculate the delta and transform the content strip's position according to the delta. <br/>
On endDrag() we disable dragging and move to the new page (previous, next or center the current page). <br/>
The endDrag() method uses next(), prev() and current() methods in order to center the relevant page. Those methods are using CSS animation in order to make smoother transitions. Later, when we use mouse for dragging, we don't need that animation. Therefore, after the transition ends, we remove the animation using removeTransition() method.</p>

<h2>next(), prev() and current()</h2>

<p>```javascript next(), prev() and current() implementation
$.extend(PagesSlider.prototype, {</p>

<pre><code>.
.
.
goToIndex: function (index) {
    var position = this.pages.eq(index).position();

    this.content
        .css('transition', 'all 400ms ease')
        .css('transform', 'translate3d(' + (-1 * (position.left)) + 'px, 0, 0)');

    this.currentIndex = index;
},
current: function () {
    this.goToIndex(this.currentIndex);
},
next: function () {
    if (this.currentIndex &gt;= this.pages.length - 1) {
        this.current();
    } else {
        this.goToIndex(this.currentIndex + 1);
    }
},
prev: function () {
    if (this.currentIndex &lt;= 0) {
        this.current();
    } else {
        this.goToIndex(this.currentIndex - 1);
    }
}
</code></pre>

<p>});
```
The last methods of the plugin are obvious. goToIndex() is a central method that gets a page index and makes a transition to that page. next(), prev() and current() validates that the new page's index is possible (for example, the index cannot be less than 0) and uses goToIndex() to make a transition to the new page.</p>

<p>That's it! Pretty simple.</p>

<h2>Integrate with jQuery Plugin</h2>

<p>Now that we have the plugin code, integrating it into jQuery plugin is not a big deal. If you are not familiar with the <a href="http://webdeveasy.com/jquery-plugin-pattern" target="_blank">jQuery plugin pattern</a>, I advice you to read <a href="http://webdeveasy.com/jquery-plugin-pattern" target="_blank">this post</a>. <br/>
```javascript jQuery plugin integration
(function($) {</p>

<pre><code>$.fn.pagesSlider = function(options) {
    this.each(function(index, slider) {
        var $this = $(slider);
        var pagesSlider = new PagesSlider($this);
        $this.data('pagesSlider', pagesSlider);
    });
    return this;
};
</code></pre>

<p>})(jQuery);
<code>
And in order to invoke the plugin:
</code>javascript jQuery plugin invocation
$(function() {</p>

<pre><code>$('.slider').pagesSlider();
</code></pre>

<p>});
```</p>

<h2>Integrate with Hammer.js</h2>

<p>Hammer.js is a JavaScript library for multi-touch gestures. Although we don't need multi-touch support, we want our users to be able to slide between pages by touch.
Let's download Hammer.js jQuery plugin and initialize Hammer in the scope of the slider before calling the plugin:
```javascript Initialize Hammer.js</p>

<pre><code>$.fn.pagesSliderTouch = function(options) {
    this.hammer();
    this.each(function(index, slider) {
        ...
        ...
</code></pre>

<p>```
Now, all we have to do is to change the events binding to Hammer's events. Changing 'mousedown', 'mousemove' and 'mouseup' to 'dragstart', 'drag' and 'dragend' will do the job.</p>

<h2>Demo &amp; Download</h2>

<ul>
<li><a href="../code/pages-slider-with-javascript-and-css/index.html" target="_blank">Here</a> you can find a demo page.</li>
<li><a href="../code/pages-slider-with-javascript-and-css/pages-slider-with-javascript-and-css.zip" target="_blank">Here</a> you can download the source code.</li>
</ul>


<p>That's all! have fun and don't hesitate to leave your comments!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone Cleanup]]></title>
    <link href="http://webdeveasy.com/backbone-cleanup/"/>
    <updated>2013-04-30T21:09:00+03:00</updated>
    <id>http://webdeveasy.com/backbone-cleanup</id>
    <content type="html"><![CDATA[<p>Backbone allows our users to browse our website without refreshing the page. Each page the user visits consists of several Backbone views which are replaced whenever the user navigates. Views reflect our data models and interact with each other. This can be done by listening and triggering events which add functionality to the page. Whenever the view is replaced, there is a need to clean up the removed view, unbind events and remove unmanaged structure. <br/>
This article suggests a solution to the views cleanup problem.<!-- more --> <br/>
Keep in mind that this is only a suggestion as Backbone doesn't bind us to a specific solution. Your solution should be the one that fit your application structure and requirements.</p>

<h2>Cleanup Router</h2>

<p>We want to cleanup views. In order to do this, we have to find where and when a view is not relevant anymore. After thinking a little I understood that this resides somewhere inside the router, the place where views are replaced by other views. Actually, we want to cleanup the view <strong>right before</strong> the navigation. Unfortunately, Backbone.Router has no "before-navigate" event, so we have to override Router's 'navigate()' method and do whatever we want before calling the original 'navigate()' method. Let's define the Router's 'currentView' member as a reference to the current visible view. Then we can do:<br/>
```javascript Backbone.CleanupRouter class first sketch
Backbone.CleanupRouter = Backbone.Router.extend({</p>

<pre><code>navigate: function() {
    if (this.currentView) {
        this.currentView.cleanupAll();
        this.currentView = null;
    }
    Backbone.Router.prototype.navigate.apply(this, arguments);
}
</code></pre>

<p>});
<code>
This way, each time the user navigates between pages, the router calls the current view's 'cleanupAll()' method and then do the navigation.   
In order to let instances of such a router to mark the current view, let's add 'markCurrentView()' method:
</code>javascript Backbone.CleanupRouter class second sketch
Backbone.CleanupRouter = Backbone.Router.extend({</p>

<pre><code>navigate: function(fragment) {
    if (this.currentView) {
        this.currentView.cleanupAll();
        this.currentView = null;
    }
    Backbone.Router.prototype.navigate.apply(this, arguments);
},
markCurrentView: function(view) {
    this.currentView = view;
}
</code></pre>

<p>});
<code>
Now, CleanupRouter's instance can be something like:
</code>javascript Backbone.CleanupRouter instance example
var router = Backbone.CleanupRouter.extend({</p>

<pre><code>routes: {
    'page-a': 'pageA'
},
pageA: function() {
    var view = // create a view for page A
    this.markCurrentView(view);
}
</code></pre>

<p>});
<code>
After looking on the original Backbone.Router's 'navigate()' method, I noticed that there are some cases where the navigate exits without replacing the view (for example, navigation to the same current route should do nothing). In such cases, we don't need to cleanup the current view. Let's change our custom 'navigate()' to exit in those cases:
</code>javascript Backbone.CleanupRouter class final sketch
var routeStripper = /<sup>[#\/]/;</sup>
Backbone.CleanupRouter = Backbone.Router.extend({</p>

<pre><code>navigate: function(fragment) {
    // Filter cases where navigate exists without navigate
    if (!Backbone.History.started) return false;
    var frag = (fragment || '').replace(routeStripper, '');
    if (Backbone.history.fragment == frag) return;

    if (this.currentView) {
        this.currentView.cleanupAll();
        this.currentView = null;
    }
    Backbone.Router.prototype.navigate.apply(this, arguments);
},
markCurrentView: function(view) {
    this.currentView = view;
}
</code></pre>

<p>});
```</p>

<h2>Cleanup View</h2>

<p>Now we have to define a view that has a 'cleanupAll()' method. This view should clean up itself when calling 'cleanupAll()':
```javascript Backbone.CleanupView class first sketch
Backbone.CleanupView = Backbone.View.extend({</p>

<pre><code>cleanup: function() {
    // This method should be overridden by each view and should
    // contains all the cleanup commands
},
cleanupAll: function() {
    this.cleanup();
}
</code></pre>

<p>});
<code>
Backbone views can hold nested views. Whenever we cleanup a view, we need to clean also it's nested views. In order to do that, each view should have a reference to all it's nested views. Let's implement this:
</code>javascript Backbone.CleanupView class last sketch
Backbone.CleanupView = Backbone.View.extend({</p>

<pre><code>constructor: function() {
    this.nestedViews = [];
    Backbone.View.prototype.constructor.apply(this, arguments);
},
setNestedView: function(view) {
    this.nestedViews.push(view);
},
cleanup: function() {
    // This method should be overridden
},
cleanupAll: function() {
    for (var i in this.nestedViews) {
        this.nestedViews[i].cleanup();
    }
    this.nestedViews = null;
    this.cleanup();
}
</code></pre>

<p>});
<code>
Now, CleanupView's instance can be something like:
</code>javascript Backbone.CleanupView instance example
var view = Backbone.CleanupView.extend({</p>

<pre><code>render: function() {
    // Render current view
    var nested = // create a nested view which is
                 // also instance of CleanupView
    this.$el.append(nested.$el);

    this.setNestedView(view);
},
cleanup: function() {
    // Cleanup current view only
}
</code></pre>

<p>});
```</p>

<h2>Example</h2>

<p>In order to test our cleanup plugin, I have created a small application that uses it and logs the 'render()' and 'cleanup()' methods. The application contains one router of CleanupRouter type and two views of CleanupView type (with templates):</p>

<p>```javascript Application router
var Router = Backbone.CleanupRouter.extend({</p>

<pre><code>routes: {
    '': 'index',
    'single-view': 'singleView',
    'nested-view': 'nestedView'
},
index: function() {
    this.navigate('single-view', {trigger: true});
},
singleView: function() {
    var view = new SingleView();
    view.render();
    $('#view').empty().append(view.$el);

    this.markCurrentView(view);
},
nestedView: function() {
    var view = new NestedView();
    view.render();
    $('#view').empty().append(view.$el);

    this.markCurrentView(view);
}
</code></pre>

<p>});
```
Our router renders instances of SingleView and NestedView according to the route. After each render we call 'markCurrentView()' in order to mark the current view.</p>

<p>```javascript SingleView view
var SingleView = Backbone.CleanupView.extend({</p>

<pre><code>className: 'single-view',
template: _.template(singleViewTemplate),
render: function() {
    app.log('Render: SingleView (' + this.cid + ')');

    var template = this.template();
    this.$el.html(template);
},
cleanup: function() {
    app.log('Cleanup: SingleView (' + this.cid + ')');
}
</code></pre>

<p>});
<code>
</code>javascript single-view.html template</p>

<h2>Single View</h2>


<p>```
SingleView's template contains only a title. Each time 'render()' and 'cleanup()' are called, the application logs the action.</p>

<p>```javascript NestedView view
var NestedView = Backbone.CleanupView.extend({</p>

<pre><code>className: 'nested-view',
template: _.template(nestedViewTemplate),
events: {
    'click .add-view': 'addView'
},
render: function() {
    app.log('Render: NestedView (' + this.cid + ')');

    var template = this.template();
    this.$el.html(template);
},
cleanup: function() {
    app.log('Cleanup: NestedView (' + this.cid + ')');
},
addView: function() {
    var view = new SingleView();
    this.$el.append(view.$el);
    view.render();
    this.setNestedView(view);
}
</code></pre>

<p>});
<code>
</code>javascript nested-view.html template</p>

<h2>Nested View</h2>


<p><button class="add-view">Add View</button>
```
NestedView's template contains a title and a button. Each time this button is pressed, the view creates and appends to itself a SingleView instance. In addition, by calling 'setNestedView()', the view registers the new SingleView instance to the nested views array. As in SingleView, calls to 'render()' and 'cleanup()' are logged.</p>

<p>You can see the application in action <a target="_blank" href="../code/backbone-cleanup/example/">here</a>. Try to navigate between views and add nested views in order to see in the log how 'render()' and 'cleanup()' take place in the application flow.</p>

<h2>Download &amp; GitHub &amp; Demo</h2>

<ul>
<li><a href="../code/backbone-cleanup/backbone-cleanup.zip" target="_blank">Backbone Cleanup Download</a></li>
<li><a href="https://github.com/naorye/BackboneCleanup" target="_blank">Backbone Cleanup GitHub Repository</a></li>
<li>Example application in action <a target="_blank" href="../code/backbone-cleanup/example/">here</a>.</li>
</ul>


<p>I hope you enjoyed reading this article,</p>

<p>NaorYe</p>
]]></content>
  </entry>
  
</feed>
