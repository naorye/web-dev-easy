<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Web Development is Easy!]]></title>
  <link href="http://webdeveasy.com/categories/javascript/atom.xml" rel="self"/>
  <link href="http://webdeveasy.com/"/>
  <updated>2013-01-23T23:47:01+02:00</updated>
  <id>http://webdeveasy.com/</id>
  <author>
    <name><![CDATA[NaorYe]]></name>
    <email><![CDATA[mailto:naorye@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Searcher - Backbone application demonstration]]></title>
    <link href="http://webdeveasy.com/searcher-backbone-dot-js-application-demonstration/"/>
    <updated>2013-01-23T19:03:00+02:00</updated>
    <id>http://webdeveasy.com/searcher-backbone-dot-js-application-demonstration</id>
    <content type="html"><![CDATA[<p>In this article we will build Backbone.js application along with jQuery, underscore.js and require.js. The aim of this article is to demonstrate the use of Backbone components. As we all probably know, there are more then one way to build Backbone applications so feel comfortable to adopt what you like. <br/>
At the end of this article we will have Backbone searcher application which will know to make searches using different search providers. You can see our final application in action <a href="../code/searcher/index.html" target="_blank">here</a> and can download the code <a href="../code/searcher/searcher.zip" target="_blank">here</a>.</p>

<!-- more -->


<h2>Application Loading Flow</h2>

<h3>index.html</h3>

<p>Let's begin with our application loading flow. After typing the url, the browser starts loading the index.html file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html</span> <a href='/code/searcher/index.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>	<span class="nt">&lt;head&gt;</span>
</span><span class='line'>		<span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>		<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;content-type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">/&gt;</span>		
</span><span class='line'>		<span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;js/main&quot;</span> <span class="na">src=</span><span class="s">&quot;../assets/js/libs/require.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/head&gt;</span>
</span><span class='line'>	<span class="nt">&lt;body&gt;</span>
</span><span class='line'>		<span class="nt">&lt;header&gt;</span>
</span><span class='line'>			<span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;&lt;/nav&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/header&gt;</span>
</span><span class='line'>		<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>			<span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">&quot;side-bar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>				<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;term-history&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>			<span class="nt">&lt;/aside&gt;</span>
</span><span class='line'>			<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>			<span class="nt">&lt;/section&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The index.html file contains the layout of our application which include placeholders for the search section, the history section and the search results area. It also includes reference to css file and reference to the require.js script.
When the browser loads this html file, right after loading style.css, the browser loads the require.js script. Look closely and you'll notice that require.js script tag has additional attribute called "data-main". This attribute tells require.js to load js/main.js after require.js loads.</p>

<h3>js/main.js</h3>

<p>This file contains two sections:</p>

<ul>
<li>Configuration section that configure the require.js paths and modules.</li>
<li>Initialization section that initialize the application.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/main.js</span> <a href='/code/Searcher/js/main.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>	<span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>		<span class="nx">jQuery</span><span class="o">:</span> <span class="s1">&#39;../../assets/js/libs/jquery.min&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">Underscore</span><span class="o">:</span> <span class="s1">&#39;../../assets/js/libs/underscore-min&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">Backbone</span><span class="o">:</span> <span class="s1">&#39;../../assets/js/libs/backbone&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">tooltipster</span><span class="o">:</span> <span class="s1">&#39;../../assets/js/plugins/jquery.tooltipster&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;../../assets/js/libs/text&#39;</span>
</span><span class='line'>	<span class="p">},</span>
</span><span class='line'>	<span class="nx">shim</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>		<span class="s1">&#39;jQuery&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;$&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="s1">&#39;Underscore&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;_&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="s1">&#39;Backbone&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">deps</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>				<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>				<span class="s1">&#39;jQuery&#39;</span>
</span><span class='line'>			<span class="p">],</span>
</span><span class='line'>			<span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="s1">&#39;tooltipster&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">deps</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>				<span class="s1">&#39;jQuery&#39;</span>
</span><span class='line'>			<span class="p">]</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;router&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;app&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Router</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>	<span class="nx">app</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>require.js configuration allows us to map modules paths to names. For example, jQuery.js file is located in "libs/jquery-1.8.2.min". Whenever we wish mark jQuery as a dependency, we will have to write this long path. Since jQuery is basic module and we probably use it a lot, it is better to map its path. <br/>
require.js works with <a href="http://requirejs.org/docs/whyamd.html" target="_blank">AMD modules</a>. The AMD structure tells require.js what are the dependencies and which object to return. The purpose of the shim configuration is to tell require.js for each un-AMD module what is its dependencies and which object to return. <br/>
After the configurations done, we ask require.js to load Backbone, router.js and app.js, and after that execute the initialization function. This function gets as parameters the AMD modules that require.js required to resolve and initializes the router, initializes the app and starts Backbone.history.</p>

<h3>app.js</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/app.js</span> <a href='/code/searcher/js/app.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;models/query&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;views/search&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;views/history&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/sources-manager&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;models/source&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/library-of-congress/views/grid&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/google-search-api-for-shopping/views/list&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">QueryModel</span><span class="p">,</span> <span class="nx">SearchView</span><span class="p">,</span> <span class="nx">HistoryView</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">SourcesManager</span><span class="p">,</span> <span class="nx">SourceModel</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">LocGridView</span><span class="p">,</span> <span class="nx">GoogleListView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">Application</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>	<span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Application</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>		<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">router</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueryModel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="k">this</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span>
</span><span class='line'>					<span class="s1">&#39;/search/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">),</span>
</span><span class='line'>					<span class="p">{</span><span class="nx">trigger</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>			<span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">searchView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SearchView</span><span class="p">({</span>
</span><span class='line'>				<span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">historyView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HistoryView</span><span class="p">({</span>
</span><span class='line'>				<span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SourcesManager</span><span class="p">(</span> <span class="p">{</span>
</span><span class='line'>				<span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.content&#39;</span><span class="p">,</span>
</span><span class='line'>				<span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">,</span>
</span><span class='line'>				<span class="nx">sources</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>					<span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>						<span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;library-of-congress&#39;</span><span class="p">,</span>
</span><span class='line'>						<span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Library Of Congress&#39;</span><span class="p">,</span>
</span><span class='line'>						<span class="nx">view</span><span class="o">:</span> <span class="nx">LocGridView</span>
</span><span class='line'>					<span class="p">}),</span>
</span><span class='line'>					<span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>						<span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;google-shopping&#39;</span><span class="p">,</span>
</span><span class='line'>						<span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Google Shopping&#39;</span><span class="p">,</span>
</span><span class='line'>						<span class="nx">view</span><span class="o">:</span> <span class="nx">GoogleListView</span>
</span><span class='line'>					<span class="p">})</span>
</span><span class='line'>				<span class="p">]</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">searchView</span><span class="p">.</span><span class="nx">addSources</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Lets see what app.js initialization function does:</p>

<ul>
<li>Keeps reference of the router and initializes instance of QueryModel. This appQuery instance acts as a singleton and every time it changes, the router changes the url to "search/&lt;sourceId&gt;/&lt;term&gt;" (without trigger a route event).</li>
<li>Initializes the main views of the application - SearchView and HistoryView.</li>
<li>Creates two new search sources. For each source it is necessary to know it's name, id (for internal purposes) and it's main view. Later we will discuss on the sources feature.</li>
<li>Creates sourceManager that knows manage search sources (we will discuss on it later also) and adds to it the two search sources.</li>
<li>Adds the two search sources to the search view.</li>
</ul>


<p>At this point, the application loading flow is over and now the application waits for user interaction.
In order to understand completely how everything bonds together and works, we must understand the application features and components.</p>

<h3>router.js</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/router.js</span> <a href='/code/searcher/js/router.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;app&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="s1">&#39;search/:sourceId/:term&#39;</span><span class="o">:</span> <span class="s1">&#39;searchImages&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">searchImages</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourceId</span><span class="p">,</span> <span class="nx">term</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">app</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span><span class="p">,</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">Router</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The router depends on app.js. Whenever a route in form "search/&lt;sourceId&gt;/&lt;term&gt;" is entered to the url, the router trigger the searchImages() method which changes the appQuery singleton.</p>

<h2>Application Features and Components</h2>

<p>Now it is time to review the searching, sources and the history features.</p>

<h3>Searching</h3>

<p>The main purpose of the application is to allow searching. The application makes searches among different search providers, therefore the input it gets from the user contains a search term and a search provider. So, we need a model to store this information. Actually, a single instance of this model will serve us during the entire use of the application. Each time the user makes a different search (change the search term or provider), the model instance changes. Later, those model changes will trigger the search.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/models/query.js</span> <a href='/code/searcher/js/models/query.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">QueryModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">term</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">sourceId</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">QueryModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>QueryModel has two attributes. "term" for holding the search term and "sourceId" for holding the search provider. The default value for both attributes are the empty string.</p>

<p>SearchView view creates the inputs and adds the behavior of the searching process.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/views/search.js</span> <a href='/code/searcher/js/views/search.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;text!templates/search.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">searchTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">SearchView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.search&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;click .search-button&#39;</span><span class="o">:</span> <span class="s1">&#39;setQuery&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">searchTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">searchTemplate</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">optionTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s2">&quot;&lt;option value=&#39;&lt;%= id %&gt;&#39;&gt;&lt;%= name %&gt;&lt;/option&gt;&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">applyQuery</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">setQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>		<span class="nx">applyQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">);</span>
</span><span class='line'>			
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">term</span><span class="p">);</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">sourceId</span><span class="p">);</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">searchTemplate</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.search-input&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.source-select&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">applyQuery</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">addSources</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourcesPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">sourcesPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">optionTemplate</span><span class="p">({</span>
</span><span class='line'>                    <span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">SearchView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>SearchView renders itself on initialization, and every time appQuery changes it updates the input values. On render, the view draws itself using <a href="http://www.underscore.com/#template" target="_blank">underscore templates</a> and initializes the inputs according to the appQuery. Whenever the user clicks on the search button, the view set appQuery with the new values which causing the url to change (as we saw in app.js). Notice that SearchView uses the text plugin of require.js in order to load templates/search.html. In addition, the compiled version of templates are stored in searchTemplate and in optionTemplate in order to save compilations. SearchView contains the addSource() method which gets sourceModel instance as parameter (we will see it later) and adds the new source to the sources select list.</p>

<h3>Sources</h3>

<p>As I mentioned before, the application makes searches among different search providers. The sources mechanism is responsible for defining search providers, their models and their views. This feature includes the SourcesManager view which acts as a bridge and responsible for rendering the relevant search results according to appQuery.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/sources-manager.js</span> <a href='/code/searcher/js/sources/sources-manager.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;text!templates/loading.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">loadingTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">SourcesManager</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">loadingTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">loadingTemplate</span><span class="p">),</span>
</span><span class='line'>		<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="k">this</span><span class="p">.</span><span class="nx">addSource</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceModel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">sourceId</span><span class="p">];</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">sourceModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Source &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; not found!&#39;</span><span class="p">);</span>
</span><span class='line'>				<span class="k">return</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">viewType</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;view&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">viewType</span><span class="p">({</span>
</span><span class='line'>				<span class="nx">el</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Rendering &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; with term &quot;&#39;</span><span class="o">+</span> <span class="nx">term</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">loadingTemplate</span><span class="p">());</span>
</span><span class='line'>			<span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">({</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span> <span class="p">});</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">addSource</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourceModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">sourceId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">;</span>
</span><span class='line'>			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Adding source &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; to the sources pool&#39;</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="nx">SourcesManager</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When initialized with appQuery as model, SourcesManager renders itself on appQuery change. SourceManager has the ability to add sources using the addSource() function or using the initialization "sources" option. When it renders, it resolves the search provider's view according to appQuery and renders it.
SourceManager initialization occurs inside the application initialization:
```javascript SourcesManager initialization</p>

<pre><code>this.sourcesManager = new SourcesManager( {
    el: '.content',
    model: this.appQuery,
    sources: [
        new SourceModel({
            id: 'library-of-congress',
            name: 'Library Of Congress',
            view: LocGridView
        }),
        new SourceModel({
            id: 'google-shopping',
            name: 'Google Shopping',
            view: GoogleListView
        })
    ]
});
</code></pre>

<p>```
appQuery is the SourcesManager model and the search results are rendered inside ".content" element. The search providers are also defined here using the SourceModel. Each search provider should have id, name and main view which will be displayed when selected.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/models/source.js</span> <a href='/code/searcher/js/models/source.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">SourceModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">view</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">SourceModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Google Shopping search provider</h4>

<p>Let's explore the Google Shopping search provider. It's files located under js/sources/google-search-api-for-shopping and it consist of ProductModel, ProductsCollection, products template and it's main view called ListView.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/models/product.js</span> <a href='/code/searcher/js/sources/google-search-api-for-shopping/models/product.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">define</span><span class="p">([</span> <span class="s1">&#39;Backbone&#39;</span> <span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">ProductModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">link</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">thumbnail</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">parse</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">product</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="kd">var</span> <span class="nx">product</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">product</span><span class="p">;</span>
</span><span class='line'>				<span class="nx">attrs</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">title</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>				<span class="nx">attrs</span><span class="p">.</span><span class="nx">description</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">description</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>				<span class="nx">attrs</span><span class="p">.</span><span class="nx">link</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">link</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>				
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="nx">product</span><span class="p">.</span><span class="nx">images</span> <span class="o">&amp;&amp;</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>					<span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">status</span> <span class="o">==</span> <span class="s1">&#39;available&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>					<span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span> <span class="o">&amp;&amp;</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="nx">attrs</span><span class="p">.</span><span class="nx">thumbnail</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">link</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="k">return</span> <span class="nx">attrs</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">ProductModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Each product contains title, description, link for the product and a small thumbnail. The parse method is used by Backbone in order to parse the response  of single product, when fetching the data from Google.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/collections/products.js</span> <a href='/code/searcher/js/sources/google-search-api-for-shopping/collections/products.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/google-search-api-for-shopping/models/product&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">ProductModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">ProductsCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">model</span><span class="o">:</span> <span class="nx">ProductModel</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://www.googleapis.com/shopping/search/v1/public/products&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">parse</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">items</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">ProductsCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The products collection consist of ProductModel models and the url attribute is used by Backbone fetch method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/templates/products.html</span> <a href='/code/searcher/js/sources/google-search-api-for-shopping/templates/products.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;list-table&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>	<span class="nt">&lt;thead&gt;</span>
</span><span class='line'>		<span class="nt">&lt;tr&gt;</span>
</span><span class='line'>			<span class="nt">&lt;th&gt;</span>Image<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>			<span class="nt">&lt;th&gt;</span>Description<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>	<span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>	<span class="err">&lt;</span>% _.each(products, function(product) { %&gt;
</span><span class='line'>		<span class="nt">&lt;tr&gt;</span>
</span><span class='line'>			<span class="nt">&lt;td&gt;&lt;img</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="na">src=</span><span class="s">&quot;&lt;%= product.thumbnail %&gt;&quot;</span> <span class="na">class=</span><span class="s">&quot;img-polaroid&quot;</span><span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>			<span class="nt">&lt;td&gt;</span>
</span><span class='line'>				<span class="nt">&lt;h4&gt;&lt;a</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span> <span class="na">href=</span><span class="s">&quot;&lt;%= product.link %&gt;&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= product.title %&gt;<span class="nt">&lt;/a&gt;&lt;/h4&gt;</span>
</span><span class='line'>				<span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= product.description %&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>			<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>	<span class="err">&lt;</span>% }); %&gt;
</span><span class='line'>	<span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The search results structure defined inside the products.html as a table that contains all the products. For each product, a new product row with thumbnail, title and description is created.
Search providers can contain many views. When defining the search provider in SourcesManager, we must tell which view is the main view to display. ListView is the main view of the Google Shopping search provider.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/views/list.js</span> <a href='/code/searcher/js/sources/google-search-api-for-shopping/views/list.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/google-search-api-for-shopping/collections/products&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/google-search-api-for-shopping/models/product&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;text!sources/google-search-api-for-shopping/templates/products.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">ProductsCollection</span><span class="p">,</span> <span class="nx">ProductModel</span><span class="p">,</span> <span class="nx">productsTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">ListView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">productsTemplate</span><span class="p">),</span>
</span><span class='line'>		<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">products</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProductsCollection</span><span class="p">();</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">fetch</span><span class="p">({</span>
</span><span class='line'>				<span class="nx">data</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>					<span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;AIzaSyDEMpzAwWS40E6TBjIA_XH76QfO0YSsvDc&#39;</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">country</span><span class="o">:</span> <span class="s1">&#39;US&#39;</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">fields</span><span class="o">:</span> <span class="s1">&#39;items(product(title,description,link,images(status,thumbnails(link))))&#39;</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">q</span><span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">term</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">alt</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">thumbnails</span><span class="o">:</span> <span class="s1">&#39;128:128&#39;</span>
</span><span class='line'>				<span class="p">},</span>
</span><span class='line'>				<span class="nx">success</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>					<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>						<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="nx">products</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()}));</span>
</span><span class='line'>					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>						<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;No result found!&#39;</span><span class="p">);</span>
</span><span class='line'>					<span class="p">}</span>
</span><span class='line'>				<span class="p">},</span> <span class="k">this</span><span class="p">),</span>
</span><span class='line'>				<span class="nx">error</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Error get result!!&#39;</span><span class="p">);</span>
</span><span class='line'>				<span class="p">},</span> <span class="k">this</span><span class="p">)</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">ListView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ListView initializes ProductsCollection and on render fetch it and append the results to el. In case of an error or empty results, a relevant text message appears. Behind the scenes, the fetch method uses the jQuery.ajax function and the data option is passed to it. The data option contains needed properties for the Google Shopping api. Keep in mind that in your application you will need to use yours Google api key.
Now, whenever the user chooses Google Shopping as a search provider, SourcesManager initializes ListView which fetches the results and display them inside ".content" element.</p>

<h3>History</h3>

<p>Another feature of this application is history. The application stores queries history and enables us to make searches from history. In order to store the queries history we need a collection of QueryModel:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/collections/queries.js</span> <a href='/code/searcher/js/collections/queries.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;models/query&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">QueryModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">QueriesCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">model</span><span class="o">:</span> <span class="nx">QueryModel</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">QueriesCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, in order to display the history and make each history entry clickable, There is the HistoryView:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/views/history.js</span> <a href='/code/searcher/js/views/history.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;collections/queries&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;text!templates/queries-list.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">QueriesCollection</span><span class="p">,</span> <span class="nx">queriesListTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">HistoryView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#term-history&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="s1">&#39;click a&#39;</span><span class="o">:</span> <span class="s1">&#39;setModel&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueriesCollection</span><span class="p">();</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addQuery</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">addQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">setModel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;source&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">queriesListTemplate</span><span class="p">),</span>
</span><span class='line'>		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="s1">&#39;queries&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()}));</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">HistoryView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>HistoryView gets appQuery as a model, and on initialization it creates QueriesCollection instance. Whenever the appQuery changes, the view adds it to queries collection and renders itself. Render takes the queries collection and generates the markup from the queriesListTemplate dependency. Whenever the user click on history entry, the setModel() function triggered and set appQuery with the history values. As a result of appQuery change, SourcesManager's render occurred.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Prototype]]></title>
    <link href="http://webdeveasy.com/javascript-prototype/"/>
    <updated>2012-11-13T10:49:17+02:00</updated>
    <id>http://webdeveasy.com/javascript-prototype</id>
    <content type="html"><![CDATA[<p>I bet you have seen the prototype keyword before. This prototype thing is very important to know and understand especially if you want to be an expert web developer. This article will explain you about it.</p>

<!-- more -->


<h2>Prototype-Based Language</h2>

<p>This part might confuse you a little, but believe me, after some examples coming next everything will be clear. So, stop the chit chat and let's dive into the JavaScript engine!</p>

<p>JavaScript is an object oriented language, but unlike all the <a href="http://en.wikipedia.org/wiki/Class-based_programming" target="_blank">class-based languages</a> (C++, JAVA, C#, ...), JavaScript is <a href="http://en.wikipedia.org/wiki/Prototype-based_programming" target="_blank">prototype-based language</a>. In class-based languages, we write classes which can be organized into hierarchy and so advance code reuse. In prototype-based languages, there is no distinction between classes and objects. An object is used as a template for creating a new object. In addition, an object's set of properties can be extended either at creation time or at run time. This way prototype-based language furthering code reuse. There are more differences between class-based and prototype-based languages but this is enough for now.</p>

<p>Let's instantiate a new object. In order to do it we have to define function and then simply use the "new" keyword:
```javascript Instantiate a new object</p>

<pre><code>function baseObj(name) {
    this.sayHi = function() {
        alert("Hi " + this.name);
    }
    this.name = name;
}
var ins = new baseObj("Dan");
</code></pre>

<p><code>
The baseObj() function is called Object Constructor since it creates and defines an object. Later we can call:
</code>javascript Hi Dan</p>

<pre><code>ins.sayHi(); // Alerts "Hi Dan"
</code></pre>

<p>```
We will talk about this later.</p>

<h2>JavaScript's Prototype</h2>

<p>In JavaScript, as we mentioned before, we can add properties to an object even after its creation:
``` javascript Add properties to an object</p>

<pre><code>function animal(){
    ...
    ...
}
var cat = new animal();
cat.color = "Green";
</code></pre>

<p>```
It is important to notice that the color property is added only to the cat instance. Other instances of animal will not contain the color property. But, there are times where we want to add a property to all the instances of an object. Each animal has a color and not only cats, therefore color property is relevant to all instances of animal. That's where the prototype object of JavaScript comes in.</p>

<p>In JavaScript, each object has a property called "prototype". An object's prototype allows us adding properties to all instances of that object (even to the existing instances). For example:
```javascript Add the color property to all animal instances</p>

<pre><code>var frog = new animal();
console.log(frog.color); // frog doesn't have the color property yet

animal.prototype.color = "Green";
var dog = new animal();
console.log(dog.color); // will log "Green"
console.log(frog.color); // will also log "Green"
</code></pre>

<p>```
This adds and initialize the color property to every present and future animal instances.</p>

<p>Similar to properties, we can add methods and reflects all the instances:
```javascript Add the color method to all instances</p>

<pre><code>animal.prototype.run = function() {
    console.log("I am running!");
}
dog.run(); // will log "I am running!"
</code></pre>

<p><code>
This functionality allows us to do very useful things like extending the behavior of an Array and add a method that gets an element and removes it from the array:
</code> javascript Extend Array's functionality</p>

<pre><code>Array.prototype.remove = function(elem) {
    var index = this.indexOf(elem);
    if (index &gt;= 0) {
        this.splice(index, 1);
    }
}
var arr = [1, 2, 3, 4, 5];
arr.remove(4); // will keep the array to be [1, 2, 3, 5]
</code></pre>

<p>```
In this example I used the "this" keyword inside the method. Keep in mind that "this" refer to the object that calls the method. In this example when calling arr.remove(4), "this" refer to arr and therefore this.indexOf(elem) returns the index of elem in arr.</p>

<h2>The Object Constructor Way</h2>

<p>Besides the prototype approach, another way to define properties and methods is by doing it inside the object constructor:
```javascript Define properties and methods inside the object constructor</p>

<pre><code>function animal() {
    this.color = "Green";
    this.run = function() {
        console.log("I am running!");
    }
}
var mouse = new animal();
mouse.run(); // will log "I am running!"
</code></pre>

<p>```
This code results the same object structure as the prototype approach. Each instance of animal will have the color property and the run method.</p>

<p>The main advantage of this approach is that you can make a use of local variables defined inside the object constructor:
```javascript Use local variables inside an object constructor</p>

<pre><code>function animal() {
    var runAlready = false;
    this.color = "Green";
    this.run = function() {
        if (!runAlready) {}
            console.log("I am running!");
        } else {
            console.log("I am already running!");
        }
    }
}
</code></pre>

<p>```</p>

<p>Those local variable "runAlready" is acting like private members of C# and JAVA. No one can access this variable except the object's methods.</p>

<p>This approach might seem more readable and convenient but actually is not always recommended, especially when adding many methods. If you don't need to use local variables defined inside the object constructor, then there is no reason to use this approach and using prototype is better. That is because if you are going to create lots of animals, a new set of methods will be created and held in different instances each time the animal constructor is called. In the prototype approach, all the instances will share one set of methods and therefore less memory.</p>

<p>You can also use combine approaches whereby methods that uses private local constructor variables will be defined inside the constructor while other methods will be added using the prototype:
```javascript Combined approach for extend an object's functionality</p>

<pre><code>function animal() {
    var runAlready = false;
    this.run = function() {
        if (!runAlready) {}
            console.log("I am running!");
        } else {
            console.log("I am already running!");
        }
    }
}
animal.prototype.color = "Green";
animal.prototype.hide = function() {
    console.log("I am hiding!");
}

var horse = new animal();
horse.run(); // will log "I am running!"
horse.hide(); // will log "I am hiding!"
</code></pre>

<p>```</p>

<h2>Conclusion</h2>

<p>With this article we understood the meaning of prototype-based language, we saw how we can use the prototype property in order to add properties and methods to all instances of an object. We even saw a practical example of extending Array's behavior! :) I demonstrated another way to add properties using the object constructor and explained its drawback.</p>

<p>If you wish to read more about the differences between class-based languages and prototype-based languages, dig in details about prototype and inheritance, I highly recommend to read Mozilla's <a href="https://developer.mozilla.org/en-US/docs/Core_JavaScript_1.5_Guide/Details_of_the_Object_Model" target="_blank">Details of the object model</a> guide.</p>

<p>I really enjoyed writing this article and I hope you enjoyed even more to read it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone Singleton]]></title>
    <link href="http://webdeveasy.com/backbone-singleton/"/>
    <updated>2012-11-05T19:13:36+02:00</updated>
    <id>http://webdeveasy.com/backbone-singleton</id>
    <content type="html"><![CDATA[<p>Using Backbone.js, sometimes we need a model that will act like a singleton. Other times we want to reuse the type of that singleton. This article will present two different ways of creating a singleton using Backbone.js and require.js. While the first way is simpler and more intuitive, the second allows us more flexibility</p>

<!-- more -->


<h2>Simple Singleton</h2>

<p>I am working on a little application using Backbone.js and require.js. The application lets the user making searches by a keyword. <br/>
Thinking of the model, I realized that I need a model that will hold the keyword and since the keyword is single in the application, it should be a singleton.
Because I am working with require.js, in order to simulate a singleton, I created a module that will return an instance of the Keyword model.
```javascript KeywordModel
define([</p>

<pre><code>'backbone'
</code></pre>

<p>], function( Backbone ) {</p>

<pre><code>var KeywordModel = Backbone.Model.extend({
    defaults: {
        keyword: ''
    }
});

return new KeywordModel;
</code></pre>

<p>});
```
This way whenever I need the Keyword single instance, all I have to do is just add keyword.js as a dependency:</p>

<p>``` javascript Getting the Keyword single instance
define([</p>

<pre><code>'backbone',
'models/keyword'
</code></pre>

<p>], function( Backbone, keywordModel ) {</p>

<pre><code>var SearchView = Backbone.View.extend({
    el: '#search'
    events: {
        'change': 'setModel'
    },
    initialize: function() {
        keywordModel.on( 'change: keyword', this.render, this );
    },
    render: function() {
        var keyword = keywordModel.get('keyword');
        this.$el.val(keyword);
    },
    setModel: function() {
        var keyword = this.$el.val();
        keywordModel.set({ keyword: keyword });
    }
});

return SearchView;
</code></pre>

<p>});
```
The first time require.js required to load models/keyword.js, it gets it from the server and returns a new instance of KeywordModel. The next time we ask require.js for models/keyword.js, instead of creating a new instance, require.js returns us the cached instance.</p>

<h2>Desire To Make History</h2>

<p>Now, lets assume that I want to store searches history (each history record contains only the keyword). <br/>
Obviously this means that I have to use a collection, but which model shall I use? I cannot use KeywordModel since I don't have access to its definition. Any time I'll ask for models/keyword.js all I get from require.js is the model instance and not it's definition. <br/>
One solution is to create a new model and return its definition, but this solution is undesirable since we make unnecessary duplication. <br/>
In order to solve this issue we have to remember that <a href="http://backbonejs.org/#Model-extend" target="_blank">Backbone model's extend function</a> can get an optional parameter called "classProperties". These set of properties can be seen as static properties that are related to the class and not to the instance. Therefore our model can be:
```javascript Using class properties
define([</p>

<pre><code>'backbone'
</code></pre>

<p>], function( Backbone ) {</p>

<pre><code>var KeywordModel = Backbone.Model.extend({
    defaults: {
        keyword: ''
    }
}, {
    singleton: null,
    getAppKeyword: function() {
        KeywordModel.singleton =
            KeywordModel.singleton || new KeywordModel;
        return KeywordModel.singleton;
    }
});

return KeywordModel;
</code></pre>

<p>});
<code>
And now, asking for models/keyword.js as a dependency will get us the definition which can be used to retrieve the singleton by calling KeywordModel.getAppKeyword(). Here is the collection of KeywordModel models:
</code>javascript Collection of KeywordModel models
define([</p>

<pre><code>'backbone',
'models/keyword'
</code></pre>

<p>], function( Backbone, KeywordModel ) {</p>

<pre><code>var KeywordsCollection = Backbone.Collection.extend({
    model: KeywordModel,
    initialize: function() {
        this.appKeyword = KeywordModel.getAppKeyword();
        this.appKeyword.on( 'change: keyword', this.pushCopy, this );
    },
    pushCopy: function() {
        var clone = this.appKeyword.clone();
        this.push(clone );
    }
});
return new KeywordsCollection;
</code></pre>

<p>});
```
This way, any time the model's keyword changes, a copy of the application keyword is added to the collection.</p>

<p>I hope this short article gave you another new ideas, thanks for reading!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Plugin Pattern]]></title>
    <link href="http://webdeveasy.com/jquery-plugin-pattern/"/>
    <updated>2012-10-02T22:07:46+02:00</updated>
    <id>http://webdeveasy.com/jquery-plugin-pattern</id>
    <content type="html"><![CDATA[<p>jQuery plugin is an extension to jQuery that encapsulates an ability or visual behaveiour so that it can be used later and in many different parts in a web application. This article will explain the basics of jQuery plugin and guide you how to create a simple jQuery plugin.</p>

<!-- more -->


<h2>Two jQuery Plugin Types</h2>

<p>I distinguish between two types of of jQuery plugins:</p>

<p><strong>Plugin that works on element.</strong> For example, a plugin that converts &lt;select&gt; element to an autocomplete. Such plugin is working on the select element. This kind of plugin is actually extention to the jQuery prototype (or $.fn):
```javascript Extention to $.fn
$.fn.myPlugin = function() {</p>

<pre><code>... //plugin content
</code></pre>

<p>}
<code>
Invocation of such plugins looks like:
</code>javascript Plugin invocation<br/>
$('#my-elem').myPlugin();
<code>
**Plugin that doesn't work on element.** &lt;a href="http://docs.jquery.com/Utilities" target="_blank"&gt;The utilities of jQuery&lt;/a&gt; are good examples for such plugin. They are actually functions that located in the jQuery object (or $):
</code>javascript Extention to $
$.myPlugin = function() {</p>

<pre><code>... //plugin content
</code></pre>

<p>}
<code>
Invocation of such plugins looks like:
</code>javascript Plugin invocation
$.myPlugin();
```</p>

<p>Both types of plugins can get data as input, make DOM manipulations, make calculations, let the user interact them and much more.</p>

<h2>Limit The Scope</h2>

<p>Usually when writing jQuery plugin (or any JavaScript code), it is a good idea to limit it's scope. This way you can prevent access to private variables and functions. In addition, using scopes may helping prevent naming conflicts. In order to limit the scope of jQuery plugin, wrap it with a function and invoke it. For example:</p>

<p>```javascript Plugin inside IIFE  <br/>
(function() {</p>

<pre><code>$.fn.myPlugin = function() {
    ... //plugin content
}
</code></pre>

<p>})();
```
This is called <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/" target="_blank">Immediately-Invoked Function Expression (IIFE)</a>.</p>

<h2>The Dollar Sign</h2>

<p>The dollar sign ($) is a synonym to the jQuery library. It is shorter and look better then the "jQuery" word. Because of that, there are many other libraries that make a use with the dollar sign as a synonym. So, we have to be sure our plugin doesn't collide with other libraries. Therefore passing jQuery as a parameter to the IIFE is a best practice:</p>

<p>```javascript Passing jQuery as a parameter to the IIFE   <br/>
(function($) {</p>

<pre><code>$.fn.myPlugin = function() { // Here we sure $ is jQuery
    ... // Plugin content
}
</code></pre>

<p>})(jQuery);
```</p>

<h2>Plugin Parameters and Defaults</h2>

<p>We can pass parameters to our plugin when calling it, for example:
<code>javascript Pass parameters to our plugin
$('#elem').myPlugin(param1, param2, param3);
</code>
But, sometimes our plugin will have a lot of parameters (for instance, <a href="http://www.trirand.com/blog/" target="_blank">jqGrid</a> plugin has more then 20 parameters) and some of them might be optionals. For this reason we wrap all the parameters in an object. For example, assume our plugin gets parameters "name", "address" and "color", we will define our plugin:
<code>javascript Define jQuery plugin with options
$.fn.myPlugin = function(options) { ... }
</code>
and for calling it:
```javascript Call jQuery plugin with options<br/>
$('#elem').myPlugin({</p>

<pre><code>name: 'Naor',
address: 'Jerusalem',
color: 'Green'
</code></pre>

<p>});
<code>
This way the user can supply only the parameters he wants. But this leads to another problem. What if the plugin need the color parameter which wasn't supplied? The solution is simple. All we have to do is to make a defaults to the parameters:
</code>javascript Options with defaults
(function($) {</p>

<pre><code>$.fn.myPlugin = function(options) {
    options = $.extend({
        name: 'no-name',
        address: 'none',
        color: 'white'
    }, options);
    ... // The rest of the plugin
}
</code></pre>

<p>})(jQuery);
```
This way we support many options with optional parameters. <br/>
In case we want to force the user pass some parameters, we can use the old way for the compulsory parameters and an "options" object for the optionals:</p>

<p><code>javascript Compulsory and optionals parameters
// param1 is compulsory
$.fn.myPlugin = function(param1, options) { ... }
</code></p>

<h2>The <em>this</em> Expression</h2>

<p>Inside a plugin definition the <em>this</em> expression has a different meaning between the two plugin types. I'll explain the meaning of the <em>this</em> expression using examples:</p>

<h3>The <em>this</em> expression for plugins that do not work on an element</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The "this" expression</span> <a href='/code/jquery-plugin-pattern/this-expression/this1.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="o">&lt;!</span><span class="nx">doctype</span> <span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>	<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">jQuery</span> <span class="nx">Plugins</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>			<span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="nx">$</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>					<span class="c1">// Here &lt;i&gt;this&lt;/i&gt; represents the jQuery object</span>
</span><span class='line'>					<span class="k">return</span> <span class="nx">$</span> <span class="o">===</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>				<span class="p">};</span>
</span><span class='line'>			<span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>	<span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>	<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>		<span class="nx">Is</span> <span class="o">&lt;</span><span class="nx">i</span><span class="o">&gt;</span><span class="k">this</span><span class="o">&lt;</span><span class="sr">/i&gt; equals jQuery? &lt;span id=&quot;isEqual&quot; /</span><span class="o">&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>			<span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>				<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#isEqual&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">$</span><span class="p">.</span><span class="nx">myPlugin</span><span class="p">());</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>	<span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that inside such plugin, <em>this</em> is equal to jQuery.
You can watch this example <a href="../code/jquery-plugin-pattern/this-expression/this1.html" target="_blank">here</a>.</p>

<h3>The <em>this</em> expression for plugins that do work on an element</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>The "this" expression</span> <a href='/code/jquery-plugin-pattern/this-expression/this2.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">ï»¿</span><span class="o">&lt;!</span><span class="nx">doctype</span> <span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'>	<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">jQuery</span> <span class="nx">Plugins</span><span class="o">&lt;</span><span class="err">/title&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js&quot;</span><span class="o">&gt;&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>			<span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">myPlugin</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="c1">// Here &lt;i&gt;this&lt;/i&gt; is a reference to the actaul jQuery</span>
</span><span class='line'>					<span class="c1">// element the plugin works on.</span>
</span><span class='line'>					<span class="k">this</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>						<span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>						<span class="kd">var</span> <span class="nx">elemType</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s1">&#39;tagName&#39;</span><span class="p">).</span><span class="nx">toLowerCase</span><span class="p">();</span>
</span><span class='line'>						<span class="k">switch</span><span class="p">(</span><span class="nx">elemType</span><span class="p">)</span>  <span class="p">{</span>
</span><span class='line'>							<span class="k">case</span> <span class="s1">&#39;input&#39;</span><span class="o">:</span>
</span><span class='line'>								<span class="nx">current</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>								<span class="k">break</span><span class="p">;</span>
</span><span class='line'>							<span class="k">case</span> <span class="s1">&#39;select&#39;</span><span class="o">:</span>
</span><span class='line'>								<span class="nx">current</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;option&gt;&#39;</span> <span class="o">+</span> <span class="nx">text</span> <span class="o">+</span> <span class="s1">&#39;&lt;/option&gt;&#39;</span><span class="p">);</span>
</span><span class='line'>								<span class="k">break</span><span class="p">;</span>
</span><span class='line'>							<span class="k">case</span> <span class="s1">&#39;span&#39;</span><span class="o">:</span>
</span><span class='line'>								<span class="nx">current</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>								<span class="k">break</span><span class="p">;</span>
</span><span class='line'>						<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>					<span class="p">});</span>
</span><span class='line'>				<span class="p">};</span>
</span><span class='line'>			<span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>	<span class="o">&lt;</span><span class="err">/head&gt;</span>
</span><span class='line'>	<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>			<span class="nx">Choose</span> <span class="nx">text</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;my-text&quot;</span> <span class="o">/&gt;</span>
</span><span class='line'>			<span class="o">&lt;</span><span class="nx">button</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;my-button&quot;</span><span class="o">&gt;</span><span class="nx">Press</span> <span class="nx">here</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>			<span class="nx">Span</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">span</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;target&quot;</span><span class="o">&gt;&lt;</span><span class="sr">/span&gt; &lt;br/</span><span class="o">&gt;</span>
</span><span class='line'>			<span class="nx">Text</span> <span class="nx">input</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;target&quot;</span> <span class="o">/&gt;</span> <span class="o">&lt;</span><span class="nx">br</span><span class="o">/&gt;</span>
</span><span class='line'>			<span class="nx">Select</span><span class="o">:</span> <span class="o">&lt;</span><span class="nx">select</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;target&quot;</span><span class="o">&gt;&lt;</span><span class="err">/select&gt;</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'>		<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
</span><span class='line'>			<span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>				<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#my-button&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>					<span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#my-text&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.target&#39;</span><span class="p">).</span><span class="nx">myPlugin</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>				<span class="p">});</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>		<span class="o">&lt;</span><span class="err">/script&gt;</span>
</span><span class='line'>	<span class="o">&lt;</span><span class="err">/body&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that <em>this</em> is a reference to the main element that the plugin works on. Sometimes, like in this example, the jQuery element represents more then one DOM element and we have to iterate each one of them in order to effect all of the DOM elements. In this example each DOM element is different element and so different treatment.
You can watch this example <a href="../code/jquery-plugin-pattern/this-expression/this2.html" target="_blank">here</a>.</p>

<h2>jQuery Chaining Principal</h2>

<p><strong>jQuery Chaining Principal is relevant only to plugins that do work on an element.</strong></p>

<p>Take this code for example:
```javascript jQuery without chaining</p>

<pre><code>$('#elem').addClass('active');
$('#elem').val('some value');
$('#elem').prop('disabled', true);
</code></pre>

<p><code>
This code adds css class to an element, sets its value and disables it. Instead of three different lines of code we can write:
I believe you've seen this syntax before:
</code>javascript jQuery chaining
$('#elem').addClass('active').val('some value').prop('disabled', true);
```
This looks better, easier to understand and more effective (no need to search for '#elem' a few times). This is made possible due to the jQuery chaining principal. Each jQuery method or plugin returns the element or elements that it works on:</p>

<p>```javascript jQuery chaining principal  <br/>
(function($) {</p>

<pre><code>$.fn.myPlugin = function(options) {
    ...
    ...
    return this; // This line responsible for chaining
}
</code></pre>

<p>})(jQuery);
```
Remember that inside the plugin scope, the <em>this</em> expression referenced to the element itself.</p>

<h2>User Interface</h2>

<p>Up to now we saw a plugin structure wrapped in IIFE, with $ as jQuery and with compulsory/optional parameters. We undertsood the <em>this</em> expression inside a plugin and saw the chaining principal in action. Now we need to see how to create an interface so the user can interact with the plugin. I'll do it separately for each plugin type.</p>

<h3>Plugin that doesn't work on element</h3>

<p>The first plugin doesn't work on element, it gets positions and a text as parameters and displays the text on the specified position:
```javascript float plugin</p>

<pre><code>(function($) {
    $.float = function(posX, posY, text) {
        $('&lt;div&gt;'+text+'&lt;/div&gt;').appendTo('body').css({
            left: posX,
            top: posY,
            position: 'absolute'
        });
    }   
})(jQuery);
</code></pre>

<p><code>
Now we want to allow the user to move the text to a new position and to remove it. Let's write methods:
</code>javascript changePosition() and remove() methods<br/>
(function($) {</p>

<pre><code>function changePosition(elem, posX, posY) {
    elem.css({
        left: posX,
        top: posY
    });
}

function remove(elem) {
    elem.remove();
}

$.float = function(posX, posY, text) {
    $('&lt;div&gt;'+text+'&lt;/div&gt;').appendTo('body').css({
        left: posX,
        top: posY,
        position: 'absolute'
    });
}   
</code></pre>

<p>})(jQuery);
<code>
Notice that the user doesn't have an access to "changePosition" nor "remove" and he never holds the &amp;lt;div&amp;gt; element. So now we need to connect the user to the methods. In order to do it we make the "float" plugin return a "remote control" object:
</code>javascript jQuery plugin returns "remote control" object
(function($) {</p>

<pre><code>function changePosition(elem, posX, posY) {
    elem.css({
        left: posX,
        top: posY
    });
}

function remove(elem) {
    elem.remove();
}

$.float = function(posX, posY, text) {
    var elem = $('&lt;div&gt;'+text+'&lt;/div&gt;').appendTo('body').css({
        left: posX,
        top: posY,
        position: 'absolute'
    });

    return {
        changePosition: function(posX, posY) {
            changePosition(elem, posX, posY);
        },
        remove: function() { remove(elem); }
    };
}   
</code></pre>

<p>})(jQuery);
<code>
Now, whenever the user will invoke $.float(..) he will get a "remote control" object with the interface we want to provide, and in order to use it:
</code>javascript Interact with a plugin
var control = $.float('100px', '100px', 'Hello!');
control.changePosition('200px', '200px');
```
Live example for the float plugin you can find <a href="../code/jquery-plugin-pattern/float-plugin/float.html" target="_blank">here</a>.</p>

<h3>Plugin that does work on element</h3>

<p>The second plugin does work on element. It works on an &lt;input&gt; element and gets two parameters: &lt;ul&gt; selector and a number "N". Whenever the input's value changes, the &lt;ul&gt; gets filled with "N" items containing the value:</p>

<p>```javascript Compose plugin
(function($) {</p>

<pre><code>$.fn.compose = function(options) {
    options = $.extend({
        number: 2,
        ul: null
    }, options);

    this.change(function() {
        if (options.ul !== null) {
            var value = $(this).val();
            var ul = $(options.ul).empty();
            for(var i=0;i&lt;options.number;i++) {
                ul.append('&lt;li&gt;' + value + '&lt;/li&gt;')
            }           
        }
    });

    return this;
}
</code></pre>

<p>})(jQuery);
<code>
Now we want to allow the user to change the number parameter "N". Again, let's write a method for changing the parameter:
</code>javascript setNumber() method
(function($) {</p>

<pre><code>$.fn.compose = function(options) {
    options = $.extend({
        number: 2,
        ul: null
    }, options);

    function setNumber(number) {
        options.number = number;
    }

    this.change(function() {
        if (options.ul !== null) {
            var value = $(this).val();
            var ul = $(options.ul).empty();
            for(var i=0;i&lt;options.number;i++) {
                ul.append('&lt;li&gt;' + value + '&lt;/li&gt;')
            }           
        }
    });

    return this;
}
</code></pre>

<p>})(jQuery);
<code>
Like the former plugin example, the user doesn't have an access to "setNumber" method. Unlike the former plugin example, here we cannot return a "remote control" object. Due to jQuery chaining principal we have to return *this*. For solving this we use &lt;a href="http://api.jquery.com/jQuery.data/" target="_blank"&gt;jQuery.data()&lt;/a&gt; method. This method allows us attach key-value data to an element. For example, $('#elem').data('my-color', 'Green'); attaches the "my-color = Green" key-value to the element. In order to get the value of "my-color" all we have to do is: $('#elem').data('my-color') and we get "Green".
So we use the jQuery.data() method to attach the "remote control" object to the element, and as a key we use the name of the plugin "compose":
</code>javascript jQuery plugin returns "remote control" object
(function($) {</p>

<pre><code>$.fn.compose = function(options) {
    options = $.extend({
        number: 2,
        ul: null
    }, options);

    function setNumber(number) {
        options.number = number;
    }

    this.change(function() {
        if (options.ul !== null) {
            var value = $(this).val();
            var ul = $(options.ul).empty();
            for(var i=0;i&lt;options.number;i++) {
                ul.append('&lt;li&gt;' + value + '&lt;/li&gt;')
            }           
        }
    });

    this.data('compose', {
        setNumber: setNumber
    });

    return this;
}
</code></pre>

<p>})(jQuery);
<code>
Now, in order to change the number:
</code>javascript Interact with a plugin
$('#elem').compose({</p>

<pre><code>number: 3,
ul: '#ul'
</code></pre>

<p>});</p>

<p>$('#elem').data('compose').setNumber(8);
```
And then the input's value will appear 8 times.
Live example for the compose plugin you can find <a href="../code/jquery-plugin-pattern/compose-plugin/compose.html" target="_blank">here</a>.</p>

<h2>Summary</h2>

<p>In this article I presented two jQuery plugin types and their structure (IIFE wrap and jQuery injection as $), I explained how to add compulsory and optional parameters, demonstrated the meaning of the <em>this</em> expression and described the jQuery chaining principal. At the end I also presented a way of letting the user interact the plugins.</p>

<h3>Template of plugin that does not work on an element</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Template of plugin that does not work on an element</span> <a href='/code/jquery-plugin-pattern/templates/plugin-template-1.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">jQuery</span> <span class="nt">plugin</span> <span class="nt">template</span> <span class="nt">for</span> <span class="nt">plugin</span> <span class="nt">that</span> <span class="nt">does</span> <span class="nt">not</span> <span class="nt">work</span> <span class="nt">on</span> <span class="nt">element</span>
</span><span class='line'><span class="o">(</span><span class="nt">function</span><span class="o">(</span><span class="err">$</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="err">$</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="err">$</span><span class="o">,</span> <span class="err">{</span>
</span><span class='line'>		<span class="n">pluginName</span><span class="o">:</span> <span class="n">function</span><span class="p">(</span><span class="n">param</span><span class="o">,</span> <span class="n">options</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>			<span class="n">options</span> <span class="o">=</span> <span class="err">$</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="err">{</span>
</span><span class='line'>				<span class="o">//</span> <span class="n">Options</span> <span class="n">Defaults</span>
</span><span class='line'>			<span class="p">}</span><span class="o">,</span> <span class="nt">options</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="o">//</span> <span class="nt">Plugin</span> <span class="nt">content</span>
</span><span class='line'>		
</span><span class='line'>			<span class="nt">return</span> <span class="p">{</span>
</span><span class='line'>				<span class="o">//</span> <span class="n">Plugin</span> <span class="n">interface</span> <span class="n">object</span>
</span><span class='line'>			<span class="p">}</span><span class="o">;</span>
</span><span class='line'>		<span class="err">}</span>
</span><span class='line'>	<span class="err">}</span><span class="o">);</span>
</span><span class='line'><span class="err">}</span><span class="o">)(</span><span class="nt">jQuery</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Template of plugin that does work on an element</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Template of plugin that does not work on an element</span> <a href='/code/jquery-plugin-pattern/templates/plugin-template-2.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">jQuery</span> <span class="nt">plugin</span> <span class="nt">template</span> <span class="nt">for</span> <span class="nt">plugin</span> <span class="nt">that</span> <span class="nt">does</span> <span class="nt">work</span> <span class="nt">on</span> <span class="nt">element</span>
</span><span class='line'><span class="o">(</span><span class="nt">function</span><span class="o">(</span><span class="err">$</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="err">$</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="err">$</span><span class="o">.</span><span class="n">fn</span><span class="o">,</span> <span class="err">{</span>
</span><span class='line'>		<span class="n">pluginName</span><span class="o">:</span> <span class="n">function</span><span class="p">(</span><span class="n">param</span><span class="o">,</span> <span class="n">options</span><span class="p">)</span> <span class="err">{</span>
</span><span class='line'>			<span class="n">options</span> <span class="o">=</span> <span class="err">$</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="err">{</span>
</span><span class='line'>				<span class="o">//</span> <span class="n">Options</span> <span class="n">Defaults</span>
</span><span class='line'>			<span class="p">}</span><span class="o">,</span> <span class="nt">options</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="nt">this</span><span class="nc">.each</span><span class="o">(</span><span class="nt">function</span><span class="o">()</span> <span class="p">{</span>
</span><span class='line'>				<span class="o">//</span> <span class="n">Operations</span> <span class="n">for</span> <span class="n">each</span> <span class="n">DOM</span> <span class="n">element</span>
</span><span class='line'>			<span class="p">}</span><span class="o">)</span><span class="nc">.data</span><span class="o">(</span><span class="s1">&#39;pluginName&#39;</span><span class="o">,</span> <span class="p">{</span>
</span><span class='line'>				<span class="o">//</span> <span class="n">Plugin</span> <span class="n">interface</span> <span class="n">object</span>
</span><span class='line'>			<span class="p">}</span><span class="o">);</span>
</span><span class='line'>		
</span><span class='line'>			<span class="nt">return</span> <span class="nt">this</span><span class="o">;</span>
</span><span class='line'>		<span class="err">}</span>
</span><span class='line'>	<span class="err">}</span><span class="o">);</span>
</span><span class='line'><span class="err">}</span><span class="o">)(</span><span class="nt">jQuery</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Demo &amp; Download</h2>

<ul>
<li>Live example for the float plugin you can find <a href="../code/jquery-plugin-pattern/float-plugin/float.html" target="_blank">here</a>.</li>
<li>Live example for the compose plugin you can find <a href="../code/jquery-plugin-pattern/compose-plugin/compose.html" target="_blank">here</a>.</li>
<li><a href="../code/jquery-plugin-pattern/jquery-plugin-pattern.zip" target="_blank">Here</a> you can find all the examples of this post and the plugins templates.</li>
</ul>


<p>I hope you find this post useful, and if you have any question, don't hesitate to ask!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cascading Autocompletes using jQuery UI]]></title>
    <link href="http://webdeveasy.com/cascading-autocompletes-using-jquery-ui/"/>
    <updated>2012-09-14T18:34:42+03:00</updated>
    <id>http://webdeveasy.com/cascading-autocompletes-using-jquery-ui</id>
    <content type="html"><![CDATA[<p>Yesterday I got a new requirement for the application I am working on.
I had several <a href="http://jqueryui.com/demos/autocomplete" target="_blank">jQuery UI autocompletes</a> and I needed to add cascading functionality. This means that each autocomplete in the group affects the following autocomple's possible values. If there is no value selected in the first autocomplete - the next autocomplete must be disabled. When the user selects a value on the first autocomplete - the next autocomplete becomes enabled.</p>

<!-- more -->


<p>After searching the web I realized that the best option for me is to write my own jQuery plugin that manages the autocompletes cascading.
The plugin gets as input a sequence of jQuery UI auocomplete elements and adds the cascading functionality. The idea under my plugin is to override each autocomplete's change and select events, and enable or disable the next autocomplete in the sequence according to the selected value.</p>

<p>Here is the code:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Cascading Autocompletes plugin</span> <a href='/code/cascading-autocompletes-plugin/jquery.cascading-autocompletes.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">activateChild</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">child</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;enable&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">deactivateChild</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">child</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;disable&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">subChild</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;cascade-child&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">subChild</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">deactivateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">subChild</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">eventOverride</span><span class="p">(</span><span class="nx">originalEvent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">isChildActivate</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">ui</span><span class="p">.</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="nx">isChildActivate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">deactivateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">ui</span><span class="p">.</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isChildActivate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">activateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">originalEvent</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">originalEvent</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">cascade</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">child</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">originalChange</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;change&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">originalSelect</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;select&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">parent</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;cascade-child&quot;</span><span class="p">,</span> <span class="nx">child</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="nx">eventOverride</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">originalChange</span><span class="p">));</span>
</span><span class='line'>            <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;select&quot;</span><span class="p">,</span> <span class="nx">eventOverride</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">originalSelect</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">deactivateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">cascadingAutocompletes</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">autocompletes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">autocompletes</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">autocompletes</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="nx">autocompletes</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">cascade</span><span class="p">(</span><span class="nx">autocompletes</span><span class="p">[</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Usage example:</p>

<p>``` javascript Cascading Autocompletes plugin Usage</p>

<pre><code>$.cascadingAutocompletes(["#country", "#city", "#street"]);
</code></pre>

<p>```</p>

<h2>Demo &amp; Download</h2>

<ul>
<li><a href="/code/cascading-autocompletes-plugin/index.html" target="_blank">Demo Here</a>.</li>
<li><a href="/code/cascading-autocompletes-plugin/cascading-autocompletes-plugin.zip" target="_blank">Download code here</a>.</li>
</ul>


<p>Hope this helps!</p>
]]></content>
  </entry>
  
</feed>
