<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Web Development is Easy!]]></title>
  <link href="http://naorye.github.com/web-dev-easy/categories/javascript/atom.xml" rel="self"/>
  <link href="http://naorye.github.com/web-dev-easy/"/>
  <updated>2013-01-12T22:51:51+02:00</updated>
  <id>http://naorye.github.com/web-dev-easy/</id>
  <author>
    <name><![CDATA[NaorYe]]></name>
    <email><![CDATA[mailto:naorye@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript Prototype]]></title>
    <link href="http://naorye.github.com/web-dev-easy/javascript-prototype/"/>
    <updated>2012-11-13T10:49:17+02:00</updated>
    <id>http://naorye.github.com/web-dev-easy/javascript-prototype</id>
    <content type="html"><![CDATA[<p>I bet you have seen the prototype keyword before. This prototype thing is very important to know and understand especially if you want to be an expert web developers. This article will explain you about it.</p>

<!-- more -->


<h2>Prototype-Based Language</h2>

<p>This part might confuse you a little but believe me that after some examples coming next everything will be clear. So, stop the chit chat and let's dive into the JavaScript engine!</p>

<p>JavaScript is an object oriented language, but unlike all the <a href="http://en.wikipedia.org/wiki/Class-based_programming">class-based languages</a> (C++, JAVA, C#, ...) JavaScript is <a href="http://en.wikipedia.org/wiki/Prototype-based_programming">prototype-based language</a>. In class-based languages we write classes which can be organized into hierarchy and so advance code reuse. In prototype-based languages there is no distinction between classes and objects. An object is used as a template for creating a new object. In addition, an object's set of properties can be extended either at creation time or at run time. This way prototype-based language furthering code reuse. There are more differences between class-based and prototype-based languages but this is enough for now.</p>

<p>Let's instantiate a new object. In order to do it we have to define an object constructor and then simply use the "new" keyword:</p>

<pre><code>function baseObj() {
}
var ins = new baseObj();
</code></pre>

<h2>JavaScript's Prototype</h2>

<p>In JavaScript, as we mentioned before, we can add properties to an object even after its creation:</p>

<pre><code>function animal(){
}
var cat = new animal();
cat.color = "Green";
</code></pre>

<p>It is important to notice that the color property is added only to the cat instance. Other instances of animal will not contain the color property. But, there are times where we want to add a property to all the instances of an object. Each animal has a color and not only cats, therefore color property is relevant to all instances of animal. That's where the prototype object of JavaScript comes in.</p>

<p>In JavaScript, each object has a property called "prototype". An object's prototype allows us adding properties to all instances of that object. For example:</p>

<pre><code>var frog = new animal();
console.log(frog.color); // frog doesn't have color yet

animal.prototype.color = "Green";
var dog = new animal();
console.log(dog.color); // will log "Green"
console.log(frog.color); // will log also "Green"
</code></pre>

<p>This adds and initialize the color property to every present and future animal instances.</p>

<p>Similar to properties, we can add methods and reflects all the instances:</p>

<pre><code>animal.prototype.run = function() {
    console.log("I am running!");
}
dog.run(); // will log "I am running!"
</code></pre>

<p>This functionality allows us to do very useful things like extending the behavior of an Array and add a method that gets an element and removes it from the array:</p>

<pre><code>Array.prototype.remove = function(elem) {
    var index = this.indexOf(elem);
    if (index &gt;= 0) {
        this.splice(index, 1);
    }
}
var arr = [1, 2, 3, 4, 5];
arr.remove(4); // will keep the array to be [1, 2, 3, 5]
</code></pre>

<p>In this example I used the "this" keyword inside the method. Keep in mind that "this" refer to the object that calls the method. In this example when calling arr.remove(4), "this" refer to arr.</p>

<h2>The Object Constructor Way</h2>

<p>Besides the prototype approach, another way to define properties and methods is by doing it inside the object constructor:</p>

<pre><code>function animal() {
    this.color = "Green";
    this.run = function() {
        console.log("I am running!");
    }
}
var mouse = new animal();
mouse.run(); // will log "I am running!"
</code></pre>

<p>This code results the same object structure as the prototype approach. Each instance of animal will have the color property and the run method.</p>

<p>This approach might seem more readable and convenient but actually is not always recommended, especially when adding many methods. The main advantage of this approach is that you can make a use of local variables defined inside the object constructor:</p>

<pre><code>function animal() {
    var runAlready = false;
    this.color = "Green";
    this.run = function() {
        if (!runAlready) {}
            console.log("I am running!");
        } else {
            console.log("I am tired!");
        }
    }
}
</code></pre>

<p>If you don't need to use local variables defined inside the object constructor, then there is no reason to use this approach and using prototype is better. That is because if you are going to create lots of animals, a new set of methods will be created and held in different instance each time the animal constructor is called. In the prototype approach, all the instances will share one set of methods and therefore less memory.</p>

<p>You can also use combined approach whereby methods that uses private local constructor variables are defined inside the constructor while other methods are added using the prototype:</p>

<pre><code>function animal() {
    var runAlready = false;
    this.run = function() {
        if (!runAlready) {}
            console.log("I am running!");
        } else {
            console.log("I am tired!");
        }
    }
}
animal.prototype.color = "Green";
animal.prototype.hide = function() {
    console.log("I am hiding!");
}

var horse = new animal();
horse.run(); // will log "I am running!"
horse.hide(); // will log "I am hiding!"
</code></pre>

<h2>Conclusion</h2>

<p>With this article we understood the meaning of prototype-based language, we saw how we can use the prototype property in order to add properties and methods to all instances of an object. We even saw a practical example of extending Array's behavior! :) I demonstrated another way to add properties using the object constructor and explained its drawback.</p>

<p>If you wish to read more about the differences between class-based languages and prototype-based languages, dig in details about prototype and inheritance, I highly recommend to read Mozilla's <a href="https://developer.mozilla.org/en-US/docs/Core_JavaScript_1.5_Guide/Details_of_the_Object_Model">"Details of the object model"</a> guide.</p>

<p>I really enjoyed writing this article and I hope you enjoyed even more to read it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone Singleton]]></title>
    <link href="http://naorye.github.com/web-dev-easy/backbone-singleton/"/>
    <updated>2012-11-05T19:13:36+02:00</updated>
    <id>http://naorye.github.com/web-dev-easy/backbone-singleton</id>
    <content type="html"><![CDATA[<p><strong>Sometimes we need a model that will act like a singleton. Other times we want to reuse the type of that singleton. This article will present two different ways of creating a singleton using Backbone and RequieJS. While the first way is simpler and more intuitive, the second allows us more flexibility.</strong></p>

<!-- more -->


<h2>Simple Singleton:</h2>

<p>I am working on a little application using Backbone.js and RequireJS. The application lets the user making searches by a keyword.
Thinking of the model, I realized that I need a model that will hold the keyword and since the keyword is single in the application, it should be a singleton.
Because I am working with RequireJS, in order to simulate a singleton, I created a module that will return an instance of the Keword model.</p>

<pre><code>define([ 'backbone' ], function( Backbone ) {
    var KeywordModel = Backbone.Model.extend({
        defaults: {
            keyword: ''
        }
    });

    return new KeywordModel;
});
</code></pre>

<p>This way whenever I want to bind the Keyword single instance, all I have to do is just add keyword.js as a dependency:</p>

<pre><code>define([
    'backbone',
    'models/keyword'
], function( Backbone, keywordModel ) {
    var SearchView = Backbone.View.extend({
        el: '#search'
        events: {
            'change': 'setModel'
        },
        initialize: function() {
            keywordModel.on( 'change: keyword', this.render, this );
        },
        render: function() {
            var keyword = keywordModel.get('keyword');
            this.$el.val(keyword);
        },
        setModel: function() {
            var keyword = this.$el.val();
            keywordModel.set({ keyword: keyword });
        }
    });

    return SearchView;
});
</code></pre>

<h2>Desire to make history:</h2>

<p>Now, lets assume that now I want to store searches history (each history record contains only the keyword).
Obviously this means that I have to use a collection, but which model shall I use? I cannot use KeywordModel since I don't have access to its definition. Any time I'll ask for keyword.js all I get is the model instance and not it's definition.
One solution is to create a new model and return its definition, but this solution is undesirable since we make unnecessary duplication.
In order to solve this issue we have to remember that <a href="http://backbonejs.org/#Model-extend">Backbone model's extend function</a> can get an optional property called "classProperties". These set of properties can be seen as static properties that are related to the class and not to the instance. Therefore our model can be:</p>

<pre><code>define([ 'backbone' ], function( Backbone ) {
    var KeywordModel = Backbone.Model.extend({
        defaults: {
            keyword: ''
        }
    }, {
        singleton: null,
        getAppKeyword: function() {
            KeywordModel.singleton =
                KeywordModel.singleton || new KeywordModel;
            return KeywordModel.singleton;
        }
    });

    return KeywordModel;
});
</code></pre>

<p>And in this way, if I add keyword.js as a dependency I get the definition and also can retrieve the singleton by calling KeywordModel.getAppKeyword(). Here is the collection of KeywordModel models:</p>

<pre><code>define([
    'backbone',
    'models/keyword'
], function( Backbone, KeywordModel ) {
    var KeywordsCollection = Backbone.Collection.extend({
        model: KeywordModel,
        initialize: function() {
            this.appKeyword = KeywordModel.getAppKeyword();
            appKeyword.on( 'change: keyword', this.pushCopy, this );
        },
        pushCopy: function() {
            var clone = this.appKeyword.clone();
            this.push(clone );
        }
    });
    return new KeywordsCollection;
});
</code></pre>

<p>Any time the model's keyword changes, a copy of the application keyword is added to the collection.</p>

<p><strong>Thanks for reading!</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[jQuery Plugin Pattern]]></title>
    <link href="http://naorye.github.com/web-dev-easy/jquery-plugin-pattern/"/>
    <updated>2012-10-02T22:07:46+02:00</updated>
    <id>http://naorye.github.com/web-dev-easy/jquery-plugin-pattern</id>
    <content type="html"><![CDATA[<p>jQuery plugin is an extension to jQuery that encapsulates an ability or visual behaveiour so that it can be used later and in many different parts of your web application. This article will explain the basics of jQuery plugin and guide you how to create a simple jQuery plugin.</p>

<!-- more -->


<p>I distinguish between two types of of jQuery plugins:</p>

<ul>
<li><p>Plugin that works on element. For example, a plugin that converts <select> element to an autocomplete. Such plugin is working on the select element. This kind of plugin is actually extention to the jQuery prototype (or $.fn):</p>

<p>$.fn.myPlugin = function() {</p>

<pre><code>... //plugin content
</code></pre>

<p>}</p></li>
</ul>


<p> Invocation of such plugins looks like:</p>

<pre><code>$('#my-elem').myPlugin();
</code></pre>

<ul>
<li><p>Plugin that doesn't work on element. <a href="http://docs.jquery.com/Utilities">The utilities of jQuery</a> are good examples for such plugin. They are actually functions that located in the jQuery object (or $):</p>

<p>$.myPlugin = function() {</p>

<pre><code>... //plugin content
</code></pre>

<p>}</p></li>
</ul>


<p>Invocation of such plugins looks like:</p>

<pre><code>$.myPlugin();
</code></pre>

<p>Both types of plugins can get data as input, make DOM manipulation, make calculations, let the consumer interact them and much more.</p>

<h2>Limit The Scope</h2>

<p>Usually when writing jQuery plugin (or any JavaScript code), it is a good idea to limit it's scope. This way you can prevent access to private variables and functions. In addition, using scopes may helping prevent naming conflicts. In order to limit the scope of your jQuery plugin, wrap it with a function and invoke it. For example:</p>

<pre><code>(function() {
    $.fn.myPlugin = function() {
        ... //plugin content
    }
})();
</code></pre>

<p>This is called <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">Immediately-Invoked Function Expression (IIFE)</a>.</p>

<h2>The Dollar Sign</h2>

<p>The dollar sign ($) is a synonym to the jQuery library. It is shorter and look better then the "jQuery" word. Because of that, there are many other libraries that make a use the dollar sign as a synonym. So, we have to be sure our plugin doesn't collide with other libraries. Therefore passing jQuery as a parameter to the IIFE is a best practice:</p>

<pre><code>(function($) {
    $.fn.myPlugin = function() { // Here we sure $ is jQuery
        ... // Plugin content
    }
})(jQuery);
</code></pre>

<h2>Plugin Parameters and Defaults</h2>

<p>We can pass parameters to our plugin when calling it:
$('#elem').myPlugin(param1, param2, param3);
But, sometimes our plugin will have a lot of parameters (<a href="http://www.trirand.com/blog/">jqGrid</a> plugin has more then 20) and some of them might be optionals. For this reason we wrap all the parameters in an object. For example, assume our plugin gets parameters "name", "address" and "color", we will define our plugin:</p>

<pre><code>$.fn.myPlugin = function(options) { ... }
</code></pre>

<p>and for calling it:</p>

<pre><code>$('#elem').myPlugin( {
    name: 'Naor',
    address: 'Jerusalem',
    color: 'Green'
} );
</code></pre>

<p>This way the consumer can supply only the parameters she wants. But this leads to another problem. What if the plugin need the color parameter which wasn't supplied? The solution is simple. All we have to do is to make a defaults to the parameters:</p>

<pre><code>(function($) {
    $.fn.myPlugin = function(options) {
        options = $.extend({
            name: 'no-name',
            address: 'none',
            color: 'white'
        }, options);
        ... // The rest of the plugin
    }
})(jQuery);
</code></pre>

<p>This way we support many options with optional parameters. In case we want to force the consumer pass some parameters, we can use the old way for the compulsory parameters and an "options" object for the optionals:</p>

<pre><code>// param1 is compulsory
$.fn.myPlugin = function(param1, options) { ... }
</code></pre>

<h2>The <em>this</em> Expression</h2>

<p>Inside a plugin definition there is a different meaning to the <em>this</em> expression. There is a difference between the two plugin types and I will explain the meaning of the <em>this</em> expression using examples:</p>

<h3>The <em>this</em> Expression for plugins that do not work on an element</h3>

<pre><code>﻿&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt; 
        &lt;title&gt;jQuery Plugins&lt;/title&gt;
        &lt;script type="text/javascript" src="jquery-1.8.0.min.js"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
            (function($) {
                $.myPlugin = function() {
                    // Here this represents the jQuery object
                    return $ === this;
                };
            })(jQuery);
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        Is &lt;i&gt;this&lt;/i&gt; equals jQuery? &lt;span id="isEqual" /&gt;
        &lt;script type="text/javascript"&gt;
            $(function() {
                $('#isEqual').text($.myPlugin());
            });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Notice that inside a plugin, <em>this</em> is equal to jQuery.
You can watch this example <a href="http://www.webdeveasy.com/demos/jquery-plugin-pattern/this1.htm">here</a>.</p>

<h3>The <em>this</em> Expression for plugins that do work on an element</h3>

<pre><code>﻿&lt;!doctype html&gt;
&lt;html&gt;
    &lt;head&gt; 
        &lt;title&gt;jQuery Plugins&lt;/title&gt;
        &lt;script type="text/javascript" src="jquery-1.8.0.min.js"&gt;&lt;/script&gt;
        &lt;script type="text/javascript"&gt;
            (function($) {
                $.fn.myPlugin = function(text) {
                    // Here this is a reference to the actaul jQuery
                    // element the plugin works on.
                    this.each(function() {
                        var current = $(this);
                        var elemType = current.prop('tagName').toLowerCase();
                        switch(elemType)  {
                            case 'input':
                                current.val(text);
                                break;
                            case 'select':
                                current.empty().append('&lt;option&gt;' + text + '&lt;/option&gt;');
                                break;
                            case 'span':
                                current.text(text);
                                break;
                        }

                    });
                };
            })(jQuery);
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        Choose text: &lt;input type="text" id="my-text" /&gt;
        &lt;button id="my-button"&gt;Press here&lt;/button&gt;
        &lt;br/&gt;
        Span: &lt;span class="target"&gt;&lt;/span&gt; &lt;br/&gt;
        Text input: &lt;input type="text" class="target" /&gt; &lt;br/&gt;
        Select: &lt;select class="target"&gt;&lt;/select&gt;
        &lt;script type="text/javascript"&gt;
            $(function() {
                $('#my-button').click(function() {
                    var text = $('#my-text').val();
                    $('.target').myPlugin(text);
                });
            });
        &lt;/script&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Notice that <em>this</em> is a reference to the main element that the plugin works on. Sometimes, like in this example, the jQuery element represents more then one DOM element and we have to iterate each one of them in order to effect all of the DOM elements. In this example each DOM element is different element and so different treatment.
You can watch this example <a href="http://www.webdeveasy.com/demos/jquery-plugin-pattern/this2.htm">here</a>.</p>

<h2>jQuery Chaining Principal</h2>

<p><strong>jQuery Chaining Principal is relevant only to plugins that do work on an element.</strong>
I believe you've seen this syntax before:</p>

<pre><code>$('#elem').addClass('active').val('some value').prop('disabled', true);
</code></pre>

<p>Keep in mind that the consumer can actually write:</p>

<pre><code>$('#elem').addClass('active');
$('#elem').val('some value');
$('#elem').prop('disabled', true);
</code></pre>

<p>But the first syntax looks better, easier to understand and more effective (no need to search for '#elem' a few times). This is made possible due to the jQuery chaining principal. Each jQuery method or plugin returns the element that it works on:</p>

<pre><code>(function($) {
    $.fn.myPlugin = function(options) {
        ...
        ...
        &lt;b&gt;return this;&lt;/b&gt;
    }
})(jQuery);
</code></pre>

<p>Keep in mind that inside the plugin scope, the <em>this</em> expression referenced to the element itself.</p>

<h2>Consumer interface</h2>

<p>Up to now we saw a plugin structure wrapped in IIFE, with $ as jQuery and with compulsory/optional parameters. We undertsood the <em>this</em> expression inside a plugin and saw the chaining principal in action. Now we need to see how to create an interface so the consumer can interact with the plugin. I'll do it separately for each plugin type.</p>

<h3>Plugin that doesn't work on element</h3>

<p>The first plugin doesn't work on element, it gets positions and a text as parameters and displays the text on the specified position:</p>

<pre><code>(function($) {
    $.float = function(posX, posY, text) {
        $('&lt;div&gt;'+text+'&lt;/div&gt;').appendTo('body').css({
            left: posX,
            top: posY,
            position: 'absolute'
        });
    }   
})(jQuery);
</code></pre>

<p>Now we want to allow the consumer to move the text to a new position and to remove it. Let's write a methods:</p>

<pre><code>(function($) {
    function changePosition(elem, posX, posY) {
        elem.css({
            left: posX,
            top: posY
        });
    }

    function remove(elem) {
        elem.remove();
    }

    $.float = function(posX, posY, text) {
        $('&lt;div&gt;'+text+'&lt;/div&gt;').appendTo('body').css({
            left: posX,
            top: posY,
            position: 'absolute'
        });
    }   
})(jQuery);
</code></pre>

<p>Notice that the consumer doesn't have an access to "changePosition" nor "remove" and she never holds the <div> element. So now we need to connect the consumer to the methods. In order to do it we make the "float" plugin return a "remote control" object:</p>

<pre><code>(function($) {
    function changePosition(elem, posX, posY) {
        elem.css({
            left: posX,
            top: posY
        });
    }

    function remove(elem) {
        elem.remove();
    }

    $.float = function(posX, posY, text) {
        var elem = $('&lt;div&gt;'+text+'&lt;/div&gt;').appendTo('body').css({
            left: posX,
            top: posY,
            position: 'absolute'
        });

        return {
            changePosition: function(posX, posY) {
                changePosition(elem, posX, posY);
            },
            remove: function() { remove(elem); }
        };
    }   
})(jQuery);
</code></pre>

<p>Now, whenever the consumer will invoke $.float(..) she will get a "remote control" object with the interface we want to provide, and in order to use it:</p>

<pre><code>var control = $.float('100px', '100px', 'Hello!');
control.changePosition('200px', '200px');
</code></pre>

<p>Live example for the float plugin you can find <a href="http://www.webdeveasy.com/demos/jquery-plugin-pattern/float.htm">here</a>.</p>

<h3>Plugin that does work on element</h3>

<p>The second plugin does work on element. It works on an <input> element and gets two parameters: <ul> selector and a number "N". Whenever the input's value changes, the <ul> gets filled with "N" items containing the value:</p>

<pre><code>(function($) {
    $.fn.compose = function(options) {
        options = $.extend({
            number: 2,
            ul: null
        }, options);

        this.change(function() {
            if (options.ul !== null) {
                var value = $(this).val();
                var ul = $(options.ul).empty();
                for(var i=0;i&lt;options.number;i++) {
                    ul.append('&lt;li&gt;' + value + '&lt;/li&gt;')
                }           
            }
        });

        return this;
    }
})(jQuery);
</code></pre>

<p>Now we want to allow the consumer to change the number parameter. Again, let's write a method:</p>

<pre><code>(function($) {
    $.fn.compose = function(options) {
        options = $.extend({
            number: 2,
            ul: null
        }, options);

        function setNumber(number) {
            options.number = number;
        }

        this.change(function() {
            if (options.ul !== null) {
                var value = $(this).val();
                var ul = $(options.ul).empty();
                for(var i=0;i&lt;options.number;i++) {
                    ul.append('&lt;li&gt;' + value + '&lt;/li&gt;')
                }           
            }
        });

        return this;
    }
})(jQuery);
</code></pre>

<p>Like the first plugin type example, the consumer doesn't have an access to "setNumber" method. Unlike the first plugin type example, here we cannot return a "remote control" object. Due to jQuery chaining principal we have to return "this". For solve this we use the <a href="http://api.jquery.com/jQuery.data/">jQuery.data()</a> method. This method allows us attach key-value data to an element. For example, $('#elem').data('my-color', 'Green'); attaches the "my-color = Green" key-value to the element. In order to get the value of "my-color" all we have to do is: $('#elem').data('obj') and we get "Green".
So we use the jQuery.data() method to attach the "remote control" object to the element. We will use the name of the plugin "compose" as a key:</p>

<pre><code>(function($) {
    $.fn.compose = function(options) {
        options = $.extend({
            number: 2,
            ul: null
        }, options);

        function setNumber(number) {
            options.number = number;
        }

        this.change(function() {
            if (options.ul !== null) {
                var value = $(this).val();
                var ul = $(options.ul).empty();
                for(var i=0;i&lt;options.number;i++) {
                    ul.append('&lt;li&gt;' + value + '&lt;/li&gt;')
                }           
            }
        });

        this.data('compose', {
            setNumber: setNumber
        });

        return this;
    }
})(jQuery);
</code></pre>

<p>Now, in order to change the number</p>

<pre><code>$('#elem').compose({
    number: 3,
    ul: '#ul'
});

$('#elem').data('compose').setNumber(8);
</code></pre>

<p>And then the input's value will appear 8 times.
Live example for the compose plugin you can find <a href="http://www.webdeveasy.com/demos/jquery-plugin-pattern/compose.htm">here</a>.</p>

<h2>Summary</h2>

<p>In this article I presented two jQuery plugin types and their structure (IIFE wrap and jQuery injection as $), I explained how to add compulsory and optional parameters, demonstrated the meaning of the <em>this</em> expression and described the jQuery chaining principal. At the end I also presented a way of letting the consumer interact the plugins.</p>

<h3>Template of plugin the does not work on an element</h3>

<pre><code>(function($) {
    $.extend($, {
        pluginName: function(param, options) {
            options = $.extend({
                // Options Defaults
            }, options);


            return {
                // Plugin interface object
            };
        }
    });     
})(jQuery);
</code></pre>

<h3>Template of plugin the does work on an element</h3>

<pre><code>// jQuery plugin template for plugin that does work on element
(function($) {
    $.extend($.fn, {
        pluginName: function(param, options) {
            options = $.extend({
                // Options Defaults
            }, options);

            this.each(function() {
                // Operations for each DOM element
            }).data('pluginName', {
                // Plugin interface object
            });

            return this;
        }
    });     
})(jQuery);
</code></pre>

<p>I hope you find this post useful, and if you have any question, don't hesitate to ask!
<a href="http://www.webdeveasy.com/demos/jquery-plugin-pattern/jquery-plugin-pattern.zip">Here</a> you can find all the examples of this post and the plugins templates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cascading Autocompletes using jQuery UI]]></title>
    <link href="http://naorye.github.com/web-dev-easy/cascading-autocompletes-using-jquery-ui/"/>
    <updated>2012-09-14T18:34:42+03:00</updated>
    <id>http://naorye.github.com/web-dev-easy/cascading-autocompletes-using-jquery-ui</id>
    <content type="html"><![CDATA[<p>Yesterday I got a new requirement for the application I am working on.
I had several <a href="http://jqueryui.com/demos/autocomplete">jQuery UI autocompletes</a> and I needed to add cascading functionality. This means that each autocomplete in the group affects the following autocomple's possible values. If there is no value selected in the first autocomplete - the next autocomplete must be disabled. When the user selects a value on the first autocomplete - the next autocomplete becomes enabled.</p>

<!-- more -->


<p>After searching the web I realized that the best option for me is to write my own jQuery plugin that manages the autocompletes cascading.
The plugin gets as input a sequence of jQuery UI auocomplete elements and adds the cascading functionality. The idea under my plugin is to override each autocomplete's change and select events, and enable or disable the next autocomplete in the sequence according to the selected value.</p>

<p>Here is the code:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Cascading Autocompletes plugin</span> <a href='/code/cascading-autocompletes-plugin/jquery.cascading-autocompletes.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">activateChild</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">child</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;enable&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">deactivateChild</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">child</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">,</span> <span class="kc">true</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">child</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;disable&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">subChild</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;cascade-child&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">subChild</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">deactivateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">subChild</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">eventOverride</span><span class="p">(</span><span class="nx">originalEvent</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">isChildActivate</span> <span class="o">=</span> <span class="nx">child</span><span class="p">.</span><span class="nx">prop</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">)</span> <span class="o">===</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">ui</span><span class="p">.</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="nx">isChildActivate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">deactivateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">ui</span><span class="p">.</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isChildActivate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">activateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">originalEvent</span> <span class="o">===</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">originalEvent</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">event</span><span class="p">,</span> <span class="nx">ui</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">fn</span><span class="p">.</span><span class="nx">cascade</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">child</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">child</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">originalChange</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;change&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">originalSelect</span> <span class="o">=</span> <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;select&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">parent</span><span class="p">.</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;cascade-child&quot;</span><span class="p">,</span> <span class="nx">child</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="nx">eventOverride</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">originalChange</span><span class="p">));</span>
</span><span class='line'>            <span class="nx">parent</span><span class="p">.</span><span class="nx">autocomplete</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;select&quot;</span><span class="p">,</span> <span class="nx">eventOverride</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">,</span> <span class="nx">originalSelect</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">deactivateChild</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">child</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">parent</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">cascadingAutocompletes</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">autocompletes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">autocompletes</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">autocompletes</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>                <span class="nx">$</span><span class="p">(</span><span class="nx">autocompletes</span><span class="p">[</span><span class="nx">i</span><span class="p">]).</span><span class="nx">cascade</span><span class="p">(</span><span class="nx">autocompletes</span><span class="p">[</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">})(</span><span class="nx">jQuery</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Usage example:</p>

<p>``` javascript Cascading Autocompletes plugin Usage</p>

<pre><code>$.cascadingAutocompletes(["#country", "#city", "#street"]);
</code></pre>

<p>```</p>

<p><a href="/code/cascading-autocompletes-plugin/index.html">Demo Here</a>.</p>

<p>Hope this helps!</p>
]]></content>
  </entry>
  
</feed>
