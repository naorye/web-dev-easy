<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Backbone.js | Web Development is Easy!]]></title>
  <link href="http://webdeveasy.com/categories/backbone-js/atom.xml" rel="self"/>
  <link href="http://webdeveasy.com/"/>
  <updated>2014-03-08T20:48:17+02:00</updated>
  <id>http://webdeveasy.com/</id>
  <author>
    <name><![CDATA[NaorYe]]></name>
    <email><![CDATA[mailto:naorye@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Backbone Cleanup]]></title>
    <link href="http://webdeveasy.com/backbone-cleanup/"/>
    <updated>2013-04-30T21:09:00+03:00</updated>
    <id>http://webdeveasy.com/backbone-cleanup</id>
    <content type="html"><![CDATA[<p>Backbone allows our users to browse our website without refreshing the page. Each page the user visits consists of several Backbone views which are replaced whenever the user navigates. Views reflect our data models and interact with each other. This can be done by listening and triggering events which add functionality to the page. Whenever the view is replaced, there is a need to clean up the removed view, unbind events and remove unmanaged structure. <br/>
This article suggests a solution to the views cleanup problem.<!-- more --> <br/>
Keep in mind that this is only a suggestion as Backbone doesn't bind us to a specific solution. Your solution should be the one that fit your application structure and requirements.</p>

<h2>Cleanup Router</h2>

<p>We want to cleanup views. In order to do this, we have to find where and when a view is not relevant anymore. After thinking a little I understood that this resides somewhere inside the router, the place where views are replaced by other views. Actually, we want to cleanup the view <strong>right before</strong> the navigation. Unfortunately, Backbone.Router has no "before-navigate" event, so we have to override Router's 'navigate()' method and do whatever we want before calling the original 'navigate()' method. Let's define the Router's 'currentView' member as a reference to the current visible view. Then we can do:<br/>
```javascript Backbone.CleanupRouter class first sketch
Backbone.CleanupRouter = Backbone.Router.extend({</p>

<pre><code>navigate: function() {
    if (this.currentView) {
        this.currentView.cleanupAll();
        this.currentView = null;
    }
    Backbone.Router.prototype.navigate.apply(this, arguments);
}
</code></pre>

<p>});
<code>
This way, each time the user navigates between pages, the router calls the current view's 'cleanupAll()' method and then do the navigation.   
In order to let instances of such a router to mark the current view, let's add 'markCurrentView()' method:
</code>javascript Backbone.CleanupRouter class second sketch
Backbone.CleanupRouter = Backbone.Router.extend({</p>

<pre><code>navigate: function(fragment) {
    if (this.currentView) {
        this.currentView.cleanupAll();
        this.currentView = null;
    }
    Backbone.Router.prototype.navigate.apply(this, arguments);
},
markCurrentView: function(view) {
    this.currentView = view;
}
</code></pre>

<p>});
<code>
Now, CleanupRouter's instance can be something like:
</code>javascript Backbone.CleanupRouter instance example
var router = Backbone.CleanupRouter.extend({</p>

<pre><code>routes: {
    'page-a': 'pageA'
},
pageA: function() {
    var view = // create a view for page A
    this.markCurrentView(view);
}
</code></pre>

<p>});
<code>
After looking on the original Backbone.Router's 'navigate()' method, I noticed that there are some cases where the navigate exits without replacing the view (for example, navigation to the same current route should do nothing). In such cases, we don't need to cleanup the current view. Let's change our custom 'navigate()' to exit in those cases:
</code>javascript Backbone.CleanupRouter class final sketch
var routeStripper = /<sup>[#\/]/;</sup>
Backbone.CleanupRouter = Backbone.Router.extend({</p>

<pre><code>navigate: function(fragment) {
    // Filter cases where navigate exists without navigate
    if (!Backbone.History.started) return false;
    var frag = (fragment || '').replace(routeStripper, '');
    if (Backbone.history.fragment == frag) return;

    if (this.currentView) {
        this.currentView.cleanupAll();
        this.currentView = null;
    }
    Backbone.Router.prototype.navigate.apply(this, arguments);
},
markCurrentView: function(view) {
    this.currentView = view;
}
</code></pre>

<p>});
```</p>

<h2>Cleanup View</h2>

<p>Now we have to define a view that has a 'cleanupAll()' method. This view should clean up itself when calling 'cleanupAll()':
```javascript Backbone.CleanupView class first sketch
Backbone.CleanupView = Backbone.View.extend({</p>

<pre><code>cleanup: function() {
    // This method should be overridden by each view and should
    // contains all the cleanup commands
},
cleanupAll: function() {
    this.cleanup();
}
</code></pre>

<p>});
<code>
Backbone views can hold nested views. Whenever we cleanup a view, we need to clean also it's nested views. In order to do that, each view should have a reference to all it's nested views. Let's implement this:
</code>javascript Backbone.CleanupView class last sketch
Backbone.CleanupView = Backbone.View.extend({</p>

<pre><code>constructor: function() {
    this.nestedViews = [];
    Backbone.View.prototype.constructor.apply(this, arguments);
},
setNestedView: function(view) {
    this.nestedViews.push(view);
},
cleanup: function() {
    // This method should be overridden
},
cleanupAll: function() {
    for (var i in this.nestedViews) {
        this.nestedViews[i].cleanup();
    }
    this.nestedViews = null;
    this.cleanup();
}
</code></pre>

<p>});
<code>
Now, CleanupView's instance can be something like:
</code>javascript Backbone.CleanupView instance example
var view = Backbone.CleanupView.extend({</p>

<pre><code>render: function() {
    // Render current view
    var nested = // create a nested view which is
                 // also instance of CleanupView
    this.$el.append(nested.$el);

    this.setNestedView(view);
},
cleanup: function() {
    // Cleanup current view only
}
</code></pre>

<p>});
```</p>

<h2>Example</h2>

<p>In order to test our cleanup plugin, I have created a small application that uses it and logs the 'render()' and 'cleanup()' methods. The application contains one router of CleanupRouter type and two views of CleanupView type (with templates):</p>

<p>```javascript Application router
var Router = Backbone.CleanupRouter.extend({</p>

<pre><code>routes: {
    '': 'index',
    'single-view': 'singleView',
    'nested-view': 'nestedView'
},
index: function() {
    this.navigate('single-view', {trigger: true});
},
singleView: function() {
    var view = new SingleView();
    view.render();
    $('#view').empty().append(view.$el);

    this.markCurrentView(view);
},
nestedView: function() {
    var view = new NestedView();
    view.render();
    $('#view').empty().append(view.$el);

    this.markCurrentView(view);
}
</code></pre>

<p>});
```
Our router renders instances of SingleView and NestedView according to the route. After each render we call 'markCurrentView()' in order to mark the current view.</p>

<p>```javascript SingleView view
var SingleView = Backbone.CleanupView.extend({</p>

<pre><code>className: 'single-view',
template: _.template(singleViewTemplate),
render: function() {
    app.log('Render: SingleView (' + this.cid + ')');

    var template = this.template();
    this.$el.html(template);
},
cleanup: function() {
    app.log('Cleanup: SingleView (' + this.cid + ')');
}
</code></pre>

<p>});
<code>
</code>javascript single-view.html template</p>

<h2>Single View</h2>


<p>```
SingleView's template contains only a title. Each time 'render()' and 'cleanup()' are called, the application logs the action.</p>

<p>```javascript NestedView view
var NestedView = Backbone.CleanupView.extend({</p>

<pre><code>className: 'nested-view',
template: _.template(nestedViewTemplate),
events: {
    'click .add-view': 'addView'
},
render: function() {
    app.log('Render: NestedView (' + this.cid + ')');

    var template = this.template();
    this.$el.html(template);
},
cleanup: function() {
    app.log('Cleanup: NestedView (' + this.cid + ')');
},
addView: function() {
    var view = new SingleView();
    this.$el.append(view.$el);
    view.render();
    this.setNestedView(view);
}
</code></pre>

<p>});
<code>
</code>javascript nested-view.html template</p>

<h2>Nested View</h2>


<p><button class="add-view">Add View</button>
```
NestedView's template contains a title and a button. Each time this button is pressed, the view creates and appends to itself a SingleView instance. In addition, by calling 'setNestedView()', the view registers the new SingleView instance to the nested views array. As in SingleView, calls to 'render()' and 'cleanup()' are logged.</p>

<p>You can see the application in action <a target="_blank" href="../code/backbone-cleanup/example/">here</a>. Try to navigate between views and add nested views in order to see in the log how 'render()' and 'cleanup()' take place in the application flow.</p>

<h2>Download &amp; GitHub &amp; Demo</h2>

<ul>
<li><a href="../code/backbone-cleanup/backbone-cleanup.zip" target="_blank">Backbone Cleanup Download</a></li>
<li><a href="https://github.com/naorye/BackboneCleanup" target="_blank">Backbone Cleanup GitHub Repository</a></li>
<li>Example application in action <a target="_blank" href="../code/backbone-cleanup/example/">here</a>.</li>
</ul>


<p>I hope you enjoyed reading this article,</p>

<p>NaorYe</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone Cache]]></title>
    <link href="http://webdeveasy.com/backbone-cache/"/>
    <updated>2013-03-12T22:37:00+02:00</updated>
    <id>http://webdeveasy.com/backbone-cache</id>
    <content type="html"><![CDATA[<p>Caching collections and models in Backbone allows to save server calls and return the result faster to the user. This means happier server and happier users. This article will guide you how to implement Backbone caching.</p>

<!-- more -->


<p>In order to support caching in Backbone, first, I've created a Cache class that has the basic cache behavior and knows to cache key-value items. Then, I've created Backbone.CachedModel and Backbone.CachedCollection classes and override their fetch method so it will search the cache before fetching from the server.</p>

<h2>Cache Class</h2>

<p>```javascript Backbone.Cache class
Backbone.Cache = function() {</p>

<pre><code>this.store = {};
</code></pre>

<p>};
$.extend(Backbone.Cache.prototype, Backbone.Events, {</p>

<pre><code>set: function(key, value) {
    this.trigger("set", key, value);
    this.store[key] = value;
},
has: function(key) {
    var isHas = !!this.store[key];
    this.trigger("has", key, isHas);
    return isHas;
},
get: function(key) {
    var value = this.store[key];
    this.trigger("get", key, value);
    return value;
},
remove: function(key) {
    var value = this.store[key];
    this.trigger("remove", key, value);
    delete this.store[key];
    return value;
},
clear: function() {
    this.trigger("clear");
    this.store = {};
}
</code></pre>

<p>});
```
Each Cache instance holds an object that stored the data, and its methods manage this object. Cache also extends from Backbone.Events so it would be able to listen to events and trigger some.</p>

<h2>Fetch Cache</h2>

<p>In order to cache fetching results of a model, we need to know the key of the cache item and the cache object instance in which the item stored in. Therefore, each model or collection that needs caching has to define two properties: cacheKey and cacheObject.
Lets create Backbone.CachedModel and override it's fetch method. Backbone.CachedCollection's new fetch is pretty much the same.</p>

<p>```javascript Backbone.Model fetch override
Backbone.CachedModel = Backbone.Model.extend({</p>

<pre><code>fetch: function(options) {
    // If the model has required info for cache
    if (this.cacheKey &amp;&amp; this.cacheObject) {
        options = options || {};
        var cacheObject = this.cacheObject,
            cacheKey = this.cacheKey,
            success = options.success;

        // Checking whether the cache object already holds the required data
        if (cacheObject.has(cacheKey)) {
            var resp = cacheObject.get(cacheKey);

            // Do the same as the fetch method does when the data received
            this.set(this.parse(resp, options), options);
            if (success) success(this, resp, options);

            // Returns deferred as the original fetch
            return $.Deferred().resolve();
        } else {
            // The cache object doesn't hold the required data
            // Preparing success method that set the cache 
            options.success = function(entity, resp, options) {
                cacheObject.set(cacheKey, resp);
                if (success) success(entity, resp, options);
            };
            // Calling the original fetch
            return Backbone.Model.prototype.fetch.call(this, options);
        }
    } else {
        // No cache for this model, calling the original fetch
        return Backbone.Model.prototype.fetch.call(this, options);
    }
}
</code></pre>

<p>});
```
That's all! now, each model or collection that has cacheKey and cacheObject properties now cached.</p>

<h2>Usage Example</h2>

<p>First, there must define a cache object. There can be more then cache objects according to the need. For example, application global cache for caching application data or user cache for caching session user data.</p>

<p><code>javascript Define global application cache
app.globalCache = new Backbone.Cache();
</code></p>

<p>Next, define the model and set cacheKey and cacheObject. In this example app.globalCache is used to cache the fetch results. Also, the results will be cached with the key "UserPermissions_X" (X is the user id).</p>

<p>```javascript Define UserPermissions model
var UserPermissions = Backbone.CachedModel.extend({</p>

<pre><code>cacheObject: app.globalCache,
initialize: function() {
    var userId = this.get('id');
    if (userId) {
        this.cacheKey = "UserPermissions_" + userId;
    }
},
urlRoot: 'api/user/permissions'
</code></pre>

<p>});
```</p>

<p>Now, somewhere in the application, call fetch to get the user permissions. The fetch method will ask the server for the data and then cache it.</p>

<p><code>javascript Fetch user permissions
var user1Permissions = new UserPermissions({ id: 1 });
user1Permissions.fetch();
</code></p>

<p>Later in the application, there is a need to get again the user permissions. calling fetch will immediately retrieve the user permissions from the cache object.</p>

<p><code>javascript Get user permissions from cache
var permissions = new UserPermissions({ id: 1 });
permissions.fetch();
</code></p>

<h2>Download &amp; GitHub</h2>

<ul>
<li><a href="../code/backbone-cache/backbone-cache.zip" target="_blank">Backbone Cache Download</a></li>
<li><a href="https://github.com/naorye/BackboneCache" target="_blank">Backbone Cache GitHub Repository</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Searcher - Backbone application demonstration]]></title>
    <link href="http://webdeveasy.com/searcher-backbone-dot-js-application-demonstration/"/>
    <updated>2013-01-23T19:03:00+02:00</updated>
    <id>http://webdeveasy.com/searcher-backbone-dot-js-application-demonstration</id>
    <content type="html"><![CDATA[<p>In this article we will build Backbone.js application along with jQuery, underscore.js and require.js. The aim of this article is to demonstrate the use of Backbone components. As we all probably know, there are more then one way to build Backbone applications so feel comfortable to adopt what you like. <br/>
At the end of this article we will have Backbone searcher application which will know to make searches using different search providers. You can see our final application in action <a href="../code/searcher/index.html" target="_blank">here</a> and can download the code <a href="../code/searcher/searcher.zip" target="_blank">here</a>.</p>

<!-- more -->


<h2>Application Loading Flow</h2>

<h3>index.html</h3>

<p>Let's begin with our application loading flow. After typing the url, the browser starts loading the index.html file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>index.html</span> <a href='/code/searcher/index.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>	<span class="nt">&lt;head&gt;</span>
</span><span class='line'>		<span class="nt">&lt;title&gt;&lt;/title&gt;</span>
</span><span class='line'>		<span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;content-type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>		<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/style.css&quot;</span> <span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">/&gt;</span>		
</span><span class='line'>		<span class="nt">&lt;script </span><span class="na">data-main=</span><span class="s">&quot;js/main&quot;</span> <span class="na">src=</span><span class="s">&quot;assets/js/require.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/head&gt;</span>
</span><span class='line'>	<span class="nt">&lt;body&gt;</span>
</span><span class='line'>		<span class="nt">&lt;header&gt;</span>
</span><span class='line'>			<span class="nt">&lt;nav</span> <span class="na">class=</span><span class="s">&quot;search&quot;</span><span class="nt">&gt;&lt;/nav&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/header&gt;</span>
</span><span class='line'>		<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>			<span class="nt">&lt;aside</span> <span class="na">class=</span><span class="s">&quot;side-bar&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>				<span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;term-history&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span><span class='line'>			<span class="nt">&lt;/aside&gt;</span>
</span><span class='line'>			<span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;content&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>			<span class="nt">&lt;/section&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The index.html file contains the layout of our application which include placeholders for the search section, the history section and the search results area. It also includes reference to css file and reference to the require.js script.
When the browser loads this html file, right after loading style.css, the browser loads the require.js script. Look closely and you'll notice that require.js script tag has additional attribute called "data-main". This attribute tells require.js to load js/main.js after require.js loads.</p>

<h3>js/main.js</h3>

<p>This file contains two sections:</p>

<ul>
<li>Configuration section that configure the require.js paths and modules.</li>
<li>Initialization section that initialize the application.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/main.js</span> <a href='/code/Searcher/js/main.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">require</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
</span><span class='line'>	<span class="nx">paths</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>		<span class="nx">jQuery</span><span class="o">:</span> <span class="s1">&#39;../assets/js/jquery-1.9.0.min&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">Underscore</span><span class="o">:</span> <span class="s1">&#39;../assets/js/underscore-min&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">Backbone</span><span class="o">:</span> <span class="s1">&#39;../assets/js/backbone-min&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">tooltipster</span><span class="o">:</span> <span class="s1">&#39;../assets/js/jquery.tooltipster&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">text</span><span class="o">:</span> <span class="s1">&#39;../assets/js/text&#39;</span>
</span><span class='line'>	<span class="p">},</span>
</span><span class='line'>	<span class="nx">shim</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>		<span class="s1">&#39;jQuery&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;$&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="s1">&#39;Underscore&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;_&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="s1">&#39;Backbone&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">deps</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>				<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>				<span class="s1">&#39;jQuery&#39;</span>
</span><span class='line'>			<span class="p">],</span>
</span><span class='line'>			<span class="nx">exports</span><span class="o">:</span> <span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="s1">&#39;tooltipster&#39;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">deps</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>				<span class="s1">&#39;jQuery&#39;</span>
</span><span class='line'>			<span class="p">]</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">require</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;router&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;app&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">Router</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Router</span><span class="p">();</span>
</span><span class='line'>	<span class="nx">app</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>	<span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>require.js configuration allows us to map modules paths to names. For example, jQuery.js file is located in "libs/jquery-1.8.2.min". Whenever we wish mark jQuery as a dependency, we will have to write this long path. Since jQuery is basic module and we probably use it a lot, it is better to map its path. <br/>
require.js works with <a href="http://requirejs.org/docs/whyamd.html" target="_blank">AMD modules</a>. The AMD structure tells require.js what are the dependencies and which object to return. The purpose of the shim configuration is to tell require.js for each un-AMD module what is its dependencies and which object to return. <br/>
After the configurations done, we ask require.js to load Backbone, router.js and app.js, and after that execute the initialization function. This function gets as parameters the AMD modules that require.js required to resolve and initializes the router, initializes the app and starts Backbone.history.</p>

<h3>app.js</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/app.js</span> <a href='/code/searcher/js/app.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;models/query&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;views/search&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;views/history&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/sources-manager&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;models/source&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/library-of-congress/views/grid&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/google-search-api-for-shopping/views/list&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">QueryModel</span><span class="p">,</span> <span class="nx">SearchView</span><span class="p">,</span> <span class="nx">HistoryView</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">SourcesManager</span><span class="p">,</span> <span class="nx">SourceModel</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">LocGridView</span><span class="p">,</span> <span class="nx">GoogleListView</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">Application</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>	<span class="nx">_</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">Application</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>		<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">router</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">router</span> <span class="o">=</span> <span class="nx">router</span><span class="p">;</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueryModel</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="k">this</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">navigate</span><span class="p">(</span>
</span><span class='line'>					<span class="s1">&#39;/search/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;/&#39;</span> <span class="o">+</span> <span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">),</span>
</span><span class='line'>					<span class="p">{</span><span class="nx">trigger</span><span class="o">:</span> <span class="kc">false</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>			<span class="p">},</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">searchView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SearchView</span><span class="p">({</span>
</span><span class='line'>				<span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">historyView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">HistoryView</span><span class="p">({</span>
</span><span class='line'>				<span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SourcesManager</span><span class="p">(</span> <span class="p">{</span>
</span><span class='line'>				<span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.content&#39;</span><span class="p">,</span>
</span><span class='line'>				<span class="nx">model</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">,</span>
</span><span class='line'>				<span class="nx">sources</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>					<span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>						<span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;library-of-congress&#39;</span><span class="p">,</span>
</span><span class='line'>						<span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Library Of Congress&#39;</span><span class="p">,</span>
</span><span class='line'>						<span class="nx">view</span><span class="o">:</span> <span class="nx">LocGridView</span>
</span><span class='line'>					<span class="p">}),</span>
</span><span class='line'>					<span class="k">new</span> <span class="nx">SourceModel</span><span class="p">({</span>
</span><span class='line'>						<span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;google-shopping&#39;</span><span class="p">,</span>
</span><span class='line'>						<span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;Google Shopping&#39;</span><span class="p">,</span>
</span><span class='line'>						<span class="nx">view</span><span class="o">:</span> <span class="nx">GoogleListView</span>
</span><span class='line'>					<span class="p">})</span>
</span><span class='line'>				<span class="p">]</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">searchView</span><span class="p">.</span><span class="nx">addSources</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sourcesManager</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="k">new</span> <span class="nx">Application</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Lets see what app.js initialization function does:</p>

<ul>
<li>Keeps reference of the router and initializes instance of QueryModel. This appQuery instance acts as a singleton and every time it changes, the router changes the url to "search/&lt;sourceId&gt;/&lt;term&gt;" (without trigger a route event).</li>
<li>Initializes the main views of the application - SearchView and HistoryView.</li>
<li>Creates two new search sources. For each source it is necessary to know it's name, id (for internal purposes) and it's main view. Later we will discuss on the sources feature.</li>
<li>Creates sourceManager that knows manage search sources (we will discuss on it later also) and adds to it the two search sources.</li>
<li>Adds the two search sources to the search view.</li>
</ul>


<p>At this point, the application loading flow is over and now the application waits for user interaction.
In order to understand completely how everything bonds together and works, we must understand the application features and components.</p>

<h3>router.js</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/router.js</span> <a href='/code/searcher/js/router.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;app&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">Router</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">routes</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="s1">&#39;search/:sourceId/:term&#39;</span><span class="o">:</span> <span class="s1">&#39;searchImages&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">searchImages</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourceId</span><span class="p">,</span> <span class="nx">term</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">app</span><span class="p">.</span><span class="nx">appQuery</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span><span class="p">,</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">Router</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The router depends on app.js. Whenever a route in form "search/&lt;sourceId&gt;/&lt;term&gt;" is entered to the url, the router trigger the searchImages() method which changes the appQuery singleton.</p>

<h2>Application Features and Components</h2>

<p>Now it is time to review the searching, sources and the history features.</p>

<h3>Searching</h3>

<p>The main purpose of the application is to allow searching. The application makes searches among different search providers, therefore the input it gets from the user contains a search term and a search provider. So, we need a model to store this information. Actually, a single instance of this model will serve us during the entire use of the application. Each time the user makes a different search (change the search term or provider), the model instance changes. Later, those model changes will trigger the search.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/models/query.js</span> <a href='/code/searcher/js/models/query.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">QueryModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">term</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">sourceId</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">QueryModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>QueryModel has two attributes. "term" for holding the search term and "sourceId" for holding the search provider. The default value for both attributes are the empty string.</p>

<p>SearchView view creates the inputs and adds the behavior of the searching process.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/views/search.js</span> <a href='/code/searcher/js/views/search.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;text!templates/search.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">searchTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">SearchView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;.search&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s1">&#39;click .search-button&#39;</span><span class="o">:</span> <span class="s1">&#39;setQuery&#39;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">searchTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">searchTemplate</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">optionTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="s2">&quot;&lt;option value=&#39;&lt;%= id %&gt;&#39;&gt;&lt;%= name %&gt;&lt;/option&gt;&quot;</span><span class="p">),</span>
</span><span class='line'>        <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">applyQuery</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">setQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">val</span><span class="p">();</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>		<span class="nx">applyQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">);</span>
</span><span class='line'>			
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">term</span><span class="p">);</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">sourceId</span><span class="p">);</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>        <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">searchTemplate</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">searchInput</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.search-input&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.source-select&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">applyQuery</span><span class="p">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nx">addSources</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourcesPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">id</span> <span class="k">in</span> <span class="nx">sourcesPool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">this</span><span class="p">.</span><span class="nx">sourceSelect</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">optionTemplate</span><span class="p">({</span>
</span><span class='line'>                    <span class="nx">id</span><span class="o">:</span> <span class="nx">id</span><span class="p">,</span>
</span><span class='line'>                    <span class="nx">name</span><span class="o">:</span> <span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">get</span><span class="p">(</span><span class="s2">&quot;name&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}));</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">SearchView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>SearchView renders itself on initialization, and every time appQuery changes it updates the input values. On render, the view draws itself using <a href="http://underscorejs.org/#template" target="_blank">underscore templates</a> and initializes the inputs according to the appQuery. Whenever the user clicks on the search button, the view set appQuery with the new values which causing the url to change (as we saw in app.js). Notice that SearchView uses the text plugin of require.js in order to load templates/search.html. In addition, the compiled version of templates are stored in searchTemplate and in optionTemplate in order to save compilations. SearchView contains the addSource() method which gets sourceModel instance as parameter (we will see it later) and adds the new source to the sources select list.</p>

<h3>Sources</h3>

<p>As I mentioned before, the application makes searches among different search providers. The sources mechanism is responsible for defining search providers, their models and their views. This feature includes the SourcesManager view which acts as a bridge and responsible for rendering the relevant search results according to appQuery.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/sources-manager.js</span> <a href='/code/searcher/js/sources/sources-manager.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;text!templates/loading.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">loadingTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">SourcesManager</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">loadingTemplate</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">loadingTemplate</span><span class="p">),</span>
</span><span class='line'>		<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="k">for</span> <span class="p">(</span> <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="k">this</span><span class="p">.</span><span class="nx">addSource</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sources</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">,</span> <span class="nx">changes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;sourceId&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceModel</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">sourceId</span><span class="p">];</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">sourceModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Source &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; not found!&#39;</span><span class="p">);</span>
</span><span class='line'>				<span class="k">return</span><span class="p">;</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">viewType</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;view&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">viewType</span><span class="p">({</span>
</span><span class='line'>				<span class="nx">el</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">el</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Rendering &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; with term &quot;&#39;</span><span class="o">+</span> <span class="nx">term</span> <span class="o">+</span> <span class="s1">&#39;&quot;&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">loadingTemplate</span><span class="p">());</span>
</span><span class='line'>			<span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">({</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span> <span class="p">});</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">addSource</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">sourceModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">sourcesPool</span><span class="p">[</span><span class="nx">sourceId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">sourceModel</span><span class="p">;</span>
</span><span class='line'>			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Adding source &#39;</span> <span class="o">+</span> <span class="nx">sourceId</span> <span class="o">+</span> <span class="s1">&#39; to the sources pool&#39;</span><span class="p">);</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>
</span><span class='line'>	<span class="k">return</span> <span class="nx">SourcesManager</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>When initialized with appQuery as model, SourcesManager renders itself on appQuery change. SourceManager has the ability to add sources using the addSource() function or using the initialization "sources" option. When it renders, it resolves the search provider's view according to appQuery and renders it.
SourceManager initialization occurs inside the application initialization:
```javascript SourcesManager initialization</p>

<pre><code>this.sourcesManager = new SourcesManager( {
    el: '.content',
    model: this.appQuery,
    sources: [
        new SourceModel({
            id: 'library-of-congress',
            name: 'Library Of Congress',
            view: LocGridView
        }),
        new SourceModel({
            id: 'google-shopping',
            name: 'Google Shopping',
            view: GoogleListView
        })
    ]
});
</code></pre>

<p>```
appQuery is the SourcesManager model and the search results are rendered inside ".content" element. The search providers are also defined here using the SourceModel. Each search provider should have id, name and main view which will be displayed when selected.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/models/source.js</span> <a href='/code/searcher/js/models/source.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">SourceModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">view</span><span class="o">:</span> <span class="kc">null</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">SourceModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Google Shopping search provider</h4>

<p>Let's explore the Google Shopping search provider. It's files located under js/sources/google-search-api-for-shopping and it consist of ProductModel, ProductsCollection, products template and it's main view called ListView.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/models/product.js</span> <a href='/code/searcher/js/sources/google-search-api-for-shopping/models/product.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span> <span class="s1">&#39;Backbone&#39;</span> <span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">ProductModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">defaults</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="nx">title</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">link</span><span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
</span><span class='line'>			<span class="nx">thumbnail</span><span class="o">:</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">parse</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">attrs</span> <span class="o">=</span> <span class="p">{</span> <span class="p">};</span>
</span><span class='line'>			<span class="k">if</span> <span class="p">(</span><span class="nx">item</span> <span class="o">&amp;&amp;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">product</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>				<span class="kd">var</span> <span class="nx">product</span> <span class="o">=</span> <span class="nx">item</span><span class="p">.</span><span class="nx">product</span><span class="p">;</span>
</span><span class='line'>				<span class="nx">attrs</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">title</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>				<span class="nx">attrs</span><span class="p">.</span><span class="nx">description</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">description</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>				<span class="nx">attrs</span><span class="p">.</span><span class="nx">link</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">link</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
</span><span class='line'>				
</span><span class='line'>				<span class="k">if</span> <span class="p">(</span><span class="nx">product</span><span class="p">.</span><span class="nx">images</span> <span class="o">&amp;&amp;</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>					<span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">status</span> <span class="o">==</span> <span class="s1">&#39;available&#39;</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>					<span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span> <span class="o">&amp;&amp;</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="nx">attrs</span><span class="p">.</span><span class="nx">thumbnail</span> <span class="o">=</span> <span class="nx">product</span><span class="p">.</span><span class="nx">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">thumbnails</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">link</span><span class="p">;</span>
</span><span class='line'>				<span class="p">}</span>
</span><span class='line'>			<span class="p">}</span>
</span><span class='line'>			<span class="k">return</span> <span class="nx">attrs</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">ProductModel</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Each product contains title, description, link for the product and a small thumbnail. The parse method is used by Backbone in order to parse the response  of single product, when fetching the data from Google.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/collections/products.js</span> <a href='/code/searcher/js/sources/google-search-api-for-shopping/collections/products.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/google-search-api-for-shopping/models/product&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Backbone</span><span class="p">,</span> <span class="nx">ProductModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">ProductsCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">model</span><span class="o">:</span> <span class="nx">ProductModel</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;https://www.googleapis.com/shopping/search/v1/public/products&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">parse</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">items</span><span class="p">;</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">ProductsCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The products collection consist of ProductModel models and the url attribute is used by Backbone fetch method.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/templates/products.html</span> <a href='/code/searcher/js/sources/google-search-api-for-shopping/templates/products.html' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;list-table&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>	<span class="nt">&lt;thead&gt;</span>
</span><span class='line'>		<span class="nt">&lt;tr&gt;</span>
</span><span class='line'>			<span class="nt">&lt;th&gt;</span>Image<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>			<span class="nt">&lt;th&gt;</span>Description<span class="nt">&lt;/th&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>	<span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>	<span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>	<span class="err">&lt;</span>% _.each(products, function(product) { %&gt;
</span><span class='line'>		<span class="nt">&lt;tr&gt;</span>
</span><span class='line'>			<span class="nt">&lt;td&gt;&lt;img</span> <span class="na">alt=</span><span class="s">&quot;&quot;</span> <span class="na">src=</span><span class="s">&quot;&lt;%= product.thumbnail %&gt;&quot;</span> <span class="na">class=</span><span class="s">&quot;img-polaroid&quot;</span><span class="nt">/&gt;&lt;/td&gt;</span>
</span><span class='line'>			<span class="nt">&lt;td&gt;</span>
</span><span class='line'>				<span class="nt">&lt;h4&gt;&lt;a</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span> <span class="na">href=</span><span class="s">&quot;&lt;%= product.link %&gt;&quot;</span><span class="nt">&gt;</span><span class="err">&lt;</span>%= product.title %&gt;<span class="nt">&lt;/a&gt;&lt;/h4&gt;</span>
</span><span class='line'>				<span class="nt">&lt;p&gt;</span><span class="err">&lt;</span>%= product.description %&gt;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>			<span class="nt">&lt;/td&gt;</span>
</span><span class='line'>		<span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>	<span class="err">&lt;</span>% }); %&gt;
</span><span class='line'>	<span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The search results structure defined inside the products.html as a table that contains all the products. For each product, a new product row with thumbnail, title and description is created.
Search providers can contain many views. When defining the search provider in SourcesManager, we must tell which view is the main view to display. ListView is the main view of the Google Shopping search provider.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/sources/google-search-api-for-shopping/views/list.js</span> <a href='/code/searcher/js/sources/google-search-api-for-shopping/views/list.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/google-search-api-for-shopping/collections/products&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;sources/google-search-api-for-shopping/models/product&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;text!sources/google-search-api-for-shopping/templates/products.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">ProductsCollection</span><span class="p">,</span> <span class="nx">ProductModel</span><span class="p">,</span> <span class="nx">productsTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">ListView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">productsTemplate</span><span class="p">),</span>
</span><span class='line'>		<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">products</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ProductsCollection</span><span class="p">();</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">fetch</span><span class="p">({</span>
</span><span class='line'>				<span class="nx">data</span><span class="o">:</span><span class="p">{</span>
</span><span class='line'>					<span class="nx">key</span><span class="o">:</span> <span class="s1">&#39;AIzaSyDEMpzAwWS40E6TBjIA_XH76QfO0YSsvDc&#39;</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">country</span><span class="o">:</span> <span class="s1">&#39;US&#39;</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">fields</span><span class="o">:</span> <span class="s1">&#39;items(product(title,description,link,images(status,thumbnails(link))))&#39;</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">q</span><span class="o">:</span> <span class="nx">options</span><span class="p">.</span><span class="nx">term</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">alt</span><span class="o">:</span> <span class="s1">&#39;json&#39;</span><span class="p">,</span>
</span><span class='line'>					<span class="nx">thumbnails</span><span class="o">:</span> <span class="s1">&#39;128:128&#39;</span>
</span><span class='line'>				<span class="p">},</span>
</span><span class='line'>				<span class="nx">success</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">();</span>
</span><span class='line'>					<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>						<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="nx">products</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">products</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()}));</span>
</span><span class='line'>					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>						<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;No result found!&#39;</span><span class="p">);</span>
</span><span class='line'>					<span class="p">}</span>
</span><span class='line'>				<span class="p">},</span> <span class="k">this</span><span class="p">),</span>
</span><span class='line'>				<span class="nx">error</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">collection</span><span class="p">,</span> <span class="nx">xhr</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>					<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">empty</span><span class="p">().</span><span class="nx">text</span><span class="p">(</span><span class="s1">&#39;Error get result!!&#39;</span><span class="p">);</span>
</span><span class='line'>				<span class="p">},</span> <span class="k">this</span><span class="p">)</span>
</span><span class='line'>			<span class="p">});</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">ListView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>ListView initializes ProductsCollection and on render fetch it and append the results to el. In case of an error or empty results, a relevant text message appears. Behind the scenes, the fetch method uses the jQuery.ajax function and the data option is passed to it. The data option contains needed properties for the Google Shopping api. Keep in mind that in your application you will need to use yours Google api key.
Now, whenever the user chooses Google Shopping as a search provider, SourcesManager initializes ListView which fetches the results and display them inside ".content" element.</p>

<h3>History</h3>

<p>Another feature of this application is history. The application stores queries history and enables us to make searches from history. In order to store the queries history we need a collection of QueryModel:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/collections/queries.js</span> <a href='/code/searcher/js/collections/queries.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;models/query&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">QueryModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">QueriesCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">model</span><span class="o">:</span> <span class="nx">QueryModel</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">QueriesCollection</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now, in order to display the history and make each history entry clickable, There is the HistoryView:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>js/views/history.js</span> <a href='/code/searcher/js/views/history.js' target='_blank'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">﻿</span><span class="nx">define</span><span class="p">([</span>
</span><span class='line'>	<span class="s1">&#39;jQuery&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Underscore&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;Backbone&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;app&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;collections/queries&#39;</span><span class="p">,</span>
</span><span class='line'>	<span class="s1">&#39;text!templates/queries-list.html&#39;</span>
</span><span class='line'><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">Backbone</span><span class="p">,</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">QueriesCollection</span><span class="p">,</span> <span class="nx">queriesListTemplate</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>	<span class="kd">var</span> <span class="nx">HistoryView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>		<span class="nx">el</span><span class="o">:</span> <span class="s1">&#39;#term-history&#39;</span><span class="p">,</span>
</span><span class='line'>		<span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>			<span class="s1">&#39;click a&#39;</span><span class="o">:</span> <span class="s1">&#39;setModel&#39;</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">QueriesCollection</span><span class="p">();</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;change&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">addQuery</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">addQuery</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">model</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">setModel</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">term</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;term&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="kd">var</span> <span class="nx">sourceId</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s1">&#39;source&#39;</span><span class="p">);</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span> <span class="p">{</span> <span class="nx">term</span><span class="o">:</span> <span class="nx">term</span><span class="p">,</span> <span class="nx">sourceId</span><span class="o">:</span> <span class="nx">sourceId</span> <span class="p">}</span> <span class="p">);</span>
</span><span class='line'>		<span class="p">},</span>
</span><span class='line'>		<span class="nx">template</span><span class="o">:</span> <span class="nx">_</span><span class="p">.</span><span class="nx">template</span><span class="p">(</span><span class="nx">queriesListTemplate</span><span class="p">),</span>
</span><span class='line'>		<span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>			<span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">template</span><span class="p">({</span><span class="s1">&#39;queries&#39;</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">queriesCollection</span><span class="p">.</span><span class="nx">toJSON</span><span class="p">()}));</span>
</span><span class='line'>		<span class="p">}</span>
</span><span class='line'>	<span class="p">});</span>
</span><span class='line'>	<span class="k">return</span> <span class="nx">HistoryView</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>HistoryView gets appQuery as a model, and on initialization it creates QueriesCollection instance. Whenever the appQuery changes, the view adds it to queries collection and renders itself. Render takes the queries collection and generates the markup from the queriesListTemplate dependency. Whenever the user click on history entry, the setModel() function triggered and set appQuery with the history values. As a result of appQuery change, SourcesManager's render occurred.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backbone Singleton]]></title>
    <link href="http://webdeveasy.com/backbone-singleton/"/>
    <updated>2012-11-05T19:13:36+02:00</updated>
    <id>http://webdeveasy.com/backbone-singleton</id>
    <content type="html"><![CDATA[<p>Using Backbone.js, sometimes we need a model that will act like a singleton. Other times we want to reuse the type of that singleton. This article will present two different ways of creating a singleton using Backbone.js and require.js. While the first way is simpler and more intuitive, the second allows us more flexibility</p>

<!-- more -->


<h2>Simple Singleton</h2>

<p>I am working on a little application using Backbone.js and require.js. The application lets the user making searches by a keyword. <br/>
Thinking of the model, I realized that I need a model that will hold the keyword and since the keyword is single in the application, it should be a singleton.
Because I am working with require.js, in order to simulate a singleton, I created a module that will return an instance of the Keyword model.
```javascript KeywordModel
define([</p>

<pre><code>'backbone'
</code></pre>

<p>], function( Backbone ) {</p>

<pre><code>var KeywordModel = Backbone.Model.extend({
    defaults: {
        keyword: ''
    }
});

return new KeywordModel;
</code></pre>

<p>});
```
This way whenever I need the Keyword single instance, all I have to do is just add keyword.js as a dependency:</p>

<p>``` javascript Getting the Keyword single instance
define([</p>

<pre><code>'backbone',
'models/keyword'
</code></pre>

<p>], function( Backbone, keywordModel ) {</p>

<pre><code>var SearchView = Backbone.View.extend({
    el: '#search'
    events: {
        'change': 'setModel'
    },
    initialize: function() {
        keywordModel.on( 'change: keyword', this.render, this );
    },
    render: function() {
        var keyword = keywordModel.get('keyword');
        this.$el.val(keyword);
    },
    setModel: function() {
        var keyword = this.$el.val();
        keywordModel.set({ keyword: keyword });
    }
});

return SearchView;
</code></pre>

<p>});
```
The first time require.js required to load models/keyword.js, it gets it from the server and returns a new instance of KeywordModel. The next time we ask require.js for models/keyword.js, instead of creating a new instance, require.js returns us the cached instance.</p>

<h2>Desire To Make History</h2>

<p>Now, lets assume that I want to store searches history (each history record contains only the keyword). <br/>
Obviously this means that I have to use a collection, but which model shall I use? I cannot use KeywordModel since I don't have access to its definition. Any time I'll ask for models/keyword.js all I get from require.js is the model instance and not it's definition. <br/>
One solution is to create a new model and return its definition, but this solution is undesirable since we make unnecessary duplication. <br/>
In order to solve this issue we have to remember that <a href="http://backbonejs.org/#Model-extend" target="_blank">Backbone model's extend function</a> can get an optional parameter called "classProperties". These set of properties can be seen as static properties that are related to the class and not to the instance. Therefore our model can be:
```javascript Using class properties
define([</p>

<pre><code>'backbone'
</code></pre>

<p>], function( Backbone ) {</p>

<pre><code>var KeywordModel = Backbone.Model.extend({
    defaults: {
        keyword: ''
    }
}, {
    singleton: null,
    getAppKeyword: function() {
        KeywordModel.singleton =
            KeywordModel.singleton || new KeywordModel;
        return KeywordModel.singleton;
    }
});

return KeywordModel;
</code></pre>

<p>});
<code>
And now, asking for models/keyword.js as a dependency will get us the definition which can be used to retrieve the singleton by calling KeywordModel.getAppKeyword(). Here is the collection of KeywordModel models:
</code>javascript Collection of KeywordModel models
define([</p>

<pre><code>'backbone',
'models/keyword'
</code></pre>

<p>], function( Backbone, KeywordModel ) {</p>

<pre><code>var KeywordsCollection = Backbone.Collection.extend({
    model: KeywordModel,
    initialize: function() {
        this.appKeyword = KeywordModel.getAppKeyword();
        this.appKeyword.on( 'change: keyword', this.pushCopy, this );
    },
    pushCopy: function() {
        var clone = this.appKeyword.clone();
        this.push(clone );
    }
});
return new KeywordsCollection;
</code></pre>

<p>});
```
This way, any time the model's keyword changes, a copy of the application keyword is added to the collection.</p>

<p>I hope this short article gave you another new ideas, thanks for reading!</p>
]]></content>
  </entry>
  
</feed>
